<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>11/25签到推</title>
    <url>/2022/11/25/11-25%E7%AD%BE%E5%88%B0%E6%8E%A8/</url>
    <content><![CDATA[<p>微信公众号例会签到推。</p>
<span id="more"></span>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近NovelAi爆火，很多人开始用这玩意进行自己头像的创作，也有大一的同学来问技术组老人能不能教一教怎么把自己变成老婆（bushi），所以这期推文就教大家用一用这个“神奇”的软件。</p>
<hr>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>start！</p>
<p>由于每个人电脑不一样，而且有公子富婆在用Mac学习工作），所以这篇推文中只涉及在线创作，如果想要将整个项目部署到自己的电脑/服务器上（不要在勤创服务器上搞这个），请自行参阅github或者各大教学网站（Youtube、Bilibili）。</p>
<hr>
<h3 id="NovelAi"><a href="#NovelAi" class="headerlink" title="NovelAi"></a>NovelAi</h3><p>既然这个项目的火爆是由它引起的，那我们自然从本体开始讲解。</p>
<p>首先进入<a href="[https://aistudio.baidu.com/aistudio/projectdetail/4700305?forkThirdPart=1">有手就会</a>系列，在飞桨AI上注册一个账号（可以不填真实姓名），点击启动环境，选择“高级CPU”及以上的环境。</p>
<p>系列，在飞桨AI上注册一个账号（可以不填真实姓名），点击启动环境，选择“高级CPU”及以上的环境。系列，在飞桨AI上注册一个账号（可以不填真实姓名），点击启动环境，选择“高级CPU”及以上的环境。</p>
<p>按照指引进行一步步操作，自己搞着玩的话只需要把图片上传上去，然后等待生成即可。</p>
<hr>
<p>但是，我们自然要讲点不一样的东西，如果只是单纯使用怎么可以呢？</p>
<p>我们发现，输入一张图片，它只能输出同样的图片，这时候我们就需要去学习如何更改图片的风格。</p>
<p>给图片改风格有两种操作，一种是自己搭配，一种是按照现有的模板，下面将分别讲解。</p>
<hr>
<p><a href="https://yun.wafuwafu.com/aliyun/Resources/novelai-naifu">https://yun.wafuwafu.com/aliyun/Resources/novelai-naifu</a></p>
<p>这是有大佬分享的单词集，你希望生成的图片是什么风格，只需要按照相对的tag输入进去就好，尽情发挥你们的想象力，做出更多的奇行种吧！</p>
<p>tips：一般来说tag自己搭配要和图生图一起食用，否则AI无法识别你想要什么的时候做出的图就会比较惊艳了。</p>
<hr>
<p><strong>《元素法典》</strong></p>
<p>多么美妙的一本书~由SteelPlate（网名）编纂，旨在收录所有贴吧作品群内的优质tag和元素魔法。同时他还制作了《从零开始的魔法书——Novel AI 入门导论》。</p>
<p>这本书收录了目前几乎所有风格的ai绘画优质tag，用这些“魔法”你可以轻易创作出非常唯美的画面，但是由于这本书的电子版违反了腾讯公约，所以目前编者手头没有这本书的电子版，需要的米娜桑可以私戳lhmd领取）。</p>
<p>个人比较喜欢星空法~</p>
<hr>
<h3 id="animeGAN"><a href="#animeGAN" class="headerlink" title="animeGAN"></a>animeGAN</h3><p>更真实的体验！</p>
<p>一般来说，NovelAi生成的图片和本人是不太像的，如果想要更真实的照片级别的体验，不如来试试这个项目：animeGAN。</p>
<p><a href="https://github.com/TachibanaYoshino/AnimeGAN这是github上开源的项目，不过大多数人不会去研究它。">https://github.com/TachibanaYoshino/AnimeGAN这是github上开源的项目，不过大多数人不会去研究它。</a></p>
<p>仅仅使用的话可以试试<a href="https://animegan.js.org/">https://animegan.js.org/</a></p>
<p>这是一个在线的编辑器，可以在线生成相应的图片，建议使用这个项目时上传自己/他人的大头照，否则效果会非常模糊。</p>
<hr>
<blockquote>
<p>如果对原理很感兴趣的话，欢迎学习：《机器学习》《深度学习》《卷积神经网络》《计算机视觉》等相关课程/项目</p>
</blockquote>
<p>本周签到问题：猜猜这是谁？</p>
<blockquote>
<p>答案是马老师 </p>
<p>——(animeGAN )制作</p>
</blockquote>
]]></content>
      <categories>
        <category>勤创相关</category>
      </categories>
  </entry>
  <entry>
    <title>Complete Binary Search Tree</title>
    <url>/2022/10/30/Complete-Binary-Search-Tree/</url>
    <content><![CDATA[<h3 id="Complete-Binary-Search-Tree"><a href="#Complete-Binary-Search-Tree" class="headerlink" title="Complete Binary Search Tree"></a><a href="https://pintia.cn/problem-sets/1582215244956827648/exam/problems/1582215245019742217">Complete Binary Search Tree</a></h3><span id="more"></span>
<p>​    本题采取先排序，再将这个问题转换为中序遍历填数字的问题，简化了代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10005</span>], b[<span class="number">10005</span>], n, flag;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[j] &gt; a[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                                <span class="type">int</span> temp = a[j];</span><br><span class="line">                                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                                a[j+<span class="number">1</span>] = temp;</span><br><span class="line">                                cnt = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!cnt)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inorder</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*i &lt;= n)inorder(<span class="number">2</span>*i);</span><br><span class="line">        b[i] = a[flag];</span><br><span class="line">        flag ++;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*i+<span class="number">1</span> &lt;= n)inorder(<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]); </span><br><span class="line">        &#125;</span><br><span class="line">        sort();</span><br><span class="line">        inorder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>NeRF</title>
    <url>/2022/11/18/NeRF/</url>
    <content><![CDATA[<p>第一次阅读计算机视觉相关领域论文。</p>
<span id="more"></span>
<blockquote>
<p>原文链接：<a href="https://arxiv.org/pdf/2003.08934.pdf">NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis</a></p>
<p>NeRF框架总体介绍、原理详解及相关技术(有一些前置知识介绍)：</p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=852328703&bvid=BV1fL4y1T7Ag&cid=550491381&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote>
<p>其他相关介绍视频（本人并未观看）:</p>
<p><a href="https://www.bilibili.com/video/BV1d841187tn/">NeRF源码解析</a></p>
<p><a href="https://www.bilibili.com/video/BV1d34y1n7fn/">NeRF系列公开课</a></p>
</blockquote>
<p>下面开始正式论文阅读记录：</p>
<h1 id="0-Abstract"><a href="#0-Abstract" class="headerlink" title="0 Abstract"></a>0 Abstract</h1><p>这个算法用全连接深度网络来表示场景。</p>
<ul>
<li><p>输入：5D坐标（空间位置$x,y,z$和观察方向$θ，φ$）</p>
<img src="/2022/11/18/NeRF/1.png" class>
</li>
<li><p>输出：每个空间位置的体积密度(volume density)和视景发射辐射度(view-dependent emitted radiance)</p>
</li>
</ul>
<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p>将静态场景表示为一个连续的5D函数，这个函数输出空间中每个点的颜色(radiance)和密度(可理解为不透明度)。</p>
<img src="/2022/11/18/NeRF/2.png" class>
<blockquote>
<p>以上图为例，即先将输入的100张图片变成第二张图的样子，找到每个相机的位置，然后用体渲染技术沿光线累积这个场景表示的采样点信息，最后从新的视角渲染图像。</p>
</blockquote>
<p>这个程序的运行流程是：</p>
<ol>
<li>沿相机光线查询5D坐标</li>
<li>利用神经网络合成视图</li>
<li>用体渲染技术输出颜色和密度，投影到图像中</li>
</ol>
<p>此算法还优化了神经辐射场：</p>
<p>​    对于复杂场景，优化神经辐射场的表示并没有收敛到足够高的清晰度，并且在每个摄像机光线所需要的采样数方面效率低下。所以作者还使用了<strong>位置编码</strong>输入的坐标来解决这些问题。</p>
<p>​    位置编码能使MLP表示频率更高的函数。作者还提出了<strong>分层采样过程</strong>，用来减少需要的输入视图的个数。</p>
<p>总而言之，这个算法的技术贡献有：</p>
<ul>
<li>将具有复杂几何和材质的连续场景表现为5D神经辐射场，参数化为基本MLP网络。</li>
<li>基于经典体渲染技术的可微分渲染过程，包括分层采样策略，用于将MLP的容量分配给场景中的可见内容。</li>
<li>将每个5D空间坐标映射到更高维度空间的位置编码，成功优化神经辐射场从而表示高频内容。</li>
</ul>
<img src="/2022/11/18/NeRF/3.png" class>
<p>​    沿着相机的光线采样5D坐标(图a)，将这些信息输入$F_θ$生成颜色和密度(图b)，用体渲染技术合成2D图像(图c)。该渲染函数是可微的，因此我们可以通过最小化合成图像和GT观测图像之间的error来优化场景表示(图d)。</p>
<h1 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2 Related Work"></a>2 Related Work</h1><p>​    回顾了一些这项工作所用到的技术和前人所做的努力。</p>
<h2 id="2-1-Neural-3D-shape-representations"><a href="#2-1-Neural-3D-shape-representations" class="headerlink" title="2.1 Neural 3D shape representations"></a>2.1 Neural 3D shape representations</h2><p>​    通过优化将$xyz$坐标映射到有符号距离函数的深层网络。但是该函数仅允许使用2D图像优化神经隐式形状表示，只能表示几何复杂度较低的简单形状。</p>
<h2 id="2-2-View-synthesis-and-image-based-rendering"><a href="#2-2-View-synthesis-and-image-based-rendering" class="headerlink" title="2.2 View synthesis and image-based rendering"></a>2.2 View synthesis and image-based rendering</h2><ul>
<li>mesh方法：基于图像重投影的基于梯度的mesh优化通常非常困难，在优化前需要提供具有固定拓扑的末班网络作为初始化。这不适用于无约束的现实世界场景。</li>
<li>体积方法：能表示更复杂的材料和形状并且适合基于梯度的优化，视觉干扰也更少，现有的方法时间空间复杂度更高。本文提出在MLP的参数中编码连续volume来规避这个问题，渲染质量更高，存储成本更小。</li>
</ul>
<h1 id="3-Neural-Radiance-Field-Scene-Representation"><a href="#3-Neural-Radiance-Field-Scene-Representation" class="headerlink" title="3 Neural Radiance Field Scene Representation"></a>3 Neural Radiance Field Scene Representation</h1><p>​    本文将连续场景表现为5D向量值函数。输入为5D坐标，输出为每个点的颜色$c=(r,g,b)$和空间密度$σ$。</p>
<p>​    在实际表现中，我们将视角方向表示为3D向量<strong>$d$</strong>，用MLP网络近似这种连续的5D场景表示。</p>
<p>​    我们通过让网络把体积密度预测为仅与位置$x$有关，来保证这种方法在不同视图下是一致的。</p>
<p>​    同时RGB颜色$c$预测为位置和观察方向的函数：</p>
<ul>
<li>MLP首先把3D坐标$x$通过8层全连接层(激活函数为ReLU，每层256通道)，输出体积密度$σ$和一个256维的特征向量。</li>
<li>将特征向量与相机光线的观察方向连接起来，传递到额外的一个全连接层(激活函数为ReLU，每层128通道)，该层输出与视图相关的RGB颜色。</li>
</ul>
<img src="/2022/11/18/NeRF/4.png" class>
<p>​    显示来自两个相机位置的两个固定3D点的外观，预测这两个3D点镜面反射外观的变化并持续推广。</p>
<img src="/2022/11/18/NeRF/5.png" class>
<p>​    没有视图依赖性(只有x输入)训练的模型难以表示镜面反射，会导致过度平滑的外观。</p>
<h1 id="4-Volume-Rendering-with-Radiance-Fields"><a href="#4-Volume-Rendering-with-Radiance-Fields" class="headerlink" title="4 Volume Rendering with Radiance Fields"></a>4 Volume Rendering with Radiance Fields</h1><blockquote>
<p>体渲染：<a href="https://blog.csdn.net/Aaron9489/article/details/127899392?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EAD_ESQUERY%7Eyljh-1-127899392-blog-107904447.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EAD_ESQUERY%7Eyljh-1-127899392-blog-107904447.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=2">体渲染(Volume Rendering)与光线投射(Ray Casting)算法详解</a></p>
<p>alpha合成：图像与背景结合，可以产生部分透明或全透明的视觉效果，透明度用(0,1)表示</p>
<p>alpha混合：半透明的前景色和背景结合的过程，加权计算。<br>$<br>\left\{<br>\begin{array}{**l}<br>out_A &amp; = &amp; src_A + dst_A(1-src_A) \\<br>out_{RGB} &amp; = &amp; \frac {(src_{RGB}src_A+dst_{RGB}dst_A(1-src_A))}{out_A} \\<br>out_A=0 &amp; =&gt; &amp; out_{RGB}=0<br>\end{array}<br>\right.<br>$</p>
</blockquote>
<p>体密度即为光线在x处终止的概率，相机光线$r_{(t)}=o+td$的预期颜色为：</p>
<p>$C_{(r)}\int_{t_n}^{t_f} T_{(t)}σ(r_{(t)}c(r_{(t)})，d) dt, where: T_{(t)}=exp(-\int_{t_n}^{t} σ(r_{(s)}) ds)$</p>
<p>$T_{(t)}$表示沿光线从$t_n$到$t$传播而不撞击任何其他粒子的概率，这个$T$可以避免渲染时过度引入对象背面的信息。</p>
<p>我们使用数值估计这个连续积分。我们将$[t_n,t_f]$划分为$N$个均匀间隔的区域，然后从每个区域内均匀随机抽取一个采样点。</p>
<h1 id="5-Optimizing-a-Neural-Radiance-Field"><a href="#5-Optimizing-a-Neural-Radiance-Field" class="headerlink" title="5 Optimizing a Neural Radiance Field"></a>5 Optimizing a Neural Radiance Field</h1><p>​    上一节中已经描述了将场景建模为神经辐射场和从该表示中渲染新视图所需的核心组件，但是仍然不能达到最高的质量。因此，需要引入两项改进：</p>
<ul>
<li>输入坐标的位置编码，有助于MLP表示高频函数</li>
<li>分层采样过程，有效地对高频进行采样</li>
</ul>
<h2 id="5-1-位置编码-Positional-encoding"><a href="#5-1-位置编码-Positional-encoding" class="headerlink" title="5.1 位置编码(Positional encoding)"></a>5.1 位置编码(Positional encoding)</h2><p>​    将F~θ~重新表示为两个函数的组合$F_θ=F_{θ}^{‘}○γ$，γ是从$R$空间到$R^{2L}$空间的函数，实际上$F_{θ}^{‘}$还是一个MLP。</p>
<p>​    在流行的Transformer架构中也使用了类似的映射，在这里它被称为位置编码。然而，Transformers将其用于一个不同的目标，即提供序列中token的离散位置，作为不包含任何顺序概念的架构的输入。相反，我们使用这些函数将连续输入坐标映射到更高维空间，以使我们的MLP更容易逼近更高频的函数。</p>
<h2 id="5-2-分层体积采样-Hierarchical-volume-sampling"><a href="#5-2-分层体积采样-Hierarchical-volume-sampling" class="headerlink" title="5.2 分层体积采样(Hierarchical volume sampling)"></a>5.2 分层体积采样(Hierarchical volume sampling)</h2><p>​    渲染策略是在每个相机光线的N个查询点处密集评估神将辐射场网络，这种策略效率低下，所以本文提出了一中分层表示法，通过按最终渲染的预期效果按比例分配采样点提高渲染效率。</p>
<p>​    不使用单个神经网络来表示场景，而同时优化两个神经网络：”course”和”fine”</p>
<ol>
<li>首先，使用基本的分层采样对一组N~c~个位置进行采样，评估这些位置对应的course网络。</li>
<li>然后沿着每一条光线生成一个更合理的点采样，其中采样点偏向于体积存在的相关部分。</li>
<li>为此，我们首先从course网络生成合成颜色，然后在光线上采样体密度大的点，采样N~f~个作为第二组采样点，在第一组和第二组采样的并集上计算”fine”网络，并计算最终的渲染颜色。</li>
</ol>
<h2 id="5-3-实现细节"><a href="#5-3-实现细节" class="headerlink" title="5.3 实现细节"></a>5.3 实现细节</h2><p>​    我们为每个场景优化一个单独的神经连续体积表示网络。需要的参数有：RGB图像数据集、相应的相机外参和内参以及场景边界。在每次优化迭代中，我们从数据集中的所有像素集合中随机采样一批相机光线，然后按照$5.2$中的分层采样。最后的损失只是course和fine的渲染像素和真实像素颜色之间的平方误差。</p>
<img src="/2022/11/18/NeRF/6.png" class>
<p>​    其中，$R$为batch中的光线集，$C(r),C_{c}(r),C_{f}(r)$为GT，course网络预测，fine网络预测的RGB颜色。</p>
<h1 id="6-Results"><a href="#6-Results" class="headerlink" title="6 Results"></a>6 Results</h1><p>两种数据集：</p>
<ul>
<li>Synthetic renderings of objects</li>
<li>Real images of complex scenes</li>
</ul>
<blockquote>
<p>nerf-pytorch代码阅读笔记：<a href="https://github.com/lhmd/nerf-notes">nerf-notes</a></p>
<p>上手pytorch：<a href="https://blog.csdn.net/jiaowoshouzi/article/details/102002468?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-102002468-blog-123333042.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-102002468-blog-123333042.pc_relevant_default&amp;utm_relevant_index=1">60分钟教你上手PyTorch + 迁移学习</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CV</category>
        <category>paper</category>
      </categories>
  </entry>
  <entry>
    <title>ICS速成笔记</title>
    <url>/2022/11/09/ICS%E9%80%9F%E6%88%90%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>大一暑学期计算机系统概论考前复习速成。</p>
<span id="more"></span>
<div class="pdf-container" data-target="/pdf/ICS速成笔记.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>ICS</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106L Midquarter Review</title>
    <url>/2023/01/20/CS106L-Midquarter-Review/</url>
    <content><![CDATA[<p>Midquarter review of Stanford CS106L.</p>
<span id="more"></span>
<h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><blockquote>
<p>stream: an abstraction for input/output. Streams  convert between data and the string representation of data.</p>
</blockquote>
<h3 id="Output-Streams"><a href="#Output-Streams" class="headerlink" title="Output Streams"></a>Output Streams</h3><ul>
<li>Have type <code>std::ostream</code></li>
<li>Can only send data using the <code>&lt;&lt;</code> operator<ul>
<li>Converts any type into string and sends it to the stream</li>
</ul>
</li>
<li><code>std::cout</code> is the output stream that goes to the console</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::cout &lt;&lt; <span class="number">5</span> &lt;&lt; std::endl; </span><br><span class="line"><span class="comment">// converts int value 5 to string “5”</span></span><br><span class="line"><span class="comment">// sends “5” to the console output stream</span></span><br></pre></td></tr></table></figure>
<h3 id="Output-File-Streams"><a href="#Output-File-Streams" class="headerlink" title="Output File Streams"></a>Output File Streams</h3><ul>
<li>Have type <code>std::ofstream</code></li>
<li>Only receive data using the <code>&lt;&lt;</code> operator<ul>
<li>Converts data of any type into a string and sends it to the  file stream</li>
</ul>
</li>
<li>Must initialize your own <code>ofstream</code> object linked to your file</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::ofstream <span class="title">out</span><span class="params">(“out.txt”, std::ofstream::out)</span></span>;</span><br><span class="line"><span class="comment">// out is now an ofstream that outputs to out.txt</span></span><br><span class="line">out &lt;&lt; <span class="number">5</span> &lt;&lt; std::endl; <span class="comment">// out.txt contains 5</span></span><br></pre></td></tr></table></figure>
<h3 id="Input-Streams"><a href="#Input-Streams" class="headerlink" title="Input Streams"></a>Input Streams</h3><ul>
<li>Have type <code>std::istream</code></li>
<li>Can only receive data using the <code>&gt;&gt;</code> operator<ul>
<li>Receives a string from the stream and converts it to data</li>
</ul>
</li>
<li><code>std::cin</code> is the output stream that gets input from the console</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line">string str;</span><br><span class="line">std::cin &gt;&gt; x &gt;&gt; str;</span><br><span class="line"><span class="comment">//reads exactly one int then 1 string from console</span></span><br></pre></td></tr></table></figure>
<h3 id="Nitty-Gritty-Details-std-cin"><a href="#Nitty-Gritty-Details-std-cin" class="headerlink" title="Nitty Gritty Details: std::cin"></a>Nitty Gritty Details: std::cin</h3><ul>
<li>First call to std::cin &gt;&gt; creates a command line prompt  that allows the user to type until they hit enter</li>
<li>Each &gt;&gt; ONLY reads until the next whitespace<ul>
<li>Whitespace = tab, space, newline</li>
</ul>
</li>
<li>Everything after the first whitespace gets saved and used the  next time std::cin &gt;&gt; is called<ul>
<li>The place its saved is called a buffer!</li>
</ul>
</li>
<li>If there is nothing waiting in the buffer, std::cin &gt;&gt; creates a new command line prompt</li>
<li>Whitespace is eaten: it won’t show up in output</li>
</ul>
<h3 id="Stringstreams"><a href="#Stringstreams" class="headerlink" title="Stringstreams"></a>Stringstreams</h3><ul>
<li>Input stream: std::istringstream<ul>
<li>Give any data type to the istringstream, it’ll store it as a  string!</li>
</ul>
</li>
<li>Output stream: std::ostringstream<ul>
<li>Make an ostringstream out of a string, read from it  word/type by word/type!</li>
</ul>
</li>
<li>The same as the other i/ostreams you’ve seen</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ostringstreams</span></span><br><span class="line"><span class="function">string <span class="title">judgementCall</span><span class="params">(<span class="type">int</span> age, string name, <span class="type">bool</span> lovesCpp)</span> </span>&#123;</span><br><span class="line">    std::ostringstream formatter;</span><br><span class="line">    formatter &lt;&lt; name &lt;&lt;<span class="string">&quot;, age &quot;</span> &lt;&lt; age;</span><br><span class="line">    <span class="keyword">if</span>(lovesCpp) formatter &lt;&lt; <span class="string">&quot;, rocks.&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> formatter &lt;&lt; <span class="string">&quot; could be better&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> formatter.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//istringstreams</span></span><br><span class="line"><span class="function">Student <span class="title">reverseJudgementCall</span><span class="params">(string judgement)</span> </span>&#123;</span><br><span class="line">    std::istringstream converter;</span><br><span class="line">    string fluff; <span class="type">int</span> age; <span class="type">bool</span> lovesCpp; string name;</span><br><span class="line">    converter &gt;&gt; name;</span><br><span class="line">    converter &gt;&gt; fluff;</span><br><span class="line">    converter &gt;&gt; age;</span><br><span class="line">    converter &gt;&gt; fluff;</span><br><span class="line">    string cool;</span><br><span class="line">    converter &gt;&gt; cool;</span><br><span class="line">    <span class="keyword">if</span>(fluff == <span class="string">&quot;rocks&quot;</span>) <span class="keyword">return</span> Student&#123;name, age, <span class="string">&quot;bliss&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Student&#123;name, age, <span class="string">&quot;misery&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><h3 id="References-to-variables"><a href="#References-to-variables" class="headerlink" title="References to variables"></a>References to variables</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; original&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; copy = original;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;&amp; ref = original;</span><br><span class="line">original.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">copy.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">ref.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; original &lt;&lt; endl; <span class="comment">// &#123;1, 2, 3, 5&#125;</span></span><br><span class="line">cout &lt;&lt; copy &lt;&lt; endl; <span class="comment">// &#123;1, 2, 4&#125;</span></span><br><span class="line">cout &lt;&lt; ref &lt;&lt; endl; <span class="comment">// &#123;1, 2, 3, 5&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="The-classic-reference-copy-bug"><a href="#The-classic-reference-copy-bug" class="headerlink" title="The classic reference-copy bug:"></a>The classic reference-copy bug:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [num1, num2] = nums[i];<span class="comment">//This creates a copy of the course</span></span><br><span class="line">        num1++;</span><br><span class="line">        num2++;<span class="comment">//This is updating that same copy!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The classic reference-copy bug, fixed:</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [num1, num2]: nums) &#123;</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="The-classic-reference-rvalue-error"><a href="#The-classic-reference-rvalue-error" class="headerlink" title="The classic reference-rvalue error"></a>The classic reference-rvalue error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [num1, num2]: nums) &#123;</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shift</span>(&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;&#125;); </span><br><span class="line"><span class="comment">// &#123;&#123;1, 1&#125;&#125; is an rvalue, it can’t be referenced</span></span><br></pre></td></tr></table></figure>
<ul>
<li>l-values<ul>
<li>l-values can appear on the left or  right of an =</li>
<li><code>x</code> is an l-value</li>
<li>l-values have names</li>
<li>l-values are not temporary</li>
</ul>
</li>
<li>r-values<ul>
<li>r-values can ONLY appear on the  right of an =</li>
<li><code>3</code> is an r-value</li>
<li>r-values don’t have names</li>
<li>r-values are temporary</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The classic reference-rvalue error, fixed</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [num1, num2]: nums) &#123;</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> my_nums = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">shift</span>(my_nums);</span><br></pre></td></tr></table></figure>
<h3 id="const-indicates-a-variable-can’t-be-modified"><a href="#const-indicates-a-variable-can’t-be-modified" class="headerlink" title="const indicates a variable can’t be modified"></a>const indicates a variable can’t be modified</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;; <span class="comment">// a const variable</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = vec; <span class="comment">// a regular reference</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; c_ref = vec; <span class="comment">// a const reference</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// OKAY</span></span><br><span class="line">c_vec.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// BAD - const</span></span><br><span class="line">ref.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// OKAY</span></span><br><span class="line">c_ref.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// BAD - const</span></span><br></pre></td></tr></table></figure>
<h3 id="const-amp-subtleties"><a href="#const-amp-subtleties" class="headerlink" title="const &amp; subtleties"></a>const &amp; subtleties</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = vec;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; c_ref = vec;</span><br><span class="line"><span class="keyword">auto</span> copy = c_ref; <span class="comment">// a non-const copy</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> copy = c_ref; <span class="comment">// a const copy</span></span><br><span class="line"><span class="keyword">auto</span>&amp; a_ref = ref; <span class="comment">// a non-const reference</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span>&amp; c_aref = ref; <span class="comment">// a const reference</span></span><br></pre></td></tr></table></figure>
<h2 id="Containers-and-Iterators"><a href="#Containers-and-Iterators" class="headerlink" title="Containers and Iterators"></a>Containers and Iterators</h2><h3 id="Simple-Sequence-Containers"><a href="#Simple-Sequence-Containers" class="headerlink" title="Simple  Sequence Containers"></a>Simple  Sequence Containers</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[Sequence Containers]--&gt;B[Simple]</span><br><span class="line">A--&gt;C[Adaptors]</span><br><span class="line">B--&gt;d[vector]</span><br><span class="line">B--&gt;e[deque]</span><br><span class="line">B--&gt;f[list]</span><br><span class="line">B--&gt;q[tuple]</span><br><span class="line">C--&gt;p[stack]</span><br><span class="line">C--&gt;o[queue]</span><br><span class="line">C--&gt;m[priority_queue]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[Associative Containers]--&gt;B[Ordered]</span><br><span class="line">A--&gt;C[Unordered]</span><br><span class="line">B--&gt;set</span><br><span class="line">B--&gt;map</span><br><span class="line">C--&gt;unordered_set</span><br><span class="line">C--&gt;unordered_map</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>What you want to do</th>
<th>std::vector</th>
<th>std::deque</th>
<th>std::list</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert/remove in the front</td>
<td>Slow</td>
<td>Fast</td>
<td>Fast</td>
</tr>
<tr>
<td><strong>Insert/remove in the back</strong></td>
<td>Super Fast</td>
<td>Very Fast</td>
<td>Fast</td>
</tr>
<tr>
<td><strong>Indexed Access</strong></td>
<td>Super Fast</td>
<td>Fast</td>
<td>Impossible</td>
</tr>
<tr>
<td>Insert/remove in the middle</td>
<td>Slow</td>
<td>Fast</td>
<td>Very Fast</td>
</tr>
<tr>
<td>Memory usage</td>
<td>Low</td>
<td>High</td>
<td>High</td>
</tr>
<tr>
<td>Combining (splicing/joining)</td>
<td>Slow</td>
<td>Very Slow</td>
<td>Fast</td>
</tr>
<tr>
<td>Stability (iterators/concurrency)</td>
<td>Bad</td>
<td>Very Bad</td>
<td>Good</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Container-Adaptors"><a href="#Container-Adaptors" class="headerlink" title="Container Adaptors"></a>Container Adaptors</h3><blockquote>
<p>What is a container adaptor? <code>std::stack and std::queue</code></p>
</blockquote>
<p>Container adaptors are wrappers in C++</p>
<ul>
<li>Container adaptors provide a different interface for sequence containers. </li>
<li>You can choose what the underlying container is</li>
<li>For instance, let’s choose a deque as our underlying container, and let’s implement a  queue</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::queue&lt;<span class="type">int</span>&gt; stack_deque; <span class="comment">// Container = std::deque</span></span><br><span class="line">std::queue&lt;<span class="type">int</span>, std::list&lt;<span class="type">int</span>&gt;&gt; stack_list;<span class="comment">// Container = std::list</span></span><br></pre></td></tr></table></figure>
<h3 id="Associative-Containers"><a href="#Associative-Containers" class="headerlink" title="Associative Containers"></a>Associative Containers</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//set</span></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt; s;<span class="comment">//Create an empty set</span></span><br><span class="line">s.<span class="built_in">insert</span>(k);<span class="comment">//Add a value k to the set</span></span><br><span class="line">s.<span class="built_in">erase</span>(k);<span class="comment">//Remove value k from the set</span></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">count</span>(k))...<span class="comment">//Check if a value k is in the set</span></span><br><span class="line"><span class="keyword">if</span> (vec.<span class="built_in">empty</span>())...<span class="comment">//Check if vector is empty</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line">std::map&lt;<span class="type">int</span>, <span class="type">char</span>&gt; m;<span class="comment">//Create an empty map</span></span><br><span class="line">m.<span class="built_in">insert</span>(&#123;k, v&#125;);</span><br><span class="line">m[k] = v;<span class="comment">//Add key k with value v into the map</span></span><br><span class="line">m.<span class="built_in">erase</span>(k);<span class="comment">//Remove key k from the map</span></span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">count</span>(k)) ...<span class="comment">//Check if key k is in the map</span></span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">empty</span>()) ...<span class="comment">//Check if the map is empty</span></span><br><span class="line"><span class="comment">//Retrieve or overwrite value associated with key k (error if key isn’t in map)</span></span><br><span class="line"><span class="type">char</span> c = m.<span class="built_in">at</span>(k);</span><br><span class="line">m.<span class="built_in">at</span>(k) = v;</span><br><span class="line"><span class="comment">//Retrieve or overwrite value associated with key k (auto-insert if key isn’t in map)</span></span><br><span class="line"><span class="type">char</span> c = m[k];</span><br><span class="line">m[k] = v;</span><br></pre></td></tr></table></figure>
<h3 id="STL-Iterators"><a href="#STL-Iterators" class="headerlink" title="STL Iterators"></a>STL Iterators</h3><ul>
<li>Iterators are objects that point to elements inside containers.</li>
<li>Each STL container has its own iterator, but all of these iterators exhibit a similar  behavior!</li>
<li>Generally, STL iterators support the following operations:</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;type&gt; s = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">std::set::iterator iter = s.<span class="built_in">begin</span>(); <span class="comment">// at 0</span></span><br><span class="line">++iter; <span class="comment">// at 1</span></span><br><span class="line">*iter; <span class="comment">// 1</span></span><br><span class="line">(iter != s.<span class="built_in">end</span>()); <span class="comment">// can compare </span></span><br><span class="line">iterator equality</span><br><span class="line"><span class="keyword">auto</span> second_iter = iter; <span class="comment">// &quot;copy construction&quot;</span></span><br></pre></td></tr></table></figure>
<p>Why ++iter and not iter++?</p>
<p><strong>Answer</strong>: ++iter returns the value after being incremented! iter++ returns the previous value and then increments it. (wastes  just a bit of time)</p>
<h3 id="Looping-over-collections"><a href="#Looping-over-collections" class="headerlink" title="Looping over collections"></a>Looping over collections</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始</span></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt; set&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = set.<span class="built_in">begin</span>(); iter != set.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; elem = *iter;</span><br><span class="line">    cout &lt;&lt; elem &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">std::map&lt;<span class="type">int</span>&gt; map&#123;&#123;<span class="number">1</span>, <span class="number">6</span>&#125;, &#123;<span class="number">1</span>, <span class="number">8</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = map.<span class="built_in">begin</span>(); iter != map.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] = *iter; <span class="comment">// structured binding!</span></span><br><span class="line">    cout &lt;&lt; key &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt; set&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; elem : set) &#123;</span><br><span class="line">    cout &lt;&lt; elem &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">std::map&lt;<span class="type">int</span>&gt; map&#123;&#123;<span class="number">1</span>, <span class="number">6</span>&#125;, &#123;<span class="number">1</span>, <span class="number">8</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] : map) &#123;</span><br><span class="line">    cout &lt;&lt; key &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h3><ul>
<li>When variables are created, they’re given  an address in memory.</li>
<li>Pointers are objects that store an address  and type of a variable.</li>
</ul>
<h2 id="classes"><a href="#classes" class="headerlink" title="classes"></a>classes</h2><blockquote>
<p>A programmerdefined custom type. An  abstraction of an object or data type.</p>
</blockquote>
<h3 id="Sections"><a href="#Sections" class="headerlink" title="Sections"></a>Sections</h3><ul>
<li>Public section:<ul>
<li>Users of the Student object can  directly access anything here!</li>
<li>Defines interface for interacting with  the private member variables</li>
</ul>
</li>
<li>Private section:<ul>
<li>Usually contains all member  variables</li>
<li>Users can’t access or modify  anything in the private section</li>
</ul>
</li>
</ul>
<h3 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h3><ul>
<li>Define how the member variables of an object is initialized</li>
<li>What gets called when you first create a Student object</li>
<li>Overloadable</li>
</ul>
<h3 id="Destructors"><a href="#Destructors" class="headerlink" title="Destructors"></a>Destructors</h3><ul>
<li>Arrays are memory WE allocate, so we need to give instructions for when to  deallocate that memory!</li>
<li>When we are done using our array, we need to <code>delete []</code> it!</li>
</ul>
<h3 id="Template-classes"><a href="#Template-classes" class="headerlink" title="Template classes"></a>Template classes</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mypair.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “mypair.h”</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">First</span>, <span class="keyword">typename</span> Second&gt;</span><br><span class="line">First MyPair&lt;First, Second&gt;::<span class="built_in">getFirst</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Second</span>, <span class="keyword">typename</span> First&gt;</span><br><span class="line">    Second MyPair&lt;First, Second&gt;::<span class="built_in">getSecond</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Member-Types"><a href="#Member-Types" class="headerlink" title="Member Types"></a>Member Types</h3><ul>
<li>Sometimes, we need a name for a type that is dependent on  our template types</li>
<li>iterator is a member type of vector</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vector.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">vector</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> iterator = … <span class="comment">// something internal</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    iterator front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector.cpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::iterator vector&lt;T&gt;::<span class="built_in">insert</span>(iterator pos, intvalue) &#123;...&#125;</span><br><span class="line"><span class="comment">//iterator is a nested type in namespace vector&lt;T&gt;::</span></span><br></pre></td></tr></table></figure>
<p><strong>Aside: Type Aliases</strong></p>
<ul>
<li>You can use using type_name = type in application  code as well!</li>
<li>When using it in a class interface, it defines a nested type, like  vector::iterator</li>
<li>When using it in application code, like main.cpp, it just creates another name for type within that scope (until the  next unmatched })</li>
</ul>
<p><strong>Summary</strong></p>
<ul>
<li>Used to make sure your clients have a standardized way to  access important types</li>
<li>Lives in your namespace: <code>vector&lt;T&gt;::iterator</code></li>
<li>After class specifier, you can use the alias directly (e.g. inside  function arguments, inside function body)</li>
<li>Before class specifier, use typename.</li>
</ul>
<h3 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h3><p><strong>Template classes</strong></p>
<ul>
<li>Add <code>template&lt;typename T1, typename T2 ...&gt;</code> before class definition in .h</li>
<li>Add <code>template&lt;typename T1, typename T2 ...&gt;</code> before all  function signature in .cpp</li>
<li>When returning nested types (like iterator types), put <code>template&lt;typename T1, typename T2 ...&gt;::member_type</code> as return type, not  just <code>member_type</code></li>
<li>Templates don’t emit code until instantiated, so <code>#include</code> the  .cpp file in the .h file, not the other way around</li>
</ul>
<p><strong>Const and Const-correctness</strong></p>
<ul>
<li>Use const parameters and variables wherever you can in application code</li>
<li>Every member function of a class that doesn’t change its member variables should be marked <code>const</code></li>
<li>auto will drop all const and &amp;, so be sure to specify</li>
<li>Make iterators and const_iterators for all your classes!<ul>
<li><strong>const iterator</strong> = cannot increment the iterator, can dereference and change underlying value</li>
<li><strong>const_iterator</strong> = can increment the iterator, cannot dereference and change underlying value</li>
<li><strong>const const_iterator</strong> = cannot increment iterator, cannot dereference and change underlying value</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>course</category>
      </categories>
  </entry>
  <entry>
    <title>CS106L课程笔记</title>
    <url>/2023/01/18/CS106L%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Stanford CS106L: Standard C++ Programming课程笔记。</p>
<span id="more"></span>
<blockquote>
<p>引言：<em>CS106B/X</em> 和 <em>CS106L</em> 是配套课程，学习完前一个再学习 <em>CS106L</em> 才是正确的路径。但是浙江大学的《数据结构基础》课程已经包括了 <em>CS106B</em> 中除 <em>C++ Class</em> 和 <em>Huffman Coding</em> 之外的其他内容，所以对于 <em>CS106B</em> 的内容仅做简单补充。</p>
<p>此笔记基于 <em>CS 106L, Fall ‘21</em></p>
</blockquote>
<h1 id="Lec1-Welcome-to-CS-106L"><a href="#Lec1-Welcome-to-CS-106L" class="headerlink" title="Lec1 Welcome to CS 106L!"></a>Lec1 Welcome to CS 106L!</h1><h2 id="Why-C-is-important"><a href="#Why-C-is-important" class="headerlink" title="Why C++ is important"></a>Why C++ is important</h2><h2 id="What-is-C"><a href="#What-is-C" class="headerlink" title="What is C++"></a>What is C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv)</span> </span>&#123;</span><br><span class="line">     <span class="built_in">asm</span>(<span class="string">&quot;sub $0x20,%rsp\n\t&quot;</span> <span class="comment">// assembly code!</span></span><br><span class="line">         <span class="string">&quot;movabs $0x77202c6f6c6c6548,%rax\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;mov %rax,(%rsp)\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;movl $0x646c726f, 0x8(%rsp)\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;movw $0x21, 0xc(%rsp)\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;movb $0x0,0xd(%rsp)\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;leaq (%rsp),%rax\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;mov %rax,%rdi\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;call __Z6myputsPc\n\t&quot;</span></span><br><span class="line">         <span class="string">&quot;add $0x20, %rsp\n\t&quot;</span></span><br><span class="line">     );</span><br><span class="line">     <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Lec2-Types-and-Structs"><a href="#Lec2-Types-and-Structs" class="headerlink" title="Lec2 Types and Structs"></a>Lec2 Types and Structs</h1><blockquote>
<p>Types make things better…and sometimes harder…but still better</p>
</blockquote>
<h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><h3 id="Fundamental-Types"><a href="#Fundamental-Types" class="headerlink" title="Fundamental Types"></a>Fundamental Types</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">5</span>; <span class="comment">//32 bits</span></span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;F&#x27;</span>; <span class="comment">//8 bits (usually)</span></span><br><span class="line"><span class="type">float</span> decimalVal1 = <span class="number">5.0</span>; <span class="comment">//32 bits (usually)</span></span><br><span class="line"><span class="type">double</span> decimalVal2 = <span class="number">5.0</span>; <span class="comment">//64 bits (usually)</span></span><br><span class="line"><span class="type">bool</span> bVal = <span class="literal">true</span>; <span class="comment">//1 bit</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">std::string str = <span class="string">&quot;Frankie&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>​    C++ is a statically typed language: everything  with a name (variables,  functions, etc) is given a  type before runtime</p>
<p>​    static typing helps us to  prevent errors before our  code runs</p>
<h3 id="Static-Types-Function"><a href="#Static-Types-Function" class="headerlink" title="Static Types + Function"></a>Static Types + Function</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="type">int</span>, <span class="type">int</span> -&gt; <span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function">string <span class="title">echo</span><span class="params">(string phrase)</span></span>;</span><br><span class="line">string -&gt; <span class="function">string</span></span><br><span class="line"><span class="function">string <span class="title">helloworld</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">void</span> -&gt; <span class="function">string</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="type">int</span>, <span class="type">int</span> -&gt; <span class="type">double</span></span><br></pre></td></tr></table></figure>
<h3 id="Overloading"><a href="#Overloading" class="headerlink" title="Overloading"></a>Overloading</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">half</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> divisor = <span class="number">2</span>)</span> </span>&#123; <span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">return</span> x / divisor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">half</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123; <span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">return</span> x / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">half</span>(<span class="number">3</span>)<span class="comment">// uses version (1), returns 1</span></span><br><span class="line"><span class="built_in">half</span>(<span class="number">3</span>, <span class="number">3</span>)<span class="comment">// uses version (1), returns 1</span></span><br><span class="line"><span class="built_in">half</span>(<span class="number">3.0</span>) <span class="comment">// uses version (2), returns 1.5</span></span><br></pre></td></tr></table></figure>
<h2 id="Intro-to-structs"><a href="#Intro-to-structs" class="headerlink" title="Intro to structs"></a>Intro to structs</h2><blockquote>
<p>struct: a group of named variables each with their own type. A way to bundle different types together</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name; <span class="comment">// these are called fields</span></span><br><span class="line">    string state; <span class="comment">// separate these by semicolons</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line">Student s;</span><br><span class="line">s.name = <span class="string">&quot;Frankie&quot;</span>; </span><br><span class="line">s.state = <span class="string">&quot;MN&quot;</span>;</span><br><span class="line">s.age = <span class="number">21</span>; <span class="comment">// use . to access fields</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudentInfo</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; s.name &lt;&lt; <span class="string">&quot; from &quot;</span> &lt;&lt; s.state;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; (&quot;</span> &lt;&lt; s.age <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Student <span class="title">randomStudentFrom</span><span class="params">(std::string state)</span> </span>&#123;</span><br><span class="line">    Student s;</span><br><span class="line">    s.name = <span class="string">&quot;Frankie&quot;</span>;<span class="comment">//random = always Frankie</span></span><br><span class="line">    s.state = state;</span><br><span class="line">    s.age = std::<span class="built_in">randint</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"> Student foundStudent = <span class="built_in">randomStudentFrom</span>(<span class="string">&quot;MN&quot;</span>);</span><br><span class="line"> cout &lt;&lt; foundStudent.name &lt;&lt; endl; <span class="comment">// Frankie</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>std::pair: An STL  built-in struct with two fields of any type</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix = &#123;<span class="number">1</span>,<span class="string">&quot;st&quot;</span>&#125;;</span><br><span class="line">cout &lt;&lt; numSuffix.first &lt;&lt; numSuffix.second; </span><br><span class="line"><span class="comment">//prints 1st</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    fill_in_type first; </span><br><span class="line">    fill_in_type second; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//pair in functions</span></span><br><span class="line"><span class="function">std::pair&lt;<span class="type">bool</span>, Student&gt; <span class="title">lookupStudent</span><span class="params">(string name)</span> </span>&#123;</span><br><span class="line">    Student blank;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">found</span>(name)) <span class="keyword">return</span> std::<span class="built_in">make_pair</span>(<span class="literal">false</span>, blank);</span><br><span class="line">    Student result = <span class="built_in">getStudentWithName</span>(name);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_pair</span>(<span class="literal">true</span>, result);</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;<span class="type">bool</span>, Student&gt; output = <span class="built_in">lookupStudent</span>(“Keith”);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>auto: Keyword used in lieu  of type when declaring a  variable, tells the compiler  to deduce the type.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//It means that the type is  deduced by the compiler. </span></span><br><span class="line"><span class="keyword">auto</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">auto</span> b = <span class="number">4.3</span>;</span><br><span class="line"><span class="keyword">auto</span> c = ‘X’;</span><br><span class="line"><span class="keyword">auto</span> d = “Hello”;</span><br><span class="line"><span class="keyword">auto</span> e = std::<span class="built_in">make_pair</span>(<span class="number">3</span>, “Hello”);</span><br></pre></td></tr></table></figure>
<h2 id="Sneak-peek-at-streams"><a href="#Sneak-peek-at-streams" class="headerlink" title="Sneak peek at streams"></a>Sneak peek at streams</h2><blockquote>
<p>stream: an abstraction for input/output. Streams convert between data and the string representation of data.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::cout &lt;&lt; <span class="number">5</span> &lt;&lt; std::endl; <span class="comment">// prints 5 </span></span><br><span class="line"><span class="comment">// use a stream to print any primitive type!</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Frankie&quot;</span> &lt;&lt; std::endl; </span><br><span class="line"><span class="comment">// Mix types!</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Frankie is &quot;</span> &lt;&lt; <span class="number">21</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// structs?</span></span><br><span class="line">Student s = &#123;<span class="string">&quot;Frankie&quot;</span>, <span class="string">&quot;MN&quot;</span>, <span class="number">21</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; s.name &lt;&lt; s.age &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>
<h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><ul>
<li>Everything with a name in your program has a type</li>
<li>Strong type systems prevent errors before your code runs!</li>
<li>Structs are a way to bundle a bunch of variables of many types </li>
<li>std::pair is a type of struct that had been defined for you and is in the STL</li>
<li>So you access it through the std:: namespace (std::pair) </li>
<li>auto is a keyword that tells the compiler to deduce the type of a variable, it should be used when the type is obvious or very  cumbersome to write out</li>
</ul>
<h1 id="Lec3-Initialization-amp-References"><a href="#Lec3-Initialization-amp-References" class="headerlink" title="Lec3 Initialization &amp; References"></a>Lec3 Initialization &amp; References</h1><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><blockquote>
<p>Initialization: How we provide initial values to variables</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Recall: Two ways to initialize a struct</span></span><br><span class="line">Student s;</span><br><span class="line">s.name = <span class="string">&quot;Frankie&quot;</span>; </span><br><span class="line">s.state = <span class="string">&quot;MN&quot;</span>;</span><br><span class="line">s.age = <span class="number">21</span>; </span><br><span class="line"><span class="comment">//is the same as ...</span></span><br><span class="line">Student s = &#123;<span class="string">&quot;Frankie&quot;</span>, <span class="string">&quot;MN&quot;</span>, <span class="number">21</span>&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Multiple ways to initialize a pair</span></span><br><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix1 = &#123;<span class="number">1</span>,<span class="string">&quot;st&quot;</span>&#125;;</span><br><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix2;</span><br><span class="line">numSuffix2.first = <span class="number">2</span>;</span><br><span class="line">numSuffix2.second = <span class="string">&quot;nd&quot;</span>;</span><br><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix2 = std::<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="string">&quot;rd&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Initialization of vectors</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec1</span><span class="params">(<span class="number">3</span>,<span class="number">5</span>)</span></span>; </span><br><span class="line"><span class="comment">// makes &#123;5, 5, 5&#125;, not &#123;3, 5&#125;!</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line">vec2 = &#123;<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// initialize vec2 to &#123;3, 5&#125; after its declared</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Uniform initialization: curly bracket initialization.  Available for all types,  immediate initialization on declaration(统一初始化：声明时用花括号定义)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix1&#123;<span class="number">1</span>,<span class="string">&quot;st&quot;</span>&#125;;</span><br><span class="line">Student s&#123;<span class="string">&quot;Frankie&quot;</span>, <span class="string">&quot;MN&quot;</span>, <span class="number">21</span>&#125;;</span><br><span class="line"><span class="comment">// less common/nice for primitive types, but possible!</span></span><br><span class="line"><span class="type">int</span> x&#123;<span class="number">5</span>&#125;;</span><br><span class="line">string f&#123;<span class="string">&quot;Frankie&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//Careful with Vector initialization!</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec1</span><span class="params">(<span class="number">3</span>,<span class="number">5</span>)</span></span>; </span><br><span class="line"><span class="comment">// makes &#123;5, 5, 5&#125;, not &#123;3, 5&#125;!</span></span><br><span class="line"><span class="comment">//uses a std::initializer_list (more later)</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec2&#123;<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// makes &#123;3, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TLDR: use uniform  initialization to initialize every  field of your non-primitive  typed variables - but be  careful not to use vec(n, k)!</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>auto:  use it to reduce long type names</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::pair&lt;<span class="type">bool</span>, std::pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;&gt; result = <span class="built_in">quadratic</span>(a, b, c);</span><br><span class="line"><span class="comment">//It can be write as below</span></span><br><span class="line"><span class="keyword">auto</span> result = <span class="built_in">quadratic</span>(a, b, c);</span><br></pre></td></tr></table></figure>
<p><strong>Don’t overuse auto!</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A better way to use quadratic</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">auto</span> a, b, c;</span><br><span class="line">     std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">     <span class="keyword">auto</span> [found, solutions] = <span class="built_in">quadratic</span>(a, b, c);</span><br><span class="line">     <span class="keyword">if</span> (found) &#123;</span><br><span class="line">         <span class="keyword">auto</span> [x1, x2] = solutions;</span><br><span class="line">         std::cout &lt;&lt; x1 &lt;&lt; “ ” &lt;&lt; x2 &lt;&lt; endl;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         std::cout &lt;&lt; “No solutions found!” &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//This is better is because it’s semantically clearer: variables have clear names</span></span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote>
<p>Reference: An alias  (another name) for a named variable</p>
</blockquote>
<p><strong>References in 106B</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeX</span><span class="params">(<span class="type">int</span>&amp; x)</span></span>&#123; <span class="comment">//changes to x will persist</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keepX</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">changeX</span>(a); <span class="comment">//a becomes a reference to x</span></span><br><span class="line"><span class="built_in">keepX</span>(b); <span class="comment">//b becomes a copy of x</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">//0</span></span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl; <span class="comment">//100</span></span><br></pre></td></tr></table></figure>
<p><strong>References in 106L: References to variables</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; original&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; copy = original;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;&amp; ref = original;</span><br><span class="line">original.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">copy.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">ref.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; original &lt;&lt; endl; <span class="comment">// &#123;1, 2, 3, 5&#125;</span></span><br><span class="line">cout &lt;&lt; copy &lt;&lt; endl; <span class="comment">// &#123;1, 2, 4&#125;</span></span><br><span class="line">cout &lt;&lt; ref &lt;&lt; endl; <span class="comment">// &#123;1, 2, 3, 5&#125;</span></span><br><span class="line"><span class="comment">//“=” automatically makes a copy! Must use &amp; to avoid this.</span></span><br></pre></td></tr></table></figure>
<p><strong>Reference-copy bug</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bug</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [num1, num2]: nums) &#123;</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fixed</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [num1, num2]: nums) &#123;</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>l-values<ul>
<li>l-values can appear on the left or  right of an =</li>
<li><code>x</code> is an l-value</li>
<li>l-values have names</li>
<li>l-values are not temporary</li>
</ul>
</li>
<li>r-values<ul>
<li>r-values can ONLY appear on the  right of an =</li>
<li><code>3</code> is an r-value</li>
<li>r-values don’t have names</li>
<li>r-values are temporary</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>The classic reference-rvalue error</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以取地址的，有名字的，非临时的就是左值；不能取地址的，没有名字的，临时的就是右值；</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [num1, num2]: nums) &#123;</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shift</span>(&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;&#125;); </span><br><span class="line"><span class="comment">// &#123;&#123;1, 1&#125;&#125; is an rvalue, it can’t be referenced</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fixed</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift</span><span class="params">(vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [num1, num2]: nums) &#123;</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> my_nums = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">shift</span>(my_nums);</span><br></pre></td></tr></table></figure>
<h2 id="BONUS-Const-and-Const-References"><a href="#BONUS-Const-and-Const-References" class="headerlink" title="BONUS: Const and Const References"></a>BONUS: Const and Const References</h2><blockquote>
<p>const indicates a variable can’t be modified!</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;; <span class="comment">// a const variable</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = vec; <span class="comment">// a regular reference</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; c_ref = vec; <span class="comment">// a const reference, 注意前面也要加上 const</span></span><br><span class="line"></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// OKAY</span></span><br><span class="line">c_vec.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// BAD - const</span></span><br><span class="line">ref.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// OKAY</span></span><br><span class="line">c_ref.<span class="built_in">push_back</span>(<span class="number">3</span>); <span class="comment">// BAD - const</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;; <span class="comment">// a const variable</span></span><br><span class="line"><span class="comment">// BAD - can&#x27;t declare non-const ref to const vector</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; bad_ref = c_vec;</span><br><span class="line"><span class="comment">// fixed</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; bad_ref = c_vec;</span><br><span class="line"><span class="comment">// BAD - Can&#x27;t declare a non-const reference as equal to a const reference!</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = c_ref;</span><br></pre></td></tr></table></figure>
<p><strong>const &amp; subtleties</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = vec;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; c_ref = vec;</span><br><span class="line"><span class="keyword">auto</span> copy = c_ref; <span class="comment">// a non-const copy</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> copy = c_ref; <span class="comment">// a const copy</span></span><br><span class="line"><span class="keyword">auto</span>&amp; a_ref = ref; <span class="comment">// a non-const reference</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span>&amp; c_aref = ref; <span class="comment">// a const reference</span></span><br></pre></td></tr></table></figure>
<p>​    Remember: C++, by default, makes copies when we  do variable assignment! We need to use &amp; if we  need references instead.</p>
<h2 id="Recap-1"><a href="#Recap-1" class="headerlink" title="Recap"></a>Recap</h2><ul>
<li>Use input streams to get information</li>
<li>Use structs to bundle information</li>
<li>Use uniform initialization wherever possible</li>
<li>Use references to have multiple aliases to the same thing</li>
<li>Use const references to avoid making copies whenever possible</li>
</ul>
<h1 id="Lec4-Streams"><a href="#Lec4-Streams" class="headerlink" title="Lec4 Streams"></a>Lec4 Streams</h1><blockquote>
<p>stream: an abstraction for input/output. Streams convert between data and the string representation of data.</p>
</blockquote>
<h2 id="Input-streams"><a href="#Input-streams" class="headerlink" title="Input streams"></a>Input streams</h2><blockquote>
<p>std::cin is an input stream. It has type std::istream</p>
</blockquote>
<ul>
<li>Have type std::istream</li>
<li>Can only receive strings using the <code>&gt;&gt;</code> operator<ul>
<li>Receives a string from the stream and converts it to data </li>
</ul>
</li>
<li>std::cin is the input stream that gets input from the console</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line">string str;</span><br><span class="line">std::cin &gt;&gt; x &gt;&gt; str;</span><br><span class="line"><span class="comment">//reads exactly one int then 1 string from console</span></span><br></pre></td></tr></table></figure>
<ul>
<li>First call to std::cin &gt;&gt; creates a command line prompt  that allows the user to type until they hit enter</li>
<li><strong>Each <code>&gt;&gt;</code> ONLY reads until the next whitespace</strong><ul>
<li><strong>Whitespace = tab, space, newline</strong></li>
</ul>
</li>
<li>Everything after the first whitespace gets saved and used the  next time std::cin &gt;&gt; is called</li>
<li>If there is nothing waiting in the buffer, std::cin &gt;&gt; creates a new command line prompt</li>
<li>Whitespace is eaten: it won’t show up in output</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">std::cin &gt;&gt; str &gt;&gt; x;</span><br><span class="line"><span class="comment">//what happens if input is &quot;blah blah&quot;?</span></span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; x;</span><br><span class="line"><span class="comment">//once an error is detected, the input stream’s</span></span><br><span class="line"><span class="comment">//fail bit is set, and it will no longer accept </span></span><br><span class="line"><span class="comment">//input</span></span><br></pre></td></tr></table></figure>
<p><strong>To read a whole line, use  std::getline(istream&amp; stream, string&amp; line);</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::string line;</span><br><span class="line">std::<span class="built_in">getline</span>(cin, line); <span class="comment">//now line has changed!</span></span><br><span class="line"><span class="comment">//say the user entered “Hello World 42!” </span></span><br><span class="line">std::cout &lt;&lt; line &lt;&lt; std::endl; </span><br><span class="line"><span class="comment">//should print out“Hello World 42!”</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&gt;&gt;</code> reads up to the next whitespace character and does not go past that whitespace character.</li>
<li><code>getline</code> reads up to the next delimiter (by default, ‘\n’), and does go past that delimiter.</li>
</ul>
<h2 id="Output-streams"><a href="#Output-streams" class="headerlink" title="Output streams"></a>Output streams</h2><blockquote>
<p>std::cout is an output  stream. It has type std::ostream</p>
</blockquote>
<ul>
<li>Can only send data using the &lt;&lt; operator<ul>
<li>Converts any type into string and sends it to the stream</li>
</ul>
</li>
<li>std::cout is the output stream that goes to the console</li>
</ul>
<h2 id="File-streams"><a href="#File-streams" class="headerlink" title="File streams"></a>File streams</h2><h3 id="Input-File-Streams"><a href="#Input-File-Streams" class="headerlink" title="Input File Streams"></a>Input File Streams</h3><ul>
<li>Have type std::ifstream</li>
<li>Only send data using the &gt;&gt; operator<ul>
<li>Receives strings from a file and converts it to data of any type</li>
</ul>
</li>
<li>Must initialize your own ifstream object linked to your file</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::ifstream <span class="title">in</span><span class="params">(“out.txt”)</span></span>;</span><br><span class="line"><span class="comment">// in is now an ifstream that reads from out.txt</span></span><br><span class="line">string str;</span><br><span class="line">in &gt;&gt; str; <span class="comment">// first word in out.txt goes into str</span></span><br></pre></td></tr></table></figure>
<h3 id="Output-File-Streams"><a href="#Output-File-Streams" class="headerlink" title="Output File Streams"></a>Output File Streams</h3><ul>
<li>Have type std::ofstream</li>
<li>Only send data using the &lt;&lt; operator<ul>
<li>Converts data of any type into a string and sends it to the file stream</li>
</ul>
</li>
<li>Must initialize your own ofstream object linked to your file</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::ofstream <span class="title">out</span><span class="params">(“out.txt”)</span></span>;</span><br><span class="line"><span class="comment">// out is now an ofstream that outputs to out.txt</span></span><br><span class="line">out &lt;&lt; <span class="number">5</span> &lt;&lt; std::endl; <span class="comment">// out.txt contains 5</span></span><br></pre></td></tr></table></figure>
<h2 id="string-streams"><a href="#string-streams" class="headerlink" title="string streams"></a>string streams</h2><ul>
<li>Input stream: std::istringstream<ul>
<li>Give any data type to the istringstream, it’ll store it as a  string!</li>
</ul>
</li>
<li>Output stream: std::ostringstream<ul>
<li>Make an ostringstream out of a string, read from it  word/type by word/type</li>
</ul>
</li>
<li>The same as the other i/ostreams you’ve seen!</li>
</ul>
<h3 id="ostringstreams"><a href="#ostringstreams" class="headerlink" title="ostringstreams"></a>ostringstreams</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">judgementCall</span><span class="params">(<span class="type">int</span> age, string name, <span class="type">bool</span> lovesCpp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ostringstream formatter;</span><br><span class="line">    formatter &lt;&lt; name &lt;&lt;<span class="string">&quot;, age &quot;</span> &lt;&lt; age;</span><br><span class="line">    <span class="keyword">if</span>(lovesCpp) formatter &lt;&lt; <span class="string">&quot;, rocks.&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> formatter &lt;&lt; <span class="string">&quot; could be better&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> formatter.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="istringstreams"><a href="#istringstreams" class="headerlink" title="istringstreams"></a>istringstreams</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Student <span class="title">reverseJudgementCall</span><span class="params">(string judgement)</span></span>&#123; </span><br><span class="line">    <span class="comment">//input: “Frankie age 22, rocks”</span></span><br><span class="line">    std::istringstream converter;</span><br><span class="line">    string fluff; <span class="type">int</span> age; <span class="type">bool</span> lovesCpp; string name;</span><br><span class="line">    converter &gt;&gt; name;</span><br><span class="line">    converter &gt;&gt; fluff;</span><br><span class="line">    converter &gt;&gt; age;</span><br><span class="line">    converter &gt;&gt; fluff;</span><br><span class="line">    string cool;</span><br><span class="line">    converter &gt;&gt; cool;</span><br><span class="line">    <span class="keyword">if</span>(cool == <span class="string">&quot;rocks&quot;</span>) <span class="keyword">return</span> Student&#123;name, age, <span class="string">&quot;bliss&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Student&#123;name, age, <span class="string">&quot;misery&quot;</span>&#125;;</span><br><span class="line">&#125;<span class="comment">// returns: &#123;“Frankie”, 22, “bliss”&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Recap-2"><a href="#Recap-2" class="headerlink" title="Recap"></a>Recap</h2><ul>
<li>Streams convert between data of any type and the string  representation of that data.</li>
<li>Streams have an endpoint: console for cin/cout, files for i/o fstreams,  string variables for i/o streams where they read in a string from or  output a string to. </li>
<li>To send data (in string form) to a stream, use stream_name &lt;&lt;  data.</li>
<li>To extract data from a stream, use stream_name &gt;&gt; data, and the stream will try to convert a string to whatever type data is.</li>
</ul>
<h1 id="Lec5-Containers"><a href="#Lec5-Containers" class="headerlink" title="Lec5 Containers"></a>Lec5 Containers</h1><blockquote>
<p>What’s in the STL:</p>
<ul>
<li>Containers</li>
<li>Iterators</li>
<li>Functions</li>
<li>Algorithms</li>
</ul>
</blockquote>
<h2 id="Types-of-containers"><a href="#Types-of-containers" class="headerlink" title="Types of containers"></a>Types of containers</h2><p>All containers can hold almost all elements</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[Sequence Containers]--&gt;B[Simple]</span><br><span class="line">A--&gt;C[Adaptors]</span><br><span class="line">B--&gt;d[vector]</span><br><span class="line">B--&gt;e[deque]</span><br><span class="line">B--&gt;f[list]</span><br><span class="line">B--&gt;q[tuple]</span><br><span class="line">C--&gt;p[stack]</span><br><span class="line">C--&gt;o[queue]</span><br><span class="line">C--&gt;m[priority_queue]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[Associative Containers]--&gt;B[Ordered]</span><br><span class="line">A--&gt;C[Unordered]</span><br><span class="line">B--&gt;set</span><br><span class="line">B--&gt;map</span><br><span class="line">C--&gt;unordered_set</span><br><span class="line">C--&gt;unordered_map</span><br></pre></td></tr></table></figure>
<h2 id="Sequence-Containers"><a href="#Sequence-Containers" class="headerlink" title="Sequence Containers"></a>Sequence Containers</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//construct</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; intArr;<span class="comment">//Create a new, empty vector</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(n)</span></span>;<span class="comment">//Create a vector with n copies of 0 </span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(n, k)</span></span>;<span class="comment">//Create a vector with n copies of a value k</span></span><br><span class="line">std::vector&lt;string&gt; strArr;</span><br><span class="line">std::vector&lt;myStruct&gt; structArr;</span><br><span class="line">std::vector&lt;std::vector&lt;string&gt;&gt; vecArr;<span class="comment">//二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//use</span></span><br><span class="line"><span class="type">int</span> k = vec[i];<span class="comment">//Get the element at index i (does not bounds check)</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(k);<span class="comment">//Add a value k to the end of a vector</span></span><br><span class="line"><span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); ++i)<span class="comment">//Loop through vector by index i</span></span><br><span class="line">vec[i] = k;<span class="comment">//Replace the element at index i(does not bounds check)</span></span><br><span class="line">vec.<span class="built_in">clear</span>();<span class="comment">//Remove all elements of a vector</span></span><br><span class="line">vec.<span class="built_in">size</span>();<span class="comment">//Check size of vector </span></span><br><span class="line">vec.<span class="built_in">pop_back</span>();<span class="comment">//删除末尾</span></span><br><span class="line">vec.<span class="built_in">capacity</span>();<span class="comment">//给vector分配的空间大小</span></span><br><span class="line">vec.<span class="built_in">empty</span>();<span class="comment">//判断是否为空</span></span><br><span class="line">vec.<span class="built_in">at</span>(<span class="number">2</span>);<span class="comment">//位置为2处元素引用</span></span><br><span class="line">vec.<span class="built_in">begin</span>();<span class="comment">//头指针</span></span><br><span class="line">vec.<span class="built_in">end</span>();<span class="comment">//尾指针</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html">菜鸟教程</a></p>
<h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="comment">//construct</span></span><br><span class="line">std::array&lt;<span class="type">int</span>, 3&gt; arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::array&lt;std::array&lt;string, 3&gt;, 4&gt;;<span class="comment">//4*3的string数组</span></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">arr.<span class="built_in">at</span>(<span class="number">2</span>).<span class="built_in">at</span>(<span class="number">1</span>);<span class="comment">//二维数组中访问</span></span><br></pre></td></tr></table></figure>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>​    <code>deque</code>支持<code>vector</code>的所有操作，并且支持快速<code>push_front()</code>，但是实践中一般使用<code>vector</code>，因为其他操作更快。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>​    A list provides fast insertion anywhere, but no random (indexed)  access.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>What you want to do</th>
<th>std::vector</th>
<th>std::deque</th>
<th>std::list</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert/remove in the front</td>
<td>Slow</td>
<td>Fast</td>
<td>Fast</td>
</tr>
<tr>
<td><strong>Insert/remove in the back</strong></td>
<td>Super Fast</td>
<td>Very Fast</td>
<td>Fast</td>
</tr>
<tr>
<td><strong>Indexed Access</strong></td>
<td>Super Fast</td>
<td>Fast</td>
<td>Impossible</td>
</tr>
<tr>
<td>Insert/remove in the middle</td>
<td>Slow</td>
<td>Fast</td>
<td>Very Fast</td>
</tr>
<tr>
<td>Memory usage</td>
<td>Low</td>
<td>High</td>
<td>High</td>
</tr>
<tr>
<td>Combining (splicing/joining)</td>
<td>Slow</td>
<td>Very Slow</td>
<td>Fast</td>
</tr>
<tr>
<td>Stability (iterators/concurrency)</td>
<td>Bad</td>
<td>Very Bad</td>
<td>Good</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>wrapper: A wrapper on an object changes how external users can interact  with that object.</p>
</blockquote>
<p><strong>Container adaptors are wrappers in C++!</strong></p>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue.<span class="built_in">push_back</span>();</span><br><span class="line">queue.<span class="built_in">pop_front</span>();</span><br></pre></td></tr></table></figure>
<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack.<span class="built_in">push_back</span>();</span><br><span class="line">stack.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>​    Adding elements with a priority, always removing the highest priority-element.</p>
<h2 id="Associative-Containers"><a href="#Associative-Containers" class="headerlink" title="Associative Containers"></a>Associative Containers</h2><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set</code>就是集合，每个元素只出现一次，按键值升序排列。访问元素的时间复杂度是O(logn).</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;<span class="type">int</span>&gt; s;<span class="comment">//Create an empty set</span></span><br><span class="line">s.<span class="built_in">insert</span>(k);<span class="comment">//Add a value k to the set</span></span><br><span class="line">s.<span class="built_in">erase</span>(k);<span class="comment">//Remove value k from the set</span></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">count</span>(k))...<span class="comment">//Check if a value k is in the set</span></span><br><span class="line"><span class="keyword">if</span> (vec.<span class="built_in">empty</span>())...<span class="comment">//Check if vector is empty</span></span><br></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map</code>是c++标准库中定义的关联容器，是键（key）值（value）对的结合体。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::map&lt;<span class="type">int</span>, <span class="type">char</span>&gt; m;<span class="comment">//Create an empty map</span></span><br><span class="line">m.<span class="built_in">insert</span>(&#123;k, v&#125;);</span><br><span class="line">m[k] = v;<span class="comment">//Add key k with value v into the map</span></span><br><span class="line">m.<span class="built_in">erase</span>(k);<span class="comment">//Remove key k from the map</span></span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">count</span>(k)) ...<span class="comment">//Check if key k is in the map</span></span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">empty</span>()) ...<span class="comment">//Check if the map is empty</span></span><br><span class="line"><span class="comment">//Retrieve or overwrite value associated with key k (error if key isn’t in map)</span></span><br><span class="line"><span class="type">char</span> c = m.<span class="built_in">at</span>(k);</span><br><span class="line">m.<span class="built_in">at</span>(k) = v;</span><br><span class="line"><span class="comment">//Retrieve or overwrite value associated with key k (auto-insert if key isn’t in map)</span></span><br><span class="line"><span class="type">char</span> c = m[k];</span><br><span class="line">m[k] = v;</span><br></pre></td></tr></table></figure>
<p>Every <code>std::map&lt;k, v&gt;</code> is actually backed by:  <code>std::pair&lt;const k, v&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Iterating through maps and sets</span></span><br><span class="line">std::set&lt;...&gt; s;</span><br><span class="line">std::map&lt;..., ...&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; element : s) &#123;</span><br><span class="line">    <span class="comment">// do stuff with element</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] : m) &#123;</span><br><span class="line">    <span class="comment">// do stuff with key and value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="unordered-map-and-unordered-set"><a href="#unordered-map-and-unordered-set" class="headerlink" title="unordered_map and unordered_set"></a>unordered_map and unordered_set</h3><ul>
<li>Each STL set/map comes with an unordered sibling. They’re almost the same,  except:<ul>
<li>Instead of a comparison operator, the set/map type must have a hash function defined for it.<ul>
<li>Simple types, like int, char, bool, double, and even std::string are already supported! </li>
<li>Any containers/collections need you to provide a hash function to use them.</li>
</ul>
</li>
</ul>
</li>
<li>unordered_map/unordered_set are generally faster than map/set.</li>
</ul>
<h2 id="Recap-3"><a href="#Recap-3" class="headerlink" title="Recap"></a>Recap</h2><ul>
<li>Sequence Containers<ul>
<li><code>std::vector</code> - use for almost everything</li>
<li><code>std::deque</code> - use when you need fast insertion to front AND back</li>
</ul>
</li>
<li>Container Adaptors<ul>
<li><code>sta::stack</code> and <code>std::queue</code></li>
</ul>
</li>
<li>Associative Containers<ul>
<li><code>std::map</code> and <code>std::set</code></li>
<li>if using simple data types/you’re familiar with hash functions, use <code>std::unordered_map</code> and <code>std::unordered_set</code></li>
</ul>
</li>
</ul>
<h1 id="Lec6-Iterators-and-Pointers"><a href="#Lec6-Iterators-and-Pointers" class="headerlink" title="Lec6 Iterators and Pointers"></a>Lec6 Iterators and Pointers</h1><h2 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h2><blockquote>
<p>A way to access all containers programmatically!</p>
</blockquote>
<ul>
<li>Iterators are objects that point to elements inside containers.</li>
<li>Each STL container has its own iterator, but all of these iterators exhibit a similar  behavior!</li>
<li>Generally, STL iterators support the following operations:</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;type&gt; s = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">std::set::iterator iter = s.<span class="built_in">begin</span>(); <span class="comment">// at 0</span></span><br><span class="line">++iter; <span class="comment">// at 1</span></span><br><span class="line">*iter; <span class="comment">// 1</span></span><br><span class="line">(iter != s.<span class="built_in">end</span>()); <span class="comment">// can compare iterator equality</span></span><br><span class="line"><span class="keyword">auto</span> second_iter = iter; <span class="comment">// &quot;copy construction&quot;</span></span><br></pre></td></tr></table></figure>
<p>Types:</p>
<ul>
<li>Input Iterator：只能单步向前迭代元素，不允许修改由该类迭代器引用的元素。</li>
<li>Output Iterator：该类迭代器和Input Iterator极其相似，也只能单步向前迭代元素，不同的是该类迭代器对元素只有写的权力。</li>
<li>Forward Iterator：该类迭代器可以在一个正确的区间中进行读写操作，它拥有Input Iterator的所有特性，和Output Iterator的部分特性，以及单步向前迭代元素的能力。</li>
<li>Bidirectional Iterator：该类迭代器是在Forward Iterator的基础上提供了单步向后迭代元素的能力。</li>
<li>Random Access Iterator：该类迭代器能完成上面所有迭代器的工作，它自己独有的特性就是可以像指针那样进行算术计算，而不是仅仅只有单步向前或向后迭代。</li>
</ul>
<p>Explain:</p>
<ul>
<li><p>There are a few different types of iterators,  since containers are different!</p>
</li>
<li><p>All iterators can be incremented (++) </p>
</li>
<li><p>Input iterators can be on the RHS (right  hand side) of an = sign: <code>auto elem = *it;</code></p>
</li>
<li><p>Output iterators can be on the LHS of = : <code>*elem = value;</code></p>
</li>
<li><p>Random access iterators support indexing  by integers!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">it += <span class="number">3</span>; <span class="comment">// move forward by 3</span></span><br><span class="line">it -= <span class="number">70</span>; <span class="comment">// move backwards by 70</span></span><br><span class="line"><span class="keyword">auto</span> elem = it[<span class="number">5</span>]; <span class="comment">// offset by 5</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Why ++iter and not iter++?</p>
<p>​    <strong>Answer</strong>: ++iter returns the value after being incremented! iter++ returns the previous value and then increments it. (wastes just a bit of time)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">auto</span> iter = map.<span class="built_in">begin</span>(); <span class="comment">// what is *iter?</span></span><br><span class="line">++iter;</span><br><span class="line"><span class="keyword">auto</span> iter2 = iter; <span class="comment">// what is (*iter2).second?</span></span><br><span class="line">++iter2; <span class="comment">// now what is (*iter).first?</span></span><br><span class="line"><span class="comment">// ++iter: go to the next element</span></span><br><span class="line"><span class="comment">// *iter: retrieve what&#x27;s at iter&#x27;s position</span></span><br><span class="line"><span class="comment">// copy constructor: create another iterator pointing to the same thing</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;<span class="type">int</span>&gt; set&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = set.<span class="built_in">begin</span>(); iter != set.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; elem = *iter;</span><br><span class="line">    cout &lt;&lt; elem &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">std::map&lt;<span class="type">int</span>&gt; map&#123;&#123;<span class="number">1</span>, <span class="number">6</span>&#125;, &#123;<span class="number">1</span>, <span class="number">8</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = map.<span class="built_in">begin</span>(); iter != map.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] = *iter; <span class="comment">// structured binding!</span></span><br><span class="line">    cout &lt;&lt; key &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;<span class="type">int</span>&gt; set&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; elem : set) &#123;</span><br><span class="line">    cout &lt;&lt; elem &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">std::map&lt;<span class="type">int</span>&gt; map&#123;&#123;<span class="number">1</span>, <span class="number">6</span>&#125;, &#123;<span class="number">1</span>, <span class="number">8</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] : map) &#123;</span><br><span class="line">    cout &lt;&lt; key &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> key = (*iter).first;</span><br><span class="line"><span class="keyword">auto</span> key = iter-&gt;first;</span><br><span class="line"><span class="comment">//These are equivalent.</span></span><br></pre></td></tr></table></figure>
<h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><ul>
<li>When variables are created, they’re  given an address in memory.</li>
<li>Pointers are objects that store an  address and type of a variable.</li>
<li>To get the value of a pointer, we can dereference it (get the object referenced by  the pointer)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>* pointerToInt = &amp;x; <span class="comment">// creates pointer to int</span></span><br><span class="line">cout &lt;&lt; *pointerToInt &lt;&lt; endl; <span class="comment">// 5</span></span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pair = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// creates pair</span></span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;* pointerToPair = &amp;pair; <span class="comment">// creates pointer to pair</span></span><br><span class="line">cout &lt;&lt; (*pair).first &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">cout &lt;&lt; pair-&gt;first &lt;&lt; endl; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h2 id="Pointers-vs-Iterators"><a href="#Pointers-vs-Iterators" class="headerlink" title="Pointers vs. Iterators"></a>Pointers vs. Iterators</h2><ul>
<li>Iterators are a form of pointers!</li>
<li>Pointers are more generic iterators<ul>
<li>can point to any object, not just elements in a container!</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::string lands = <span class="string">&quot;Xadia&quot;</span>;</span><br><span class="line"><span class="comment">// iterator</span></span><br><span class="line"><span class="keyword">auto</span> iter = lands.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">// syntax for a pointer. don&#x27;t worry about the specifics if you&#x27;re in 106B! they&#x27;ll be discussed in the latter half of the course.</span></span><br><span class="line"><span class="type">char</span>* firstChar = &amp;lands[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h1 id="Lec7-Classes"><a href="#Lec7-Classes" class="headerlink" title="Lec7 Classes"></a>Lec7 Classes</h1><blockquote>
<p>Containers are all classes defined  in the STL!</p>
<p>Iterators are (basically) pointers! More on that later</p>
<p>Class: A programmerdefined custom type. An  abstraction of an object or data type.</p>
</blockquote>
<h2 id="But-don’t-structs-do-that"><a href="#But-don’t-structs-do-that" class="headerlink" title="But don’t structs do that?"></a>But don’t structs do that?</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name; <span class="comment">// these are called fields</span></span><br><span class="line">    string state; <span class="comment">// separate these by semicolons</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line">Student s = &#123;<span class="string">&quot;Frankie&quot;</span>, <span class="string">&quot;MN&quot;</span>, <span class="number">21</span>&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Issues with structs</strong></p>
<ul>
<li>Public access to all internal state data by default</li>
<li>Users of struct need to explicitly initialize each data member.</li>
</ul>
<p><strong>Classes provide their users with a public interface and separate this from a private implementation.</strong></p>
<h2 id="Turning-Student-into-a-class-Header-File-cpp-File"><a href="#Turning-Student-into-a-class-Header-File-cpp-File" class="headerlink" title="Turning Student into a class: Header File + .cpp File:"></a>Turning Student into a class: Header File + .cpp File:</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//student.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    std::string name;</span><br><span class="line">    std::string state;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//student.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> student.h</span></span><br><span class="line"><span class="function">std::string</span></span><br><span class="line"><span class="function"><span class="title">Student::getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span> -&gt; name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Student::getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setAge</span><span class="params">(<span class="type">int</span> age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(age &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">error</span>(<span class="string">&quot;Age cannot be negative!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>Function definitions with namespaces!</strong></p>
<ul>
<li><p>namespace_name::name in a function prototype means  “this is the implementation for an interface function in  namespace_name ”</p>
</li>
<li><p>Inside the {…} the private member variables for  namespace_name will be in scope!</p>
<p><code>std::string Student::getName()&#123;...&#125;</code></p>
</li>
</ul>
<p><strong>The this keyword!</strong></p>
<ul>
<li><p>Here, we mean “set the Student private member variable name equal to the parameter name ”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>this-&gt;element_name means “the item in this Student  object with name element_name”. Use this for naming  conflicts!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name; <span class="comment">//better!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Constructors-and-Destructors"><a href="#Constructors-and-Destructors" class="headerlink" title="Constructors and Destructors"></a>Constructors and Destructors</h2><p><strong>constructors:</strong></p>
<ul>
<li>Define how the member variables of an object is initialized</li>
<li>What gets called when you first create a Student object</li>
<li>Overloadable!</li>
</ul>
<p><strong>destructors:</strong></p>
<ul>
<li>deleteing (almost) always happens in the destructor of a class!</li>
<li>The destructor is defined using Class_name::~Class_name()</li>
<li>No one ever explicitly calls it! Its called when Class_name  object go out of scope!</li>
<li>Just like all member functions, declare it in the .h and  implement in the .cpp!</li>
</ul>
<p>构造函数就是一个与类名相同的函数，在生成这个类的时候就会被调用，用来初始化这个类。</p>
<p>与构造函数相对的是析构函数，在关闭文件、释放内存前释放资源，名称是类名前加一个<code>~</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="type">float</span> X, Y;</span><br><span class="line">        <span class="built_in">Entity</span>() &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Entity is constructed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">Entity</span>() &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Entity is destructed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entity e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">Function</span>();</span><br><span class="line">        std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Public-and-Private-Sections"><a href="#Public-and-Private-Sections" class="headerlink" title="Public and Private Sections"></a>Public and Private Sections</h2><blockquote>
<p>Class: A programmerdefined custom type. An  abstraction of an object or data type.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//student.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string </span></span></span><br><span class="line"><span class="params"><span class="function">    name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    std::string name;</span><br><span class="line">    std::string state;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Public section:</strong></p>
<ul>
<li>Users of the Student object can  directly access anything here!</li>
<li>Defines interface for interacting with the private member variables!</li>
</ul>
<p><strong>Private section:</strong></p>
<ul>
<li>Usually contains all member variables</li>
<li>Users can’t access or modify anything in the private section</li>
</ul>
<h2 id="One-last-thing…-Arrays"><a href="#One-last-thing…-Arrays" class="headerlink" title="One last thing… Arrays"></a>One last thing… Arrays</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int * is the type of an int array variable</span></span><br><span class="line"><span class="type">int</span> *my_int_array;</span><br><span class="line"><span class="comment">//my_int_array is a pointer!</span></span><br><span class="line"><span class="comment">//this is how you initialize an array</span></span><br><span class="line">my_int_array = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//this is how you index into an array</span></span><br><span class="line"><span class="type">int</span> one_element = my_int_array[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//Arrays are memory WE allocate, so we need to give instructions for when to deallocate that memory!</span></span><br><span class="line"><span class="comment">//When we are done using our array, we need to delete [] it!</span></span><br><span class="line"><span class="keyword">delete</span> [] my_int_array;</span><br></pre></td></tr></table></figure>
<h1 id="Lec8-Template-Classes-and-Const-Correctness"><a href="#Lec8-Template-Classes-and-Const-Correctness" class="headerlink" title="Lec8 Template Classes and Const  Correctness"></a>Lec8 Template Classes and Const  Correctness</h1><h2 id="Template-Classes"><a href="#Template-Classes" class="headerlink" title="Template Classes"></a>Template Classes</h2><blockquote>
<p>Fundamental Theorem of Software Engineering: Any  problem can be solved by  adding enough layers of  indirection.</p>
</blockquote>
<p><strong>The problem with IntVector</strong></p>
<ul>
<li><p>Vectors should be able to contain any data type!</p>
<p>Solution? Create StringVector, DoubleVector, BoolVector etc..</p>
</li>
<li><p>What if we want to make a vector of struct Students?</p>
<ul>
<li>How are we supposed to know about every custom class?</li>
</ul>
</li>
<li><p>What if we don’t want to write a class for every type we can  think of?</p>
</li>
</ul>
<p><code>SOLUTION: Template classes!</code></p>
<blockquote>
<p>Template Class: A class that is parametrized over some number of types. A class that is comprised of member variables of a general type/types.</p>
</blockquote>
<p><strong>Template Classes You’ve Used</strong></p>
<p>Vectors/Maps/Sets… Pretty much all containers!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(<span class="type">const</span> T&amp; left,<span class="type">const</span> T&amp; right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//隐式实例化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> a1=<span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> b1=<span class="number">10.0</span>;</span><br><span class="line">        <span class="comment">//add(a1,b1);</span></span><br><span class="line">        <span class="built_in">add</span>(a1,(<span class="type">int</span>)b1);<span class="comment">//强制类型转换</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显式实例化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> b=<span class="number">10.0</span>;</span><br><span class="line">        <span class="built_in">add</span>&lt;<span class="type">int</span>&gt;(a,b);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Writing a Template Class: Syntax</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mypair.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> First, <span class="keyword">typename</span> Second&gt; <span class="keyword">class</span> <span class="title class_">MyPair</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">First <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">Second <span class="title">getSecond</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setFirst</span><span class="params">(First f)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setSecond</span><span class="params">(Second f)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        First first;</span><br><span class="line">        Second second;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//mypair.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “mypair.h”</span></span><br><span class="line"><span class="comment">//如果没有下面这句话会Compile error! Must announce every member function is templated</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> First, <span class="keyword">typename</span> Second&gt;</span></span><br><span class="line"><span class="function">First <span class="title">MyPair::getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Second, <span class="keyword">typename</span> First&gt;</span></span><br><span class="line"><span class="function">    Second <span class="title">MyPair::getSecond</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Member Types</strong></p>
<ul>
<li><p>Sometimes, we need a name for a type that is dependent on  our template types</p>
</li>
<li><p>iterator is a member type of vector</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">std::vector::iterator it = a.<span class="built_in">begin</span>();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Summary:</p>
<ul>
<li>Used to make sure your clients have a standardized way to  access important types.</li>
<li>Lives in your namespace: <code>vector&lt;T&gt;::iterator</code>.</li>
<li>After class specifier, you can use the alias directly (e.g. inside  function arguments, inside function body).</li>
<li>Before class specifier, use typename.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “vector.h”</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">a.<span class="built_in">at</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// vector.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “vector.h”<span class="comment">//注意是在.h文件中引入verctor.h，而不是在verctor.cpp中引入!!!</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vector</span>&lt;T&gt; &#123;</span><br><span class="line">     <span class="function">T <span class="title">at</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// vector.cpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">at</span>(<span class="type">int</span> i) &#123;</span><br><span class="line">        <span class="comment">// oops</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    <strong>Templates don’t emit code until instantiated</strong>, so include the .cpp in the .h instead of the other way around!</p>
<h2 id="Const-Correctness"><a href="#Const-Correctness" class="headerlink" title="Const Correctness"></a>Const Correctness</h2><blockquote>
<p>const: keyword  indicating a variable,  function or parameter  can’t be modified</p>
</blockquote>
<p><strong>const indicates a variable can’t be modified!</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;; <span class="comment">// a const variable</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = vec; <span class="comment">// a regular reference</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; c_ref = vec; <span class="comment">// a const reference</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">4</span>); <span class="comment">// OKAY</span></span><br><span class="line">c_vec.<span class="built_in">push_back</span>(<span class="number">9</span>); <span class="comment">// BAD - const</span></span><br><span class="line">ref.<span class="built_in">push_back</span>(<span class="number">5</span>); <span class="comment">// OKAY</span></span><br><span class="line">c_ref.<span class="built_in">push_back</span>(<span class="number">6</span>); <span class="comment">// BAD - const</span></span><br></pre></td></tr></table></figure>
<p><strong>Can’t declare non-const reference to const variable!</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;; <span class="comment">// a const variable</span></span><br><span class="line"><span class="comment">// fixed</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; bad_ref = c_vec;</span><br><span class="line"><span class="comment">// BAD - Can&#x27;t declare a non-const reference as equal</span></span><br><span class="line"><span class="comment">// to a const reference!</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = c_ref;</span><br></pre></td></tr></table></figure>
<p><strong>const &amp; subtleties with auto</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; c_vec&#123;<span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; ref = vec;</span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; c_ref = vec;</span><br><span class="line"><span class="keyword">auto</span> copy = c_ref; <span class="comment">// a non-const copy</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> copy = c_ref; <span class="comment">// a const copy</span></span><br><span class="line"><span class="keyword">auto</span>&amp; a_ref = ref; <span class="comment">// a non-const reference</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span>&amp; c_aref = ref; <span class="comment">// a const reference</span></span><br></pre></td></tr></table></figure>
<p><strong>Why const?</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Find the typo in this code</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((x==<span class="number">2</span> &amp;&amp; y==<span class="number">3</span>)||(x==<span class="number">1</span>))</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;a&#x27;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> ((y==x<span class="number">-1</span>)&amp;&amp;(x==<span class="number">-1</span>||y=<span class="number">-1</span>))<span class="comment">//轻松发现这里的y==-1写错了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;b&#x27;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> ((x==<span class="number">3</span>)&amp;&amp;(y==<span class="number">2</span>*x))</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;c&#x27;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Overly ambitious functions in application code</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">int</span> <span class="title">countPopulation</span><span class="params">(<span class="type">const</span> Planet&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Hats are the cornerstone of modern society</span></span><br><span class="line">    <span class="built_in">addLittleHat</span>(p); <span class="comment">//compile error</span></span><br><span class="line">    <span class="comment">// Guaranteed no more population growth, all future calls will be faster</span></span><br><span class="line">    <span class="built_in">sterilize</span>(p); <span class="comment">//compile error</span></span><br><span class="line">    <span class="comment">// Optimization: destroy planet</span></span><br><span class="line">    <span class="comment">// This makes population counting very fast</span></span><br><span class="line">    <span class="built_in">deathStar</span>(p); <span class="comment">//compile error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//How does the algorithm above work?</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">int</span> <span class="title">countPopulation</span><span class="params">(<span class="type">const</span> Planet&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">addLittleHat</span>(p); <span class="comment">//p is a const reference here</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addLittleHat</span><span class="params">(Planet&amp; p)</span> </span>&#123;<span class="comment">//p is a (non const) reference here</span></span><br><span class="line">    p.<span class="built_in">add</span>(something);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//So it will become compile error</span></span><br></pre></td></tr></table></figure>
<p>Calling addLittleHat on p is  like setting a non const  variable equal to a const  one, it’s not allowed!</p>
<p><strong>Const and Classes</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//student.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> student.h</span></span><br><span class="line"><span class="function">std::string <span class="title">Student::getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name; <span class="comment">//we can access name here!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name; <span class="comment">//resolved!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Student::getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setAge</span><span class="params">(<span class="type">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="comment">//We can define what “age” means!</span></span><br><span class="line">    <span class="keyword">if</span>(age &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">error</span>(<span class="string">&quot;Age cannot be negative!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//student.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string </span></span></span><br><span class="line"><span class="params"><span class="function">    name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    std::string name;</span><br><span class="line">    std::string state;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Using a const Student:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="function">std::string <span class="title">stringify</span><span class="params">(<span class="type">const</span> Student&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">getName</span>() + <span class="string">&quot; is &quot;</span> + std::<span class="built_in">to_string</span>(s.getAge) + </span><br><span class="line">    <span class="string">&quot; years old.&quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compile error!</span></span><br></pre></td></tr></table></figure>
<ul>
<li>The compiler doesn’t know getName and getAge don’t modify s!</li>
<li>We need to promise that it doesn’t by defining them as <strong>const functions</strong></li>
<li>Add const to the end of function signatures!</li>
</ul>
<p>So, we make Student const-correct:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//student.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> student.h</span></span><br><span class="line"><span class="function">std::string <span class="title">Student::getName</span><span class="params">()</span> <span class="type">const</span></span>&#123;<span class="comment">//there</span></span><br><span class="line">    <span class="keyword">return</span> name; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Student::getAge</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="comment">//there</span></span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setAge</span><span class="params">(<span class="type">int</span> age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(age &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">error</span>(<span class="string">&quot;Age cannot be negative!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//student.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//there</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> getAge <span class="title">const</span><span class="params">()</span></span>;<span class="comment">//there</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    std::string name;</span><br><span class="line">    std::string state;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>const-interface: All member  functions marked const in  a class definition. Objects of  type const ClassName may only use the  const-interface.</p>
</blockquote>
<p>Making RealVector‘s const-interface:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StrVector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> iterator = std::string*;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> kInitialSize = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string&amp; <span class="title">at</span><span class="params">(<span class="type">size_t</span> indx)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">size_t</span> pos, <span class="type">const</span> std::string&amp; elem)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> std::string&amp; elem)</span></span>;</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Should begin() and end() be const?</p>
<p><strong>Answer</strong>: 虽然这两个函数都是const的，但是它们给我们返回了一个可以变化的iterator，所以会报错！</p>
<p><strong>Solution</strong>: cbegin() and cend()</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StrVector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="keyword">using</span> iterator = std::string*;</span><br><span class="line">     <span class="keyword">using</span> const_ iterator = <span class="type">const</span> std::string*;</span><br><span class="line">     <span class="comment">/*...*/</span></span><br><span class="line">     <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">     <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">     <span class="comment">/*...*/</span></span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> std::string&amp; elem)</span></span>;</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">const_iterator <span class="title">begin</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function">const_iterator <span class="title">end</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVec</span><span class="params">(<span class="type">const</span> RealVector&amp; vec)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&#123; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.<span class="built_in">cbegin</span>(); it != vec.<span class="built_in">cend</span>(); ++it)&#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; cout;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &#125;&quot;</span> &lt;&lt; cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Fixed! And now we can’t set *it equal to something: it will be a compile error!</span></span><br></pre></td></tr></table></figure>
<p><strong>const iterator vs const_iterator: Nitty Gritty</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> iterator = std::string*;</span><br><span class="line"><span class="keyword">using</span> const_iterator = <span class="type">const</span> std::string*;</span><br><span class="line"><span class="type">const</span> iterator it_c = vec.<span class="built_in">begin</span>(); <span class="comment">//string * const, const ptr to non-const obj</span></span><br><span class="line">*it_c = <span class="string">&quot;hi&quot;</span>; <span class="comment">//OK! it_c is a const pointer to non-const object</span></span><br><span class="line">it_c++; <span class="comment">//not ok! cant change where a const pointer points! </span></span><br><span class="line">const_iterator c_it = vec.<span class="built_in">cbegin</span>(); <span class="comment">//const string*, a non-const ptr to const obj</span></span><br><span class="line">c_it++; <span class="comment">// totally ok! The pointer itself is non-const</span></span><br><span class="line">*c_it = <span class="string">&quot;hi&quot;</span> <span class="comment">// not ok! Can’t change underlying const object</span></span><br><span class="line">cout &lt;&lt; *c_it &lt;&lt; endl; <span class="comment">//allowed! Can always read a const object, just can&#x27;t change</span></span><br><span class="line"><span class="comment">//const string * const, const ptr to const obj</span></span><br><span class="line"><span class="type">const</span> const_iterator c_it_c = vec.<span class="built_in">cbegin</span>(); </span><br><span class="line">cout &lt;&lt; c_it_c &lt;&lt; <span class="string">&quot; points to &quot;</span> &lt;&lt; *c_it_c &lt;&lt; endl; <span class="comment">//only reads are allowed!</span></span><br></pre></td></tr></table></figure>
<h2 id="Recap-4"><a href="#Recap-4" class="headerlink" title="Recap"></a>Recap</h2><h3 id="Template-classes"><a href="#Template-classes" class="headerlink" title="Template classes"></a>Template classes</h3><ul>
<li>Add <code>template&lt;typename T1, typename T2 ...&gt;</code> before class definition in .h</li>
<li>Add <code>template&lt;typename T1, typename T2 ...&gt;</code> before all  function signature in .cpp</li>
<li>When returning nested types (like iterator types), put <code>template&lt;typename T1, typename T2 ...&gt;::member_type</code> as return type, not  just <code>member_type</code></li>
<li>Templates don’t emit code until instantiated, so <code>#include</code> the  .cpp file in the .h file, not the other way around</li>
</ul>
<h3 id="Const-and-Const-correctness"><a href="#Const-and-Const-correctness" class="headerlink" title="Const and Const-correctness"></a>Const and Const-correctness</h3><ul>
<li>Use const parameters and variables wherever you can in application code</li>
<li>Every member function of a class that doesn’t change its member variables should be marked <code>const</code></li>
<li>auto will drop all const and &amp;, so be sure to specify</li>
<li>Make iterators and const_iterators for all your classes!<ul>
<li><strong>const iterator</strong> = cannot increment the iterator, can dereference and change underlying value</li>
<li><strong>const_iterator</strong> = can increment the iterator, cannot dereference and change underlying value</li>
<li><strong>const const_iterator</strong> = cannot increment iterator, cannot dereference and change underlying value</li>
</ul>
</li>
</ul>
<h1 id="Lec9-Template-Functions"><a href="#Lec9-Template-Functions" class="headerlink" title="Lec9 Template Functions"></a>Lec9 Template Functions</h1><h2 id="Generic-Programming"><a href="#Generic-Programming" class="headerlink" title="Generic Programming"></a>Generic Programming</h2><h3 id="Generic-C"><a href="#Generic-C" class="headerlink" title="Generic C++"></a>Generic C++</h3><ul>
<li>Allow data types to be parameterized (C++ entities that work on any  datatypes)</li>
<li>Template classes achieve generic classes</li>
<li><strong>How can we write methods that work on any data type?</strong></li>
</ul>
<h3 id="Function-to-get-the-min-of-two-ints"><a href="#Function-to-get-the-min-of-two-ints" class="headerlink" title="Function to get the min of two ints"></a>Function to get the min of two ints</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMin</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> min_int = <span class="built_in">myMin</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">auto</span> min_name = <span class="built_in">myMin</span>(<span class="string">&quot;Sathya&quot;</span>, <span class="string">&quot;Frankie&quot;</span>); <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>
<p><strong>One solution: overloaded functions</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMin</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exactly the same except for types</span></span><br><span class="line"><span class="function">std::string <span class="title">myMin</span><span class="params">(std::string a, std::string b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> min_int = <span class="built_in">myMin</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">auto</span> min_name = <span class="built_in">myMin</span>(<span class="string">&quot;Sathya&quot;</span>, <span class="string">&quot;Frankie&quot;</span>); <span class="comment">// Frankie</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>But what about comparing other data types, like doubles, characters, and  complex objects?</p>
<h2 id="Template-functions"><a href="#Template-functions" class="headerlink" title="Template functions"></a>Template functions</h2><blockquote>
<p>Writing reusable, unique code with no duplication!</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//generic, &quot;template&quot; functions</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function">Type <span class="title">myMin</span><span class="params">(Type a, Type b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Here, &quot;class&quot; is an alternative keyword to typename. </span></span><br><span class="line"><span class="comment">//They&#x27;re 100% equivalent in template function declarations!</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Type</span>&gt;</span><br><span class="line"><span class="function">Type <span class="title">myMin</span><span class="params">(Type a, Type b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Default value for class template parameter</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type=<span class="type">int</span>&gt;</span><br><span class="line">Type <span class="built_in">myMin</span>(Type a, Type b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int main() &#123;&#125; will be omitted from future examples</span></span><br><span class="line"><span class="comment">// we&#x27;ll instead show the code that&#x27;d go inside it</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">myMin</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let compiler deduce return type</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">smarterMyMin</span><span class="params">(T a, U b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">myMin</span>(<span class="number">3.2</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 3.2</span></span><br></pre></td></tr></table></figure>
<h3 id="Template-type-deduction-case-1"><a href="#Template-type-deduction-case-1" class="headerlink" title="Template type deduction - case 1"></a>Template type deduction - case 1</h3><p>If the template function parameters are regular, pass-by-value parameters: </p>
<ol>
<li>Ignore the “&amp;”</li>
<li>After ignoring “&amp;”, ignore const too</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function">Type <span class="title">addFive</span><span class="params">(Type a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">5</span>; <span class="comment">// only works for types that support &quot;+&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>; </span><br><span class="line"><span class="built_in">addFive</span>(a); <span class="comment">// Type is int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = a;</span><br><span class="line"><span class="built_in">addFive</span>(b); <span class="comment">// Type is still int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; c = a;</span><br><span class="line"><span class="built_in">addFive</span>(c); <span class="comment">// even now, Type is still int</span></span><br></pre></td></tr></table></figure>
<h3 id="Template-type-deduction-case-2"><a href="#Template-type-deduction-case-2" class="headerlink" title="Template type deduction - case 2"></a>Template type deduction - case 2</h3><p>If the template function parameters are references or pointers, this is how types (e.g. Type)  are deduced:</p>
<ol>
<li>Ignore the “&amp;” </li>
<li>Match the type of parameters to inputted arguments</li>
<li>Add on const after</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeMin</span><span class="params">(<span class="type">const</span> Type&amp; a, <span class="type">const</span> Type&amp; b, Type&amp; minObj)</span> </span>&#123;<span class="comment">//a and b are references to const values</span></span><br><span class="line">    <span class="comment">// set minObj to the min of a and b instead of returning.</span></span><br><span class="line">    minObj = a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">20</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; b = <span class="number">21</span>; </span><br><span class="line"><span class="type">int</span> c; </span><br><span class="line"><span class="built_in">myMin</span>(a, b, c); <span class="comment">// Type is deduced to be int</span></span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p><strong>behind the scenes</strong></p>
<ul>
<li><p>Normal functions are created during compile time, and used in runtime</p>
</li>
<li><p>Template functions are not compiled until used by the code</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function">Type <span class="title">myMin</span><span class="params">(Type a, Type b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">myMin</span>(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>The compiler deduces the parameter types and generates a unique  function specifically for each time the template function is called</p>
</li>
<li><p>After compilation, the compiled code looks as if you had written each  instantiated version of the function yourself</p>
</li>
</ul>
<h2 id="Template-Metaprogramming"><a href="#Template-Metaprogramming" class="headerlink" title="Template Metaprogramming"></a>Template Metaprogramming</h2><blockquote>
<ul>
<li>Normal code runs during run time.</li>
<li>TMP -&gt; run code during compile time<ul>
<li>make compiled code packages smaller</li>
<li>speed up code when it’s actually running</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">unsigned</span> n&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> &#123; value = n * Factorial&lt;n - <span class="number">1</span>&gt;::value &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="comment">// template class &quot;specialization&quot;</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span>&lt;<span class="number">0</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">enum</span> &#123; value = <span class="number">1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; Factorial&lt;<span class="number">10</span>&gt;::value &lt;&lt; endl; <span class="comment">// prints 3628800, but run during compile time!</span></span><br></pre></td></tr></table></figure>
<h3 id="How-can-TMP-actually-be-used"><a href="#How-can-TMP-actually-be-used" class="headerlink" title="How can TMP actually be used?"></a>How can TMP actually be used?</h3><ul>
<li>TMP was actually discovered (not invented, discovered) recently!</li>
<li>Where can TMP be applied<ul>
<li>Ensuring dimensional unit correctness</li>
<li>Optimizing matrix operations</li>
<li>Generating custom design pattern implementation<ul>
<li>policy-based design (templates generating their own templates)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Why-write-generic-functions"><a href="#Why-write-generic-functions" class="headerlink" title="Why write generic functions?"></a>Why write generic functions?</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Count the <span class="meta"># of times 3 appears in a std::vector<span class="string">&lt;int&gt;</span>. </span></span><br><span class="line">Count the <span class="meta"># of times <span class="string">&quot;Y&quot;</span> appears in a std::istream. </span></span><br><span class="line">Count the <span class="meta"># of times 5 appears in the second half of a std::deque<span class="string">&lt;int&gt;</span>. </span></span><br><span class="line">Count the <span class="meta"># of times <span class="string">&quot;X&quot;</span> appear in the second half of a std::string.</span></span><br><span class="line"><span class="comment">//By using generic functions, we can solve each of these problems with a single function!</span></span><br></pre></td></tr></table></figure>
<p><strong>Counting Occurrences</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Attempt 1</span></span><br><span class="line"><span class="comment">//count strings</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_occurrences</span><span class="params">(std::vector&lt;std::string&gt; vec, std::string target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (vec[i] == target) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">Usage: <span class="built_in">count_occurrences</span>(&#123;<span class="string">&quot;Xadia&quot;</span>, <span class="string">&quot;Drakewood&quot;</span>, <span class="string">&quot;Innean&quot;</span>&#125;, <span class="string">&quot;Xadia&quot;</span>); </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Attempt 2</span></span><br><span class="line"><span class="comment">//generalize this beyond just strings</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_occurrences</span><span class="params">(<span class="type">const</span> std::vector&lt;DataType&gt; vec, DataType target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (vec[i] == target) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">Usage: <span class="built_in">count_occurrences</span>(&#123;<span class="string">&quot;Xadia&quot;</span>, <span class="string">&quot;Drakewood&quot;</span>, <span class="string">&quot;Innean&quot;</span>&#125;, <span class="string">&quot;Xadia&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Attempt 3</span></span><br><span class="line"><span class="comment">//generalize this beyond just vectors</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Collection, <span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_occurrences</span><span class="params">(<span class="type">const</span> Collection&amp; arr, DataType target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">Usage: <span class="built_in">count_occurrences</span>(&#123;<span class="string">&quot;Xadia&quot;</span>, <span class="string">&quot;Drakewood&quot;</span>, <span class="string">&quot;Innean&quot;</span>&#125;, <span class="string">&quot;Xadia&quot;</span>); </span><br><span class="line"><span class="comment">//The collection may not be indexable!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Attempt 4</span></span><br><span class="line"><span class="comment">//Solve the problem in Attempt 3</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIt, <span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_occurrences</span><span class="params">(InputIt begin, InputIt end, DataType target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (initialization; end-condition; increment)&#123;</span><br><span class="line">        <span class="keyword">if</span> (element access == target) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;std::string&gt; lands = &#123;<span class="string">&quot;Xadia&quot;</span>, <span class="string">&quot;Drakewood&quot;</span>, <span class="string">&quot;Innean&quot;</span>&#125;;</span><br><span class="line">Usage: <span class="built_in">count_occurrences</span>(lands.<span class="built_in">begin</span>(), lands.<span class="built_in">end</span>(), <span class="string">&quot;Xadia&quot;</span>); </span><br><span class="line"><span class="comment">//We manually pass in begin and end so that we can customize our search bounds.</span></span><br></pre></td></tr></table></figure>
<h1 id="Lec10-Functions-and-Lambdas"><a href="#Lec10-Functions-and-Lambdas" class="headerlink" title="Lec10 Functions and Lambdas"></a>Lec10 Functions and Lambdas</h1><h2 id="Review-of-template-functions"><a href="#Review-of-template-functions" class="headerlink" title="Review of template functions"></a>Review of template functions</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIt, <span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_occurrences</span><span class="params">(InputIt begin, InputIt end, DataType val)</span> </span>&#123;</span><br><span class="line"> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">auto</span> iter = begin; iter != end; ++iter) &#123;</span><br><span class="line">     <span class="keyword">if</span> (*iter == val) count++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">Usage: std::string str = <span class="string">&quot;Xadia&quot;</span>;</span><br><span class="line">       <span class="built_in">count_occurrences</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>Could we reuse this to find how many vowels are in ”Xadia”, or how  many odd numbers were in a std::vector?</p>
<h2 id="Function-Pointers-and-Lambdas"><a href="#Function-Pointers-and-Lambdas" class="headerlink" title="Function Pointers and Lambdas"></a>Function Pointers and Lambdas</h2><h3 id="Predicate-Functions"><a href="#Predicate-Functions" class="headerlink" title="Predicate Functions"></a>Predicate Functions</h3><blockquote>
<p>Any function that returns a boolean is a predicate!</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Unary Predicate</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLowercaseA</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isVowel</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    std::string vowels = <span class="string">&quot;aeiou&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> vowels.<span class="built_in">find</span>(c) != std::string::npos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Binary Predicate</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMoreThan</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num &gt; limit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDivisibleBy</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a % b == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Function-Pointers-for-generalization"><a href="#Function-Pointers-for-generalization" class="headerlink" title="Function Pointers for generalization"></a>Function Pointers for generalization</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIt, <span class="keyword">typename</span> UnaryPred&gt;<span class="comment">//no typename DataType</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_occurrences</span><span class="params">(InputIt begin, InputIt end, UnaryPred pred)</span> </span>&#123;<span class="comment">//add UnaryPred pred</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = begin; iter != end; ++iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pred</span>(*iter)) count++;<span class="comment">//no *iter == val</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isVowel</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    std::string vowels = <span class="string">&quot;aeiou&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> vowels.<span class="built_in">find</span>(c) != std::string::npos;</span><br><span class="line">&#125;</span><br><span class="line">Usage: std::string str = <span class="string">&quot;Xadia&quot;</span>;</span><br><span class="line">       <span class="built_in">count_occurrences</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), isVowel);</span><br></pre></td></tr></table></figure>
<p><strong>isVowel</strong> is a pointer, just like <code>Node *</code> or <code>char *</code>! It’s called a “function pointer”,  and can be treated like a variable.</p>
<p>Function pointers don’t  generalize well. </p>
<h3 id="Lambdas"><a href="#Lambdas" class="headerlink" title="Lambdas"></a>Lambdas</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> var = [capture-clause] (<span class="keyword">auto</span> param) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Capture Clause: Outside variables your function uses</span></span><br><span class="line"><span class="comment">//Parameters: You can use auto in lambda parameters!</span></span><br></pre></td></tr></table></figure>
<p><strong>capture clause</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[] <span class="comment">// captures nothing</span></span><br><span class="line">[limit] <span class="comment">// captures lower by value</span></span><br><span class="line">[&amp;limit] <span class="comment">// captures lower by reference</span></span><br><span class="line">[&amp;limit, upper] <span class="comment">// captures lower by reference, higher by value</span></span><br><span class="line">[&amp;, limit] <span class="comment">// captures everything except lower by reference</span></span><br><span class="line">[&amp;] <span class="comment">// captures everything by reference</span></span><br><span class="line">[=] <span class="comment">// captures everything by value</span></span><br><span class="line"><span class="keyword">auto</span> printNum = [] (<span class="type">int</span> n) &#123; std::cout &lt;&lt; n &lt;&lt; std::endl; &#125;;</span><br><span class="line"><span class="built_in">printNum</span>(<span class="number">5</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="type">int</span> limit = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">auto</span> isMoreThan = [limit] (<span class="type">int</span> n) &#123; <span class="keyword">return</span> n &gt; limit; &#125;;</span><br><span class="line"><span class="built_in">isMoreThan</span>(<span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line">limit = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">isMoreThan</span>(<span class="number">6</span>);</span><br><span class="line"><span class="type">int</span> upper = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> setUpper = [&amp;upper] () &#123; upper = <span class="number">6</span>; &#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Solution</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIt, <span class="keyword">typename</span> UniPred&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_occurrences</span><span class="params">(InputIt begin, InputIt end, UniPred pred)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = begin; iter != end; ++iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pred</span>(*iter)) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">Usage:</span><br><span class="line"><span class="type">int</span> limit = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">auto</span> isMoreThan = [limit] (<span class="type">int</span> n) &#123; <span class="keyword">return</span> n &gt; limit; &#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span> ,<span class="number">13</span>&#125;;</span><br><span class="line"><span class="built_in">count_occurrences</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), isMoreThan);</span><br></pre></td></tr></table></figure>
<p><strong>what really are they</strong></p>
<ul>
<li>Lambdas are cheap, but copying them may not be.</li>
<li>Use lambdas when you need a short function, or one with read/write  access to local variables</li>
<li>Use function pointers for longer logic and for overloading</li>
<li>We use “auto” because type is figured out in compile time</li>
</ul>
<h3 id="Functors-and-Closures"><a href="#Functors-and-Closures" class="headerlink" title="Functors and Closures"></a>Functors and Closures</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">functor</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> arg)</span> <span class="type">const</span> </span>&#123; <span class="comment">// parameters and function body</span></span><br><span class="line">    <span class="keyword">return</span> num + arg;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> num; <span class="comment">// capture clause</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> lambda = [&amp;num] (<span class="type">int</span> arg) &#123; num += arg; &#125;;</span><br><span class="line"><span class="built_in">lambda</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>A functor is any class that provides an implementation of operator().</li>
<li>Lambdas are essentially syntactic sugar for creating a functor.</li>
<li>If lambdas are functor classes, then “closures” are instances of those classes.</li>
<li>At runtime, closures are generated as instances of lambda classes.</li>
</ul>
<p>How do functors, lambdas, and function pointers relate?</p>
<p><strong>Answer:</strong>  standard function, std::function&lt;…&gt;, is the one to rule them all — it’s  the overarching type for anything callable in C++. Functors, lambdas, and  function pointers can all be casted to standard functions</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">functionPointer</span> <span class="params">(<span class="type">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    num += arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> lambda = [&amp;num] (<span class="type">int</span> arg) &#123; num += arg; &#125;;</span><br><span class="line"><span class="built_in">lambda</span>(<span class="number">5</span>); <span class="comment">// num = 5;</span></span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; func = lambda;</span><br></pre></td></tr></table></figure>
<p>We could cast either functionPointer or lambda to func, as both of them  have a void return signature and take in one integer parameter.</p>
<h2 id="Introducing-STL-Algorithms"><a href="#Introducing-STL-Algorithms" class="headerlink" title="Introducing STL Algorithms"></a>Introducing STL Algorithms</h2><blockquote>
<p>A collection of completely generic functions written by C++ devs</p>
</blockquote>
<p><code>#include &lt;algorithm&gt;</code>:  </p>
<p>sort · reverse · min_element · max_element ·  binary_search · stable_partition · find · find_if · count_if · copy · transform · insert · for_each · etc.!</p>
<h1 id="Lec11-Operator-Overloading"><a href="#Lec11-Operator-Overloading" class="headerlink" title="Lec11 Operator Overloading"></a>Lec11 Operator Overloading</h1><blockquote>
<p>Redefining what operators mean</p>
</blockquote>
<h2 id="Function-Overloading"><a href="#Function-Overloading" class="headerlink" title="Function Overloading"></a>Function Overloading</h2><p>Allow for calling the same function with different parameters:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">1.5</span>, <span class="number">2.4</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h2 id="Operator-Overloading"><a href="#Operator-Overloading" class="headerlink" title="Operator Overloading"></a>Operator Overloading</h2><p><code>\+ - * / % ^ &amp; | ~ ! , = &lt; &gt; &lt;= &gt;=  ++ -- &lt;&lt; &gt;&gt; == != &amp;&amp; || += -= *=  /= %= ^= &amp;= |= &lt;&lt;= &gt;&gt;= [] () -&gt;  -&gt;* new new[] delete delete[]</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">before</span>(a, b)) &#123; <span class="comment">// a, b defined earlier</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Time a is before Time b&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Overloading</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Time a is before Time b&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Two-ways-to-overload-operators"><a href="#Two-ways-to-overload-operators" class="headerlink" title="Two ways to overload operators"></a>Two ways to overload operators</h2><h3 id="Member-Functions"><a href="#Member-Functions" class="headerlink" title="Member Functions"></a>Member Functions</h3><p>Add a function called operator __ to your class:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span> &#123;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Time&amp; rhs) <span class="type">const</span>;<span class="comment">//rhs = Right Hand Side</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> + (<span class="type">const</span> Time&amp; rhs) <span class="type">const</span>;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> ! () <span class="type">const</span>; <span class="comment">// unary, no arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//lhs (left hand side) of each operator is this.</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Call the function on the left hand side of the expression (this) </li>
<li>Binary operators (5 + 2, “a” &lt; “b”): accept the right hand side (&amp; rhs) as an argument(参数). </li>
<li>Unary operators (~a, !b): don’t take any arguments</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span> &#123;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Time&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hours &lt; rhs.hours) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (rhs.hours &lt; hours) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// compare minutes, seconds...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Time a, b;</span><br><span class="line"><span class="keyword">if</span> (a.<span class="keyword">operator</span>&lt;(b)) &#123;</span><br><span class="line"><span class="comment">// do something;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Operators can only be called on the left hand side</li>
<li>What if we can’t control what’s on the left hand side of the operation?<ul>
<li>e.g. if we want to compare a double and a Fraction</li>
</ul>
</li>
</ul>
<h3 id="Non-Member-Functions"><a href="#Non-Member-Functions" class="headerlink" title="Non-Member Functions"></a>Non-Member Functions</h3><p>Add a function called operator __ outside of your class:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Time&amp; lhs, <span class="type">const</span> Time&amp; rhs);</span><br><span class="line">Time <span class="keyword">operator</span> + (<span class="type">const</span> Time&amp; lhs, <span class="type">const</span> Time&amp; rhs);</span><br><span class="line">Time&amp; <span class="keyword">operator</span> += (<span class="type">const</span> Time&amp; lhs, <span class="type">const</span> Time&amp; rhs);</span><br><span class="line">Time <span class="keyword">operator</span> ! (<span class="type">const</span> Time&amp; lhs, <span class="type">const</span> Time&amp; rhs);</span><br></pre></td></tr></table></figure>
<p>Instead of taking only rhs, it takes both the left hand side and right hand side!</p>
<p>The STL prefers using non-member functions for operator overloading:  </p>
<ol>
<li>allows the LHS to be a non-class type (e.g. double &lt; Fraction)</li>
<li>allows us to overload operations with a LHS class that we don’t own</li>
</ol>
<p>You may be wondering how non-member functions can access private member variables:</p>
<p><strong>The answer</strong>: friends!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span> &#123;</span><br><span class="line">    <span class="comment">// core member functions omitted for brevity</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Time&amp; lhs, <span class="type">const</span> Time&amp; rhs);</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> hours, minutes, seconds;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Time&amp; lhs, <span class="type">const</span> Time&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.hours == rhs.hours &amp;&amp; lhs.minutes == rhs.minutes &amp;&amp; lhs.seconds == rhs.seconds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lt-lt-Operator-Overloading"><a href="#lt-lt-Operator-Overloading" class="headerlink" title="&lt;&lt; Operator Overloading"></a>&lt;&lt; Operator Overloading</h3><p>We can use &lt;&lt; to output something to an std::ostream&amp;:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; out, <span class="type">const</span> Time&amp; time) &#123;</span><br><span class="line">    out &lt;&lt; time.hours &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; time.minutes &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; time.seconds;<span class="comment">// 1) print data to ostream </span></span><br><span class="line">    <span class="keyword">return</span> out; <span class="comment">// 2) return original ostream </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// in time.h -- friend declaration allows access to private attrs </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; out, <span class="type">const</span> Time&amp; time);</span><br><span class="line"><span class="comment">// now we can do this! </span></span><br><span class="line">cout &lt;&lt; t &lt;&lt; endl; <span class="comment">// 5:22:31</span></span><br></pre></td></tr></table></figure>
<p>This is how std::cout mixes types (and still works)!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Since these two methods are implemented in the STL</span></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; out, <span class="type">const</span> std::string&amp; s);</span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; out, <span class="type">const</span> <span class="type">int</span>&amp; i);</span><br><span class="line"><span class="comment">//then</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; <span class="number">5</span>; <span class="comment">// (cout &lt;&lt; &quot;test&quot;) &lt;&lt; 5;</span></span><br><span class="line"><span class="comment">//then</span></span><br><span class="line"><span class="keyword">operator</span>&lt;&lt;(<span class="keyword">operator</span>&lt;&lt;(cout, <span class="string">&quot;test&quot;</span>), <span class="number">5</span>);</span><br><span class="line"><span class="comment">//then</span></span><br><span class="line"><span class="keyword">operator</span>&lt;&lt;(cout, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//then</span></span><br><span class="line">cout;</span><br></pre></td></tr></table></figure>
<p><strong>Don’t overuse operator overloading!</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Confusing</span></span><br><span class="line"><span class="function">MyString <span class="title">a</span><span class="params">(<span class="string">&quot;opossum&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">MyString <span class="title">b</span><span class="params">(<span class="string">&quot;quokka&quot;</span>)</span></span>;</span><br><span class="line">MyString c = a * b; <span class="comment">// what does this even mean??</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Great!</span></span><br><span class="line"><span class="function">MyString <span class="title">a</span><span class="params">(<span class="string">&quot;opossum&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">MyString <span class="title">b</span><span class="params">(<span class="string">&quot;quokka&quot;</span>)</span></span>;</span><br><span class="line">MyString c = a.<span class="built_in">charsInCommon</span>(b); <span class="comment">// much better!</span></span><br></pre></td></tr></table></figure>
<h2 id="Rules-of-Operator-Overloading"><a href="#Rules-of-Operator-Overloading" class="headerlink" title="Rules of Operator Overloading"></a>Rules of Operator Overloading</h2><ol>
<li>Meaning should be obvious when you see it</li>
<li>Should be reasonably similar to corresponding arithmetic operations<ul>
<li>Don’t define <code>+</code> to mean set subtraction!</li>
</ul>
</li>
<li>When the meaning isn’t obvious, give it a normal name instead</li>
</ol>
<h1 id="Lec12-Special-Member-Function"><a href="#Lec12-Special-Member-Function" class="headerlink" title="Lec12 Special Member Function"></a>Lec12 Special Member Function</h1><h2 id="Special-Member-Functions-SMFs"><a href="#Special-Member-Functions-SMFs" class="headerlink" title="Special Member Functions (SMFs)"></a>Special Member Functions (SMFs)</h2><p>These functions are generated only when they’re called (and before any  are explicitly defined by you):</p>
<ul>
<li>Default Constructor</li>
<li>Copy Constructor</li>
<li>Copy Assignment Operator</li>
<li>Destructor</li>
<li>Move Constructor</li>
<li>Move Assignment Operator</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Widget</span>(); <span class="comment">// default constructor</span></span><br><span class="line">        <span class="built_in">Widget</span> (<span class="type">const</span> Widget&amp; w); <span class="comment">// copy constructor</span></span><br><span class="line">        Widget&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Widget&amp; w); <span class="comment">// copy assignment operator</span></span><br><span class="line">        ~<span class="built_in">Widget</span>(); <span class="comment">// destructor</span></span><br><span class="line">        <span class="built_in">Widget</span> (Widget&amp;&amp; rhs); <span class="comment">// move constructor</span></span><br><span class="line">        Widget&amp; <span class="keyword">operator</span> = (Widget&amp;&amp; rhs); <span class="comment">// move assignment operator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Default Constructor<ul>
<li>object is created with no  parameters</li>
<li>constructor also has no parameters</li>
<li>all SMFs are public and inline function, meaning that wherever  it’s used is replaced with the  generated code in the function</li>
</ul>
</li>
<li>Copy Constructor<ul>
<li>another type of constructor that creates an instance of a class</li>
<li>constructs a member-wise copy of  an object (deep copy)</li>
</ul>
</li>
<li>Copy Assignment Operator<ul>
<li>very similar to copy constructor,  except called when trying to set  one object equal to another  e.g. w1 = w2;</li>
</ul>
</li>
<li>Destructor<ul>
<li>called whenever object goes out  of scope</li>
<li>can be used for deallocating  member variables and avoiding  memory leaks</li>
</ul>
</li>
<li>Move Constructor</li>
<li>Move Assignment Operator</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Examples:</span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">func</span><span class="params">(vector&lt;<span class="type">int</span>&gt; vec0)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec1;<span class="comment">//Default constructor creates empty vector</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec2</span><span class="params">(<span class="number">3</span>)</span></span>;<span class="comment">//Not a SMF - calls a constructor with parameters→&#123;0,0,0&#125;</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec3&#123;<span class="number">3</span>&#125;;<span class="comment">//Also not a SMF, uses initializer_list</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec4</span><span class="params">()</span></span>;<span class="comment">//A function declaration! (C++&#x27;s most vexing parse)</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec5</span><span class="params">(vec2&#125;;<span class="comment">//Copy constructor - vector created as copy of another</span></span></span></span><br><span class="line"><span class="params"><span class="function">    vector&lt;<span class="type">int</span>&gt; vec&#123;&#125;;<span class="comment">//Also the default constructor</span></span></span></span><br><span class="line"><span class="params"><span class="function">    vector&lt;<span class="type">int</span>&gt; vec&#123;vec3 + vec4&#125;;<span class="comment">//Copy constructor</span></span></span></span><br><span class="line"><span class="params"><span class="function">    vector&lt;<span class="type">int</span>&gt; vec8 = vec4;<span class="comment">//Copy constructor - vec8 is newly constructor</span></span></span></span><br><span class="line"><span class="params"><span class="function">    vec8 = vec2;<span class="comment">//Copy assignment - vec8 is an existing object</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> vec8;<span class="comment">//Copy constructor: copies vec8 to location outside of func</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;<span class="comment">//Destructors on all values (except return value) are called</span></span></span></span><br></pre></td></tr></table></figure>
<h2 id="Copy-Constructors-and-Copy-Assignment-Operators"><a href="#Copy-Constructors-and-Copy-Assignment-Operators" class="headerlink" title="Copy Constructors and Copy  Assignment Operators"></a>Copy Constructors and Copy  Assignment Operators</h2><h3 id="initializer-lists"><a href="#initializer-lists" class="headerlink" title="initializer lists"></a>initializer lists</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>&lt;T&gt;() &#123;<span class="comment">//members are first default constructed (declared to be their default values)</span></span><br><span class="line">    _size = <span class="number">0</span>;</span><br><span class="line">    _capacity = kInitialSize;</span><br><span class="line">    _elems = <span class="keyword">new</span> T[kInitialSize];<span class="comment">//Then each member is reassigned. This seems wasteful!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//The technique below is called an initializer list</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>&lt;T&gt;() :<span class="comment">//Directly construct each member with a starting value</span></span><br><span class="line">    _size(<span class="number">0</span>), _capacity(kInitialSize),</span><br><span class="line">    _elems(<span class="keyword">new</span> T[kInitialSize]) &#123; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Prefer to use member initializer lists, which directly constructs each  member with a given value<ul>
<li>Faster! Why construct, and then immediately reassign? </li>
<li>What if members are a non-assignable type (you’ll see by the end of  lecture how this can be possible!)</li>
</ul>
</li>
<li>Important clarification: you can use member initializer lists for ANY  constructor, even if it has parameters (and thus isn’t an SMF)</li>
</ul>
<h3 id="Why-aren’t-the-default-SMFs-always-sufficient"><a href="#Why-aren’t-the-default-SMFs-always-sufficient" class="headerlink" title="Why aren’t the default SMFs  always sufficient?"></a>Why aren’t the default SMFs  always sufficient?</h3><p>The default compiler-generated copy constructor and copy  assignment operator functions work by manually copying each member variable!</p>
<p>Moral of the story: in many cases, copying is not  as simple as copying each member variable!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//the default copy constructor</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>&lt;T&gt;(<span class="type">const</span> vector::vector&lt;T&gt;&amp; other) :</span><br><span class="line">    _size(other._size),</span><br><span class="line">    _capacity(other._capacity),</span><br><span class="line">    _elems(other._elems) &#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//We can create a new array</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>&lt;T&gt;(<span class="type">const</span> vector::vector&lt;T&gt;&amp; other) :</span><br><span class="line">    _size(other._size),</span><br><span class="line">    _capacity(other._capacity),</span><br><span class="line">    _elems(other._elems) &#123; </span><br><span class="line">    _elems = <span class="keyword">new</span> T[other._capacity];</span><br><span class="line">    std::<span class="built_in">copy</span>(other._elems, other._elems + other._size, _elems);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Even better: let&#x27;s move this to the initializer list</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>&lt;T&gt;(<span class="type">const</span> vector::vector&lt;T&gt;&amp; other) :</span><br><span class="line">    _size(other._size),</span><br><span class="line">    _capacity(other._capacity),</span><br><span class="line">    _elems(<span class="keyword">new</span> T[other._capacity]) &#123;<span class="comment">//We can move our reassignment of _elems up!</span></span><br><span class="line">    std::<span class="built_in">copy</span>(other._elems, other._elems + other._size, _elems);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//the default copy assignment operator</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;&amp; vector&lt;T&gt;::<span class="keyword">operator</span> = (<span class="type">const</span> vector&lt;T&gt;&amp; other) &#123;</span><br><span class="line">    _size = other._size;</span><br><span class="line">    _capacity = other._capacity;</span><br><span class="line">    _elems = other._elems;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Attempt 1: Allocate a new array and copy over elements</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;&amp; vector&lt;T&gt;::<span class="keyword">operator</span> = (<span class="type">const</span> vector&lt;T&gt;&amp; other) &#123;</span><br><span class="line">    _size = other._size;</span><br><span class="line">    _capacity = other._capacity;</span><br><span class="line">    _elems = <span class="keyword">new</span> T[other._capacity];<span class="comment">//We&#x27;ve lost access to the old value of _elems, and leaked the array that it pointed to!</span></span><br><span class="line">    std::<span class="built_in">copy</span>(other._elems, other._elems + other._size, _elems);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Attempt 2: Deallocate the old array and make a new one</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;&amp; vector&lt;T&gt;::<span class="keyword">operator</span> = (<span class="type">const</span> vector&lt;T&gt;&amp; other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//Also, be careful about self-reassignment!</span></span><br><span class="line">    _size = other._size;</span><br><span class="line">    _capacity = other._capacity;</span><br><span class="line">    <span class="keyword">delete</span>[] _elems;</span><br><span class="line">    _elems = <span class="keyword">new</span> T[other._capacity];</span><br><span class="line">    std::<span class="built_in">copy</span>(other._elems, other._elems + other._size, _elems);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//Remember to return a reference to the vector itself</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Copy operations must perform these tasks:</p>
<ul>
<li>Copy constructor<ul>
<li>Use initializer list to copy members  where simple copying does the  correct thing.<ul>
<li>int, other objects, etc</li>
</ul>
</li>
<li>Manually copy all members otherwise <ul>
<li>pointers to heap memory</li>
<li>non-copyable things</li>
</ul>
</li>
</ul>
</li>
<li>Copy assignment<ul>
<li>Clean up any resources in the existing object about to be overwritten</li>
<li>Copy members using direct  assignment when assignment works</li>
<li>Manually copy members where assignment does not work</li>
<li>You don’t have to do these in this order</li>
</ul>
</li>
</ul>
<p>Summary: Steps to follow for an assignment operator</p>
<ol>
<li>Check for self-assignment.</li>
<li>Make sure to free existing members if applicable.</li>
<li>Copy assign each automatically assignable member. </li>
<li>Manually copy all other members.</li>
<li>Return a reference to *this (that was just reassigned).</li>
</ol>
<h2 id="delete-and-default"><a href="#delete-and-default" class="headerlink" title="= delete and = default"></a>= delete and = default</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Explicitly delete the copy member functions</span></span><br><span class="line"><span class="comment">//Adding = delete; after a function prototype tells C++ to not generate the corresponding SMF</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PasswordManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">PasswordManager</span>();</span><br><span class="line">        <span class="built_in">PasswordManager</span>(<span class="type">const</span> PasswordManager&amp; pm);</span><br><span class="line">        ~<span class="built_in">PasswordManager</span>();</span><br><span class="line">        <span class="comment">// other methods ...</span></span><br><span class="line">        <span class="built_in">PasswordManager</span>(<span class="type">const</span> PasswordManager&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">        PasswordManager&amp; <span class="keyword">operator</span> = (<span class="type">const</span> PasswordManager&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// other important members ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Is there a way to keep, say, the default copy constructor if you write another constructor?</span></span><br><span class="line"><span class="comment">//Adding = default; after a function prototype tells C++ to still generate the default SMF, even if you&#x27;re defining other SMFs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PasswordManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">PasswordManager</span>();</span><br><span class="line">        <span class="built_in">PasswordManager</span>(<span class="type">const</span> PasswordManager&amp; pm) = <span class="keyword">default</span>;</span><br><span class="line">        ~<span class="built_in">PasswordManager</span>();</span><br><span class="line">        <span class="comment">// other methods ...</span></span><br><span class="line">        <span class="built_in">PasswordManager</span>(<span class="type">const</span> PasswordManager&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">        PasswordManager&amp; <span class="keyword">operator</span> = (<span class="type">const</span> PasswordManager&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// other important members ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Rule-of-0-and-Rule-of-3"><a href="#Rule-of-0-and-Rule-of-3" class="headerlink" title="Rule of 0 and Rule of 3"></a>Rule of 0 and Rule of 3</h2><h3 id="Rule-of-0"><a href="#Rule-of-0" class="headerlink" title="Rule of 0"></a>Rule of 0</h3><blockquote>
<p> If the default operations work, then don’t define your own!</p>
</blockquote>
<p>When should you define your own SMFs</p>
<ul>
<li>When the default ones generated by the compiler won’t work</li>
<li>Most common reason: there’s a resource that our class uses that’s not  stored inside of our class <ul>
<li>e.g. dynamically allocated memory<ul>
<li>our class only stores the pointers to arrays, not the arrays in memory  itself</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Rule-of-3-C-98"><a href="#Rule-of-3-C-98" class="headerlink" title="Rule of 3 (C++ 98)"></a>Rule of 3 (C++ 98)</h3><ul>
<li>If you explicitly define a copy constructor, copy assignment operator, or  destructor, you should define all three</li>
<li>What’s the rationale?<ul>
<li>If you’re explicitly writing your own copy operation, you’re controlling  certain resources manually</li>
<li>You should then manage the creation, use, and releasing of those  resources!</li>
</ul>
</li>
</ul>
<p><strong>Recap of Special Member Functions (SMFs)</strong></p>
<ul>
<li>Default Constructor<ul>
<li>Object created with no parameters, no member variables instantiated </li>
</ul>
</li>
<li>Copy Constructor<ul>
<li>Object created as a copy of existing object (member variable-wise) </li>
</ul>
</li>
<li>Copy Assignment Operator<ul>
<li>Existing object replaced as a copy of another existing object. </li>
</ul>
</li>
<li>Destructor <ul>
<li>Object destroyed when it is out of scope.</li>
</ul>
</li>
</ul>
<p>Are these 4 enough?</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringTable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">StringTable</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">StringTable</span>(<span class="type">const</span> StringTable&amp; st) &#123;&#125;</span><br><span class="line">        <span class="comment">// functions for insertion, erasure, lookup, etc., </span></span><br><span class="line">        <span class="comment">// but no move/dtor functionality</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::map&lt;<span class="type">int</span>, std::string&gt; values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Move-constructors-and-move-assignment-operators"><a href="#Move-constructors-and-move-assignment-operators" class="headerlink" title="Move constructors and move  assignment operators"></a>Move constructors and move  assignment operators</h2><h3 id="Move-Operations-C-11"><a href="#Move-Operations-C-11" class="headerlink" title="Move Operations (C++11)"></a>Move Operations (C++11)</h3><p>These functions are generated only when they’re called (and before any are explicitly defined by you)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Allow for moving objects and std::move operations (rvalue refs)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Widget</span>(); <span class="comment">// default constructor</span></span><br><span class="line">        <span class="built_in">Widget</span> (<span class="type">const</span> Widget&amp; w); <span class="comment">// copy constructor</span></span><br><span class="line">        Widget&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Widget&amp; w); <span class="comment">// copy assignment operator</span></span><br><span class="line">        ~<span class="built_in">Widget</span>(); <span class="comment">// destructor</span></span><br><span class="line">        <span class="built_in">Widget</span> (Widget&amp;&amp; rhs); <span class="comment">// move constructor</span></span><br><span class="line">        Widget&amp; <span class="keyword">operator</span> = (Widget&amp;&amp; rhs); <span class="comment">// move assignment operator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Move constructors and move assignment operators will perform  “memberwise moves”</li>
<li>Defining a copy constructor does not affect generation of a default copy  assignment operator, and vice versa</li>
<li>Defining a move assignment operator prevents generation of a move copy  constructor, and vice versa<ul>
<li>Rationale: if the move assignment operator needs to be re-implemented,  there’d likely be a problem with the move constructor</li>
</ul>
</li>
</ul>
<h3 id="Some-nuances-to-move-operation-SMFs"><a href="#Some-nuances-to-move-operation-SMFs" class="headerlink" title="Some nuances to move operation SMFs"></a>Some nuances to move operation SMFs</h3><ul>
<li>Move operations are generated for classes only if these things are true:<ul>
<li>No copy operations are declared in the class </li>
<li>No move operations are declared in the class</li>
<li>No destructor is declared in the class<ul>
<li>Can get around all of these by using default:</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Widget</span>(Widget&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line">Widget&amp; <span class="keyword">operator</span>=(Widget&amp;&amp;) = <span class="keyword">default</span>; <span class="comment">// support moving</span></span><br><span class="line"><span class="built_in">Widget</span>(<span class="type">const</span> Widget&amp;) = <span class="keyword">default</span>;</span><br><span class="line">Widget&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Widget&amp;) = <span class="keyword">default</span>; <span class="comment">// support copying</span></span><br></pre></td></tr></table></figure>
<h1 id="Lec13-Move-Semantics-in-C"><a href="#Lec13-Move-Semantics-in-C" class="headerlink" title="Lec13 Move Semantics in C++"></a>Lec13 Move Semantics in C++</h1><blockquote>
<p>l-values live until the end of the scope </p>
<p>r-values live until the end of the line</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Find the r-values! (Only consider the items on the right of = signs)</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">3</span>; <span class="comment">//3 is an r-value</span></span><br><span class="line"><span class="type">int</span> *ptr = <span class="number">0x02248837</span>; <span class="comment">//0x02248837 is an r-value</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">//&#123;1, 2, 3&#125; is an r-value,v1 is an l-value</span></span><br><span class="line"><span class="keyword">auto</span> v4 = v1 + v2; <span class="comment">//v1 + v2 is an r-value</span></span><br><span class="line"><span class="type">size_t</span> size = v.<span class="built_in">size</span>(); <span class="comment">//v.size()is an r-value</span></span><br><span class="line">v1[<span class="number">1</span>] = <span class="number">4</span>*i; <span class="comment">//4*i is an r-value, v1[1] is an l-value</span></span><br><span class="line">ptr = &amp;x; <span class="comment">//&amp;x is an r-value</span></span><br><span class="line">v1[<span class="number">2</span>] = *ptr; <span class="comment">//*ptr is an l-value</span></span><br><span class="line">MyClass obj; <span class="comment">//obj is an l-value</span></span><br><span class="line">x = obj.public_member_variable; <span class="comment">//obj.public_member_variable is l-value</span></span><br></pre></td></tr></table></figure>
<h2 id="How-many-arrays-will-be-allocated-copied-and-destroyed-here"><a href="#How-many-arrays-will-be-allocated-copied-and-destroyed-here" class="headerlink" title="How many arrays will be allocated, copied and destroyed here?"></a>How many arrays will be allocated, copied and destroyed here?</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec = <span class="built_in">make_me_a_vec</span>(<span class="number">123</span>); <span class="comment">// //make_me_a_vec(123) is an r-value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">make_me_a_vec</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(num%<span class="number">10</span>);</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>vec is created using the default constructor </li>
<li>make_me_a_vec creates a vector using the default constructor and returns it </li>
<li>vec is reassigned to a copy of that return value using copy assignment</li>
<li>copy assignment creates a new array and copies the contents of the old one </li>
<li>The original return value’s lifetime ends and it calls its destructor </li>
<li>vec’s lifetime ends and it calls its destructor</li>
</ul>
<h2 id="How-do-we-know-when-to-use-move-assignment-and-when-to-use-copy-assignment"><a href="#How-do-we-know-when-to-use-move-assignment-and-when-to-use-copy-assignment" class="headerlink" title="How do we know when to use move assignment and  when to use copy assignment?"></a>How do we know when to use move assignment and  when to use copy assignment?</h2><p><strong>Answer</strong>: When the item on the right of the = is an  r-value we should use move assignment</p>
<p>Why? r-values are always about to die, so we can steal their resources</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Examples</span></span><br><span class="line"><span class="comment">//Using move assignment</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec = <span class="built_in">make_me_a_vec</span>(<span class="number">123</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Using copy assignment</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; vec1 = &#123;“hello”, “world”&#125;</span><br><span class="line">    vector&lt;string&gt; vec2 = vec1;</span><br><span class="line">    vec1.<span class="built_in">push_back</span>(“Sure hope vec2 doesn’t see <span class="keyword">this</span>!”)</span><br><span class="line">&#125; <span class="comment">//and vec2 never saw a thing</span></span><br></pre></td></tr></table></figure>
<h2 id="the-r-value-reference"><a href="#the-r-value-reference" class="headerlink" title="the r-value reference"></a>the r-value reference</h2><blockquote>
<p>How to make two different assignment operators? Overload vector::operator= ! </p>
<p>How? Introducing… the r-value reference <code>&amp;&amp;</code></p>
<p>(This is different from the l-value reference &amp; you have see before) (it has one more ampersand)</p>
</blockquote>
<p><strong>Overloading with <code>&amp;&amp;</code></strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">change</span>(x); <span class="comment">//this will call version 2</span></span><br><span class="line">    <span class="built_in">change</span>(<span class="number">7</span>); <span class="comment">//this will call version 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span>&amp;&amp; num)</span></span>&#123;...&#125; <span class="comment">//version 1 takes r-values</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span>&amp; num)</span></span>&#123;...&#125; <span class="comment">//version 2 takes l-values</span></span><br><span class="line"><span class="comment">//num is a reference to vec</span></span><br></pre></td></tr></table></figure>
<h3 id="Copy-assignment-and-Move-assignment"><a href="#Copy-assignment-and-Move-assignment" class="headerlink" title="Copy assignment and Move assignment"></a>Copy assignment and Move assignment</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Copy assignment</span></span><br><span class="line">vector&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> vector&lt;T&gt;&amp; other) &#123; </span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    _size = other._size; </span><br><span class="line">    _capacity = other._capacity; </span><br><span class="line">    <span class="comment">//must copy entire array</span></span><br><span class="line">    <span class="keyword">delete</span>[] _elems; </span><br><span class="line">    _elems = <span class="keyword">new</span> T[other._capacity]; </span><br><span class="line">    std::<span class="built_in">copy</span>(other._elems, </span><br><span class="line">    other._elems + other._size, </span><br><span class="line">    _elems); </span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Move assignment</span></span><br><span class="line">vector&lt;T&gt;&amp; <span class="keyword">operator</span>=(vector&lt;T&gt;&amp;&amp; other) &#123; </span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    _size = other._size; </span><br><span class="line">    _capacity = other._capacity; </span><br><span class="line">    <span class="comment">//we can steal the array</span></span><br><span class="line">    <span class="keyword">delete</span>[] _elems; </span><br><span class="line">    _elems = other._elems</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//This works</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec = <span class="built_in">make_me_a_vec</span>(<span class="number">123</span>); <span class="comment">//this will use move assignment</span></span><br><span class="line">    vector&lt;string&gt; vec1 = &#123;“hello”, “world”&#125;</span><br><span class="line">    vector&lt;string&gt; vec2 = vec1; <span class="comment">//this will use copy assignment</span></span><br><span class="line">    vec1.<span class="built_in">push_back</span>(“Sure hope vec2 doesn’t see <span class="keyword">this</span>!”)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><strong>The compiler will pick which vector::operator= to use based  on whether the RHS is an l-value or an r-value</strong></p>
<h3 id="Can-we-make-it-even-better"><a href="#Can-we-make-it-even-better" class="headerlink" title="Can we make it even better?"></a>Can we make it even better?</h3><p>In the move assignment above, these are also making copies (using int/ptr copy assignment)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">_size = other._size; </span><br><span class="line">_capacity = other._capacity; </span><br><span class="line">_elems = other._elems;</span><br></pre></td></tr></table></figure>
<p>We can force move assignment  rather than copy assignment of these ints by using std::move</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;T&gt;&amp; <span class="keyword">operator</span>=(vector&lt;T&gt;&amp;&amp; other) &#123; </span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    _size = std::<span class="built_in">move</span>(other._size); </span><br><span class="line">    _capacity = std::<span class="built_in">move</span>(other._capacity); </span><br><span class="line">    <span class="comment">//we can steal the array</span></span><br><span class="line">    <span class="keyword">delete</span>[] _elems; </span><br><span class="line">    _elems = std::<span class="built_in">move</span>(other._elems);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The compiler will pick which vector::operator= to use based on whether the RHS is an l-value or an r-value</p>
<h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//How about this</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec = <span class="built_in">make_me_a_vec</span>(<span class="number">123</span>); <span class="comment">//this will use move assignment</span></span><br><span class="line">    vector&lt;string&gt; vec1 = &#123;“hello”, “world”&#125; <span class="comment">//this should use move </span></span><br><span class="line">    vector&lt;string&gt; vec2 = vec1; <span class="comment">//this will use copy construction</span></span><br><span class="line">    vec1.<span class="built_in">push_back</span>(“Sure hope vec2 doesn’t see <span class="keyword">this</span>!”)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//copy constructor</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt;(<span class="type">const</span> vector&lt;T&gt;&amp; other) &#123; </span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    _size = other._size; </span><br><span class="line">    _capacity = other._capacity; </span><br><span class="line">    <span class="comment">//must copy entire array</span></span><br><span class="line">    <span class="keyword">delete</span>[] _elems; </span><br><span class="line">    _elems = <span class="keyword">new</span> T[other._capacity]; </span><br><span class="line">    std::<span class="built_in">copy</span>(other._elems, other._elems + other._size, _elems); </span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//move constructor</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt;(vector&lt;T&gt;&amp;&amp; other) &#123; </span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    _size = std::<span class="built_in">move</span>(other._size); </span><br><span class="line">    _capacity = std::<span class="built_in">move</span>(other._capacity); </span><br><span class="line">    <span class="comment">//we can steal the array</span></span><br><span class="line">    <span class="keyword">delete</span>[] _elems; </span><br><span class="line">    _elems = std::<span class="built_in">move</span>(other._elems);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Where else should we use std::move?</p>
<p><strong>Answer</strong>: </p>
<ol>
<li>Wherever we take in a const &amp; parameter in a class member function and assign it  to something else in our function</li>
<li>Don’t use std::move outside of class  definitions, never use it in application code!</li>
</ol>
<h3 id="vector-push-back"><a href="#vector-push-back" class="headerlink" title="vector::push_back"></a>vector::push_back</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Copy push_back </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; element)</span> </span>&#123;</span><br><span class="line">    elems[_size++] = element; </span><br><span class="line">    <span class="comment">//this is copy assignment </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Move push_back</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; element)</span> </span>&#123;</span><br><span class="line">    elems[_size++] = std::<span class="built_in">move</span>(element); </span><br><span class="line">    <span class="comment">//this forces T’s move assignment </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Be-careful-with-std-move"><a href="#Be-careful-with-std-move" class="headerlink" title="Be careful with std::move"></a>Be careful with std::move</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; vec1 = &#123;“hello”, “world”&#125;</span><br><span class="line">    vector&lt;string&gt; vec2 = std::<span class="built_in">move</span>(vec1);</span><br><span class="line">    vec1.<span class="built_in">push_back</span>(“Sure hope vec2 doesn’t see <span class="keyword">this</span>!”)<span class="comment">//wrong!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>After a variable is moved via std::move, it should never be used until it is  reassigned to a new variable!</li>
<li>The C++ compiler might warn you about this mistake, but the code above compiles!</li>
</ul>
<h2 id="TLDR-Move-Semantics"><a href="#TLDR-Move-Semantics" class="headerlink" title="TLDR: Move Semantics"></a>TLDR: Move Semantics</h2><ul>
<li>If your class has copy constructor and copy assignment defined, you should also define a move constructor and move assignment</li>
<li>Define these by overloading your copy constructor and assignment to be  defined for Type&amp;&amp; other as well as Type&amp; other </li>
<li>Use std::move to force the use of other types’ move assignments and  constructors </li>
<li>All std::move(x) does is cast x as an rvalue </li>
<li>Be wary of std::move(x) in main function code</li>
</ul>
<h2 id="Bonus-std-move-and-RAII"><a href="#Bonus-std-move-and-RAII" class="headerlink" title="Bonus: std::move and RAII"></a>Bonus: std::move and RAII</h2><ul>
<li>Recall: RAII means all resources required by an object are acquired in its constructor and destroyed in its destructor </li>
<li>To be consistent with RAII, you should have no half-ready resources, such as a  vector whose underlying array has been deallocated</li>
</ul>
<p>Is std::move consistent with RAII?</p>
<ul>
<li>I say NO! </li>
<li>This is a sticky language design flaw, C++ has a lot of those! </li>
</ul>
<h1 id="Lec14-Type-Safety-and-std-optional"><a href="#Lec14-Type-Safety-and-std-optional" class="headerlink" title="Lec14 Type Safety and std::optional"></a>Lec14 Type Safety and <code>std::optional</code></h1><h2 id="Recap-Const-Correctness"><a href="#Recap-Const-Correctness" class="headerlink" title="Recap: Const-Correctness"></a>Recap: Const-Correctness</h2><ul>
<li>We pass big pieces of data by reference into helper functions  by to avoid making copies of that data</li>
<li>If this function accidentally or sneakily changes that piece of  data, it can lead to hard to find bugs! </li>
<li><strong>Solution</strong>: mark those reference parameters const to  guarantee they won’t be changed in the function!</li>
</ul>
<h2 id="How-does-the-compiler-know-when-it’s-safe-to-call-member-functions-of-const-variables"><a href="#How-does-the-compiler-know-when-it’s-safe-to-call-member-functions-of-const-variables" class="headerlink" title="How does the compiler know when it’s safe to call  member functions of const variables?"></a>How does the compiler know when it’s safe to call  member functions of const variables?</h2><blockquote>
<p>const-interface: All member functions marked const in a class definition. Objects of  type const ClassName may only use the const-interface.</p>
</blockquote>
<p><strong>RealVector’s const-interface</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">ValueType</span>&gt; <span class="keyword">class</span> <span class="title class_">RealVector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> iterator = ValueType*;</span><br><span class="line">    <span class="keyword">using</span> const_ iterator = <span class="type">const</span> ValueType*;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> ValueType&amp; elem)</span></span>;</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">const_iterator <span class="title">cbegin</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function">const_iterator <span class="title">cend</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Key Idea: Sometimes less functionality is better functionality</p>
<ul>
<li>Technically, adding a const-interface only limits what RealVector objects marked const can do </li>
<li>Using types to enforce assumptions we make about function calls help us prevent programmer errors! </li>
</ul>
<h2 id="Type-Safety"><a href="#Type-Safety" class="headerlink" title="Type Safety"></a>Type Safety</h2><blockquote>
<p>Type Safety: The extent to which a language prevents typing errors.<strong>guarantees the behavior  of programs.</strong></p>
</blockquote>
<p>What does this code do?</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeOddsFromEnd</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(vec.<span class="built_in">back</span>() % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//What happens when input is &#123;&#125; ?</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//One solution</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeOddsFromEnd</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!vec.<span class="built_in">empty</span>() &amp;&amp; vec.<span class="built_in">back</span>() % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Key idea: it is the programmers job to enforce the precondition that vec be non-empty, otherwise we get undefined behavior!</span></span><br></pre></td></tr></table></figure>
<p>There may or may not be a “last element” in vec. How can vec.back() have deterministic  behavior in either case?</p>
<p><strong>The problem</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">valueType&amp; vector&lt;valueType&gt;::<span class="built_in">back</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="built_in">begin</span>() + <span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Dereferencing a pointer without verifying it points to real memory is undefined behavior!</span></span><br><span class="line"></span><br><span class="line">valueType&amp; vector&lt;valueType&gt;::<span class="built_in">back</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>()) <span class="keyword">throw</span> std::out_of_range;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="built_in">begin</span>() + <span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Now, we will at least reliably error and stop the program or return the last element whenever back() is called</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Type Safety: The extent to  which a <strong>function signature</strong> guarantees the  behavior of a <strong>function</strong>.</p>
</blockquote>
<p><strong>The problem</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//back() is promising to return something of type valueType when its possible no such value exists!</span></span><br><span class="line">valueType&amp; vector&lt;valueType&gt;::<span class="built_in">back</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="built_in">begin</span>() + <span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A first solution?</span></span><br><span class="line">std::pair&lt;<span class="type">bool</span>, valueType&amp;&gt; vector&lt;valueType&gt;::<span class="built_in">back</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="literal">false</span>, <span class="built_in">valueType</span>()&#125;;<span class="comment">//valueType may not have a default constructor</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="literal">true</span>, *(<span class="built_in">begin</span>() + <span class="built_in">size</span>() - <span class="number">1</span>)&#125;;</span><br><span class="line">&#125;<span class="comment">//Even if it does, calling constructors is expensive</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//So, what should back() return?</span></span><br><span class="line">??? vector&lt;valueType&gt;::<span class="built_in">back</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> ??;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="built_in">begin</span>() + <span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//Introducing std::optional</span></span><br></pre></td></tr></table></figure>
<h2 id="std-optional"><a href="#std-optional" class="headerlink" title="std::optional"></a>std::optional</h2><p><strong>What is <code>std::optional&lt;T&gt;</code>?</strong></p>
<p><code>std::optional</code> is a template class which will either contain a value of type T or contain nothing (expressed as <code>nullopt</code>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::optional&lt;<span class="type">int</span>&gt; num1 = &#123;&#125;; <span class="comment">//num1 does not have a value</span></span><br><span class="line">    num1 = <span class="number">1</span>; <span class="comment">//now it does!</span></span><br><span class="line">    num1 = std::<span class="literal">nullopt</span>; <span class="comment">//now it doesn&#x27;t anymore</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>What if back() returned an optional?</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::optional&lt;valueType&gt; vector&lt;valueType&gt;::<span class="built_in">back</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="built_in">begin</span>() + <span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>std::optional interface</strong></p>
<ul>
<li><code>.value()</code> returns the contained value or throws bad_optional_access error </li>
<li><code>.value_or(valueType val)</code> returns the contained value or default value, parameter val</li>
<li><code>.has_value()</code> returns true if contained value exists, false otherwise</li>
</ul>
<p><strong>Checking if an optional has value</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::optional&lt;Student&gt; <span class="title">lookupStudent</span><span class="params">(string name)</span></span>&#123;<span class="comment">//something&#125;</span></span><br><span class="line">std::optional&lt;Student&gt; output = <span class="built_in">lookupStudent</span>(“Keith”);</span><br><span class="line"><span class="keyword">if</span>(student)&#123;</span><br><span class="line">    cout &lt;&lt; output.<span class="built_in">value</span>().name &lt;&lt; “ is from “ &lt;&lt; output.<span class="built_in">value</span>().state &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; “No student found” &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So we have perfect solutions</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeOddsFromEnd</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(vec.<span class="built_in">back</span>().<span class="built_in">has_value</span>() &amp;&amp; vec.<span class="built_in">back</span>().<span class="built_in">value</span>() % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Below totally hacky, but totally works, but don&#x27;t do this!</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeOddsFromEnd</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(vec.<span class="built_in">back</span>().<span class="built_in">value_or</span>(<span class="number">2</span>) % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Recap: The problem with std::vector::back()</strong></p>
<ul>
<li>Why is it so easy to accidentally call back() on empty  vectors if the outcome is so dangerous? </li>
<li>The function signature gives us a false promise! </li>
<li>Promises to return an something of type valueType </li>
<li>But in reality, there either may or may not be a “last element”  in a vector</li>
</ul>
<p><strong>std::optional “monadic” interface (C++23 sneak peek!)</strong></p>
<ul>
<li><code>.and_then(function f)</code> returns the result of calling f(value) if contained value exists,  otherwise null_opt (f must return optional) </li>
<li><code>.transform(function f)</code>returns the result of calling f(value) if contained value exists,  otherwise null_opt (f must return optional) </li>
<li><code>.or_else(function f)</code> returns value if it exists, otherwise returns result of calling f</li>
</ul>
<p><strong>Recall: Design Philosophy of C++</strong></p>
<ul>
<li>Only add features if they solve an actual problem</li>
<li>Programmers should be free to choose their own style</li>
<li>Compartmentalization is key </li>
<li>Allow the programmer full control if they want it</li>
<li>Don’t sacrifice performance except as a last resort</li>
<li>Enforce safety at compile time whenever possible</li>
</ul>
<h2 id="Recap-Type-Safety-and-std-optional"><a href="#Recap-Type-Safety-and-std-optional" class="headerlink" title="Recap: Type Safety and std::optional"></a>Recap: Type Safety and std::optional</h2><ul>
<li>You can guarantee the behavior of your programs by using a strict type  system! </li>
<li>std::optional is a tool that could make this happen: you can return either a  value or nothing<ul>
<li>.has_value() </li>
<li>.value_or() </li>
<li>.value() </li>
</ul>
</li>
<li>This can be unwieldy and slow, so cpp doesn’t use optionals in most stl data  structures</li>
<li>Many languages, however, do! </li>
<li>The ball is in your court!</li>
</ul>
<blockquote>
<p>“Well typed programs cannot go wrong.” </p>
<ul>
<li>Robert Milner (very  important and good CS dude)</li>
</ul>
</blockquote>
<h1 id="Lec15-RAII-Smart-Pointers-and-C-Project-Building"><a href="#Lec15-RAII-Smart-Pointers-and-C-Project-Building" class="headerlink" title="Lec15 RAII, Smart Pointers, and C++  Project Building"></a>Lec15 RAII, Smart Pointers, and C++  Project Building</h1><h2 id="Exceptions-Why-care"><a href="#Exceptions-Why-care" class="headerlink" title="Exceptions - Why care?"></a>Exceptions - Why care?</h2><h3 id="How-many-code-paths-are-in-this-function"><a href="#How-many-code-paths-are-in-this-function" class="headerlink" title="How many code paths are in this function?"></a>How many code paths are in this function?</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">get_name_and_print_sweet_tooth</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">favorite_food</span>() == <span class="string">&quot;chocolate&quot;</span> || p.<span class="built_in">favorite_drink</span>() == <span class="string">&quot;milkshake&quot;</span>) &#123;</span><br><span class="line">        cout &lt;&lt; p.<span class="built_in">first</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.<span class="built_in">last</span>() &lt;&lt; <span class="string">&quot; has a sweet tooth!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.<span class="built_in">first</span>() + <span class="string">&quot; &quot;</span> + p.<span class="built_in">last</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Code Path 1 - favors neither chocolate nor milkshakes</li>
<li>Code Path 2 - favors milkshakes</li>
<li>Code Path 3 - favors chocolate (and possibly milkshakes)</li>
</ul>
<p>Are there any more code paths?</p>
<h3 id="Hint-Exceptions"><a href="#Hint-Exceptions" class="headerlink" title="Hint: Exceptions"></a>Hint: Exceptions</h3><ul>
<li><p>Exceptions are ways to signal that something has gone wrong during run-time</p>
</li>
<li><p>Exceptions are “thrown” and can crash the program, but can be “caught” to  avoid this</p>
</li>
</ul>
<h3 id="Hidden-Code-Paths"><a href="#Hidden-Code-Paths" class="headerlink" title="Hidden Code Paths"></a>Hidden Code Paths</h3><p>There are (at least) 23 code paths in the code before! </p>
<ul>
<li>(1) copy constructor of Person parameter may throw</li>
<li>(5) constructor of temp string may throw </li>
<li>(6) call to favorite_food, favorite_drink, first (2), last (2), may throw</li>
<li>(10) operators may be user-overloaded, thus may throw</li>
<li>(1) copy constructor of string for return value may throw</li>
</ul>
<h3 id="What-could-go-wrong-here"><a href="#What-could-go-wrong-here" class="headerlink" title="What could go wrong here?"></a>What could go wrong here?</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">get_name_and_print_sweet_tooth</span><span class="params">(<span class="type">int</span> id_number)</span> </span>&#123;</span><br><span class="line">    Person* p = <span class="keyword">new</span> <span class="built_in">Person</span>(id_number); <span class="comment">// assume the constructor fills in variables</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;<span class="built_in">favorite_food</span>() == <span class="string">&quot;chocolate&quot;</span> ||</span><br><span class="line">     p-&gt;<span class="built_in">favorite_drink</span>() == <span class="string">&quot;milkshake&quot;</span>) &#123;</span><br><span class="line">    cout &lt;&lt; p-&gt;<span class="built_in">first</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;<span class="built_in">last</span>() &lt;&lt; <span class="string">&quot; has a sweet tooth!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> result = p-&gt;<span class="built_in">first</span>() + <span class="string">&quot; &quot;</span> + p-&gt;<span class="built_in">last</span>();</span><br><span class="line">    <span class="keyword">delete</span> p;<span class="comment">//must release!!!</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="This-problem-isn’t-just-unique-to-pointers"><a href="#This-problem-isn’t-just-unique-to-pointers" class="headerlink" title="This problem isn’t just unique to pointers"></a>This problem isn’t just unique to pointers</h3><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Acquire</th>
<th>Release</th>
</tr>
</thead>
<tbody>
<tr>
<td>Heap memory</td>
<td>new</td>
<td>delete</td>
</tr>
<tr>
<td>Files</td>
<td>open</td>
<td>close</td>
</tr>
<tr>
<td>Locks</td>
<td>try_lock</td>
<td>unlock</td>
</tr>
<tr>
<td>Cockets</td>
<td>socket</td>
<td>close</td>
</tr>
</tbody>
</table>
</div>
<p>How do we guarantee resources get released, even if there are exceptions?</p>
<h2 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h2><blockquote>
<p>Resource Acquisition Is Initialization</p>
</blockquote>
<h3 id="What-is-R·A·Double-I"><a href="#What-is-R·A·Double-I" class="headerlink" title="What is R·A·Double I?"></a>What is R·A·Double I?</h3><ul>
<li>All resources used by a class should be acquired in the constructor</li>
<li>All resources used by a class should be released in the destructor</li>
</ul>
<p>Why?</p>
<ul>
<li>Objects should be usable immediately after creation </li>
<li>There should never be a “half-valid” state of an object, where it exists  in memory but is not accessible to/used by the program </li>
<li>The destructor is always called (when the object goes out of scope),  so the resource is always freed</li>
</ul>
<h3 id="Is-it-RAII-Compliant"><a href="#Is-it-RAII-Compliant" class="headerlink" title="Is it RAII Compliant?"></a>Is it RAII Compliant?</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The following three algorithms are not RALL</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ifstream input;</span><br><span class="line">    input.<span class="built_in">open</span>(<span class="string">&quot;hamlet.txt&quot;</span>);</span><br><span class="line">    string line;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(input, line)) &#123; <span class="comment">// might throw exception</span></span><br><span class="line">         cout &lt;&lt; line &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    input.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">input</span><span class="params">(<span class="string">&quot;hamlet.txt&quot;</span>)</span></span>;</span><br><span class="line">    string line;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(input, line)) &#123; <span class="comment">// might throw exception</span></span><br><span class="line">         cout &lt;&lt; line &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cleanDatabase</span> <span class="params">(mutex&amp; databaseLock, map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; database)</span> </span>&#123;</span><br><span class="line">    databaseLock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="comment">// other threads will not modify database</span></span><br><span class="line">    <span class="comment">// modify the database</span></span><br><span class="line">    <span class="comment">// if exception thrown, mutex never unlocked!</span></span><br><span class="line">    databaseLock.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This fixes it!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cleanDatabase</span> <span class="params">(mutex&amp; databaseLock, map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; database)</span> </span>&#123;</span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lg</span><span class="params">(databaseLock)</span></span>;</span><br><span class="line">    <span class="comment">// other threads will not modify database</span></span><br><span class="line">    <span class="comment">// modify the database</span></span><br><span class="line">    <span class="comment">// if exception thrown, mutex is unlocked!</span></span><br><span class="line">    <span class="comment">// no need to unlock at end, as it&#x27;s handle by the lock_guard</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lock_guard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">lock_guard</span>(mutex&amp; lock) : <span class="built_in">acquired_lock</span>(lock)&#123;</span><br><span class="line">            acquired_lock.<span class="built_in">lock</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">lock_guard</span>() &#123;</span><br><span class="line">        acquired_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex&amp; acquired_lock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="What-about-RAII-for-memory"><a href="#What-about-RAII-for-memory" class="headerlink" title="What about RAII for memory?"></a>What about RAII for memory?</h3><p>This is where we’re going with RAII: from the C++ Core Guidelines:</p>
<p><strong>Avoid calling <code>new</code> and <code>delete</code> explicitly</strong></p>
<h2 id="Smart-Pointers"><a href="#Smart-Pointers" class="headerlink" title="Smart Pointers"></a>Smart Pointers</h2><blockquote>
<p>RAII for memory</p>
</blockquote>
<p>We saw how this was not RAII-compliant because of the “naked” delete.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">get_name_and_print_sweet_tooth</span><span class="params">(<span class="type">int</span> id_number)</span> </span>&#123;</span><br><span class="line">    Person* p = <span class="keyword">new</span> <span class="built_in">Person</span>(id_number); <span class="comment">//assume the constructor fills in variables</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;<span class="built_in">favorite_food</span>() == <span class="string">&quot;chocolate&quot;</span> || p-&gt;<span class="built_in">favorite_drink</span>() == <span class="string">&quot;milkshake&quot;</span>) &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;<span class="built_in">first</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;<span class="built_in">last</span>() &lt;&lt; <span class="string">&quot; has a sweet tooth!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> result = p-&gt;<span class="built_in">first</span>() + <span class="string">&quot; &quot;</span> + p-&gt;<span class="built_in">last</span>();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-built-in-“smart”-RAII-safe-pointers"><a href="#Solution-built-in-“smart”-RAII-safe-pointers" class="headerlink" title="Solution: built-in “smart” (RAII-safe) pointers"></a>Solution: built-in “smart” (RAII-safe) pointers</h3><ul>
<li>Three types of smart pointers in C++ that automatically free underlying  memory when destructed <ul>
<li>std::unique_ptr • Uniquely owns its resource, can’t be copied </li>
<li>std::shared_ptr • Can make copies, destructed when underlying memory goes out of  scope </li>
<li>std::weak_ptr • models temporary ownership: when an object only needs to be  accessed if it exists (convert to shared_ptr to access)</li>
</ul>
</li>
</ul>
<h3 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Before</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rawPtrFn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node* n = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="comment">// do things with n</span></span><br><span class="line">    <span class="keyword">delete</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//After</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rawPtrFn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Node&gt; <span class="title">n</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line">    <span class="comment">// do things with n</span></span><br><span class="line">    <span class="comment">// automatically freed!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>what if we wanted to have multiple  pointers to the same object? <code>std::shared_ptr</code></p>
<h3 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h3><ul>
<li>Resources can be stored by any number of shared_ptrs</li>
<li>The resource is <strong>deleted</strong> when none of the pointers points to the resource</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line">    <span class="comment">// use p1</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::shared_ptr&lt;<span class="type">int</span>&gt; p2 = p1;</span><br><span class="line">        <span class="comment">// use p1 and p2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// use p1, like so</span></span><br><span class="line">    cout &lt;&lt; *p1.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// the integer is now deallocated!</span></span><br></pre></td></tr></table></figure>
<h3 id="Smart-pointers-RAII-Wrapper-for-pointers"><a href="#Smart-pointers-RAII-Wrapper-for-pointers" class="headerlink" title="Smart pointers: RAII Wrapper for pointers"></a>Smart pointers: RAII Wrapper for pointers</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::unique_ptr&lt;T&gt; up&#123;<span class="keyword">new</span> T&#125;;</span><br><span class="line">std::unique_ptr&lt;T&gt; up = std::<span class="built_in">make_unique</span>&lt;T&gt;();</span><br><span class="line">std::shared_ptr&lt;T&gt; sp&#123;<span class="keyword">new</span> T&#125;;</span><br><span class="line">std::shared_ptr&lt;T&gt; sp = std::<span class="built_in">make_shared</span>&lt;T&gt;();</span><br><span class="line">std::weak_ptr&lt;T&gt; wp = sp;<span class="comment">//A weak_ptr is a container for a raw pointer. It is created as a copy of a shared_ptr. The existence or destruction of weak_ptr copies of a shared_ptr have no effect on the shared_ptr or its other copies. After all copies of a shared_ptr have been destroyed, all weak_ptr copies become empty.</span></span><br><span class="line"><span class="comment">// can only be copy/move constructed (or empty)!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//So which way is better?</span></span><br><span class="line"><span class="comment">//Always use std::make_unique&lt;T&gt;()!</span></span><br><span class="line">std::unique_ptr&lt;T&gt; up&#123;<span class="keyword">new</span> T&#125;;</span><br><span class="line">std::unique_ptr&lt;T&gt; up = std::<span class="built_in">make_unique</span>&lt;T&gt;();</span><br><span class="line">std::shared_ptr&lt;T&gt; sp&#123;<span class="keyword">new</span> T&#125;;</span><br><span class="line">std::shared_ptr&lt;T&gt; sp = std::<span class="built_in">make_shared</span>&lt;T&gt;();</span><br></pre></td></tr></table></figure>
<ul>
<li>If we don’t use make_shared, then we’re allocating memory twice (once for sp, and once for new T)!</li>
<li>We should be consistent across smart pointers</li>
</ul>
<h2 id="Building-C-Projects"><a href="#Building-C-Projects" class="headerlink" title="Building C++ Projects"></a>Building C++ Projects</h2><blockquote>
<p>What happens when you run our “./build_and_run.sh”?</p>
</blockquote>
<h3 id="What-do-make-and-Makefiles-do"><a href="#What-do-make-and-Makefiles-do" class="headerlink" title="What do make and Makefiles do?"></a>What do make and Makefiles do?</h3><ul>
<li>make is a “build system” </li>
<li>uses g++ as its main engine</li>
<li>several stages to the compiler system</li>
<li>can be utilized through a Makefile!</li>
<li>let’s take a look at a simple makefile to get some practice!</li>
</ul>
<h3 id="So-why-do-we-use-cmake-in-our-assignments"><a href="#So-why-do-we-use-cmake-in-our-assignments" class="headerlink" title="So why do we use cmake in our assignments?"></a>So why do we use cmake in our assignments?</h3><ul>
<li>cmake is a cross-platform make</li>
<li>cmake creates build systems!</li>
<li>It takes in an even higher-level config file, ties in external libraries,  and outputs a Makefile, which is then run. </li>
<li>Let’s take a look at our makefiles!</li>
</ul>
<h3 id="Example-cmake-file-CMakeLists-txt"><a href="#Example-cmake-file-CMakeLists-txt" class="headerlink" title="Example cmake file (CMakeLists.txt)"></a>Example cmake file (CMakeLists.txt)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0) <span class="comment"># 指定 cmake 最低版本</span></span><br><span class="line">project(wikiracer) <span class="comment"># 指定项目名称(随意)</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD 17) </span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD_REQUIRED True) </span><br><span class="line">find_package(cpr CONFIG REQUIRED) </span><br><span class="line"><span class="comment"># adding all files </span></span><br><span class="line">add_executable(main main.cpp wikiscraper.cpp.o error.cpp) <span class="comment"># 指定编译一个可执行文件，main是第一个参数，表示生成可执行文件的文件名（这个文件名也是任意的），第二个参数main.cpp则用于指定源文件。</span></span><br><span class="line">target_link_libraries(main PRIVATE cpr)</span><br></pre></td></tr></table></figure>
<h3 id="Components-of-C-’s-compilation-system"><a href="#Components-of-C-’s-compilation-system" class="headerlink" title="Components of C++’s compilation system"></a>Components of C++’s compilation system</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[Preprocessing &lt;br&gt;in: cpp files out: full cpp files]--&gt;B[Compiling &lt;br&gt;in: full cpp files out: .s files]--&gt;C[Assembling &lt;br&gt;in: .s files out: .o files]--&gt;D[Linking&lt;br&gt; in: .o files out: executable]</span><br></pre></td></tr></table></figure>
<h3 id="Preprocessing-g-E"><a href="#Preprocessing-g-E" class="headerlink" title="Preprocessing (g++ -E)"></a>Preprocessing (g++ -E)</h3><ul>
<li>The C/C++ preprocessor handles preprocessor directives: replaces  includes (#include …) and and expands any macros (#define …) <ul>
<li>Replace #includes with content of respective files (which is  usually just function/variable declarations, so low bloat)</li>
<li>Replaces macros (#define) and selecting different portions of text  depending on #if, #ifdef, #ifndef </li>
</ul>
</li>
<li>Outputs a stream of tokens resulting from these transformations</li>
<li>If you want, you can produce some errors at even this stage (#if,  #error)</li>
</ul>
<h3 id="Compilation-g-S"><a href="#Compilation-g-S" class="headerlink" title="Compilation (g++ -S)"></a>Compilation (g++ -S)</h3><ul>
<li>Performed on output of the preprocessor (full C++ code)</li>
<li>Structure of a compiler: <ul>
<li>Lexical Analysis</li>
<li>Parsing </li>
<li>Semantic Analysis</li>
<li>Optimization</li>
<li>Code Generation (assembly code) </li>
</ul>
</li>
<li>This is where traditional “compiler errors” are caught</li>
</ul>
<h3 id="Assembling-g-c"><a href="#Assembling-g-c" class="headerlink" title="Assembling (g++ -c)"></a>Assembling (g++ -c)</h3><ul>
<li>Runs on the assembly code as outputted by the compiler</li>
<li>Converts assembly code to binary machine code</li>
<li>Assumes that all functions are defined somewhere without checking</li>
<li>Final output: object files<ul>
<li>Can’t be run by themselves!</li>
</ul>
</li>
</ul>
<h3 id="Linking-ld-g"><a href="#Linking-ld-g" class="headerlink" title="Linking (ld, g++)"></a>Linking (ld, g++)</h3><ul>
<li>Creates a single executable file from multiple object files <ul>
<li>Combine the pieces of a program</li>
<li>Figure out a memory organization so that all the pieces can fit  together </li>
<li>Resolve references so that the program can run under the new  memory organization<ul>
<li>.h files declare functions, but the actual functions may be in  separate files from where they’re called!</li>
</ul>
</li>
</ul>
</li>
<li>Output is fully self-suficient—no other files needed to run</li>
</ul>
]]></content>
      <categories>
        <category>course</category>
      </categories>
  </entry>
  <entry>
    <title>专业分流内训</title>
    <url>/2022/10/28/%E4%B8%93%E4%B8%9A%E5%88%86%E6%B5%81%E5%86%85%E8%AE%AD/</url>
    <content><![CDATA[<h1 id="Welcome-to-QC-family"><a href="#Welcome-to-QC-family" class="headerlink" title="Welcome to QC family"></a>Welcome to QC family</h1><span id="more"></span>
<p>professional introduction for tech team<br><br>from:lhmd</p>
<p><div class="pt-12"><br>  <span @click="$slidev.nav.next" class="px-2 p-1 rounded cursor-pointer" hover="bg-white bg-opacity-10"><br>    Let’s start! <carbon:arrow-right class="inline">
  </carbon:arrow-right></span></div></p>
<h2 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="&lt;/div&gt;"></a>&lt;/div&gt;</h2><h1 id="专业选择"><a href="#专业选择" class="headerlink" title="专业选择"></a>专业选择</h1><p>今年计科120个名额，工设要哭了<br><br>信安也扩招了，人麻了</p>
<ul>
<li>计科和软工80%课程一样，软工有一些sb课不便描述，计科have硬件课</li>
<li>信安培养方案年年大改，总体来说很硬核</li>
<li>能去计科就不要来软工</li>
<li>计科也在课改，但是是向好的方向，软工在改但改的不多</li>
</ul>
<hr>
<h1 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h1><p>简约</p>
<ul>
<li>基本信息</li>
<li>高考成绩</li>
<li>教育背景</li>
<li>奖项证书</li>
<li>自我评价</li>
<li>校园经历</li>
<li>不要写自己的<strong>缺点</strong> </li>
</ul>
<hr>
<h1 id="辅助材料"><a href="#辅助材料" class="headerlink" title="辅助材料"></a>辅助材料</h1><p>老师会看的</p>
<ul>
<li>有什么写什么</li>
<li>能写多少是多少</li>
<li>和竞赛本身没什么关系，只是加分手段<del>除非你和太宗一样强</del></li>
</ul>
<hr>
<h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><ul>
<li>半分钟到一分半，有三个档位</li>
<li>要有自己来这个专业的原因</li>
<li>有过相关经历一定要说</li>
<li>编一个<strong>情感方面的理由</strong>()</li>
<li>自我介绍中提到的每一个词你都必须很清楚他如果继续问你你能答上来</li>
<li>不要太装学习</li>
<li>一分钟内传达更多要点</li>
<li>自我介绍时最好每个教授都看过去</li>
<li>编程能力不错，数学英语好，未来考虑</li>
<li>基本不会有英文自我介绍，遇到算你倒霉</li>
</ul>
<hr>
<h1 id="example"><a href="#example" class="headerlink" title="example"></a>example</h1><ul>
<li><p>尊敬的老师：<br>我是工信2119班的王伟杰，来自陕西西安。<br>我小学时候学习过scratch，第一次对软件感兴趣是在初中看三体时被冯诺依曼用人列计算机制作的软件来推算三体的运动规律所打动，觉得计算机真的很神奇，从此对软件的兴趣便一发不可收拾，原来生活中丰富多彩的软件用这些小小的代码就能打出来，对软件方面知识的热情一直到高中毕业也没有衰减半分。所以我毅然选择了浙江大学，怀着最初的梦想来到了这里。<br>我在高中的时候曾获得数学、英语竞赛二等奖，还被推举为陕西省三好学生，有良好的数理基础，在自学C语言和大计基的过程中也让我坚定了来到软件工程专业的信心。来到大学后，我加入了计算机学院学生会和勤创的视觉与技术推广部的技术组，在与同学和学长们的交流中锻炼了自己的沟通技巧和逻辑思考能力。<br>在仔细阅读软件工程的培养方案和自学《软件工程导论》后，我发现软件工程确实是一门适合我并且可以让我热爱并为之奋斗、钻研的专业，因此，我希望在大学的四年中可以在软件工程这个领域中不断钻研于提升自我，在未来的某一天实现自己的理想。</p>
</li>
<li><p>大学规划：在大学打好基础，主动学习，拓宽视野，并参加一些计算机比赛，实习积累经验，并争取出国交流的机会。毕业后保研本校或考研。</p>
</li>
<li>生涯规划：我目标在移动开发和前端领域工作，并致力于个性化的SaaS领域，同时为国家“大数据背景下智慧政务的建设”方向奉献自己的一份力。</li>
</ul>
<hr>
<h1 id="个人陈述"><a href="#个人陈述" class="headerlink" title="个人陈述"></a>个人陈述</h1><ul>
<li>写出来的东西尽量挑关键词<strong>标重点</strong></li>
<li>个人优势，选择原因，个人兴趣，未来规划（具体）</li>
<li>志愿说明：没有必要全计院</li>
</ul>
<hr>
<h1 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h1><ul>
<li>提前想好<strong>话术</strong>，例如我在回答非专业性问题时要重点突出我的哪些优势让面试老师注意到我</li>
<li>想好自己被问到劣势怎么回答，不知道就表达自己很想学的想法</li>
<li>放一个模板：我在不断地学习中也发现了自己在计算机语言算法问题上的不足，和竞赛选手们的差距也在激励着我不断地学习和请教，我同时也相信只要保持着我的热爱和努力，以及利用好浙大给我的资源，会在慢慢的自我磨炼中达到自我的超越并向目标一步一步的迈进。</li>
<li>关于未来规划，可以<del>编</del>一个自己想探索的<strong>领域</strong>，例如<del>计算机视觉</del>、<del>人工智能</del>等等，在自我介绍和个人陈述中引导老师向这方面靠拢，掌握老师会问你的问题。</li>
<li>如上一条，在自我介绍中留空子</li>
<li>多看以前的面试题</li>
<li><del>Markdown个人陈述？</del></li>
</ul>
<hr>
<h1 id="硬知识储备"><a href="#硬知识储备" class="headerlink" title="硬知识储备"></a>硬知识储备</h1><ul>
<li>关于简历和自我介绍中可以说的<strong>勤创</strong>的前端知识，大家不用担心老师会问到</li>
<li>算法题一般不会问太难，撑死问到排序，<del>同组有信竞生除外</del>，有时间的话可以看看《啊哈算法》</li>
<li>计科—人工智能，大数据</li>
<li>软工—软件工程导论</li>
<li>信安—密码学</li>
<li><strong>大计基</strong>速成</li>
<li>如果还是小白的话，百度百科用起来</li>
<li>细读<strong>培养方案</strong>！！！</li>
</ul>
<hr>
<h1 id="要了解的硬知识举栗"><a href="#要了解的硬知识举栗" class="headerlink" title="要了解的硬知识举栗"></a>要了解的硬知识举栗</h1><ul>
<li>数据类型</li>
<li>二进制科学计数法</li>
<li>反码补码</li>
<li>小数存储</li>
<li>数据结构基本知识（啊哈算法看过的就秒杀</li>
<li>冯诺依曼</li>
<li>C语言基础</li>
</ul>
<hr>
<h1 id="hb-and-Tai-zong’s-time"><a href="#hb-and-Tai-zong’s-time" class="headerlink" title="hb and Tai_zong’s time"></a>hb and Tai_zong’s time</h1><hr>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      <categories>
        <category>勤创相关</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>专业分流</tag>
      </tags>
  </entry>
  <entry>
    <title>code before this website</title>
    <url>/2022/10/27/code-before-this-website/</url>
    <content><![CDATA[<h1 id="fds刷题记录"><a href="#fds刷题记录" class="headerlink" title="fds刷题记录"></a>fds刷题记录</h1><span id="more"></span>
<h3 id="PTA-B-1003-我要通过"><a href="#PTA-B-1003-我要通过" class="headerlink" title="PTA B 1003 我要通过!"></a><a href="https://pintia.cn/problem-sets/994805260223102976/exam/problems/994805323154440192">PTA B 1003 我要通过!</a></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n,k,flag;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">                <span class="type">int</span> a[<span class="number">3</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                k=<span class="number">0</span>;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>((ch=getchar())!=<span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(ch==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">                                a[k]++;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;P&#x27;</span>&amp;&amp;k==<span class="number">0</span>)</span><br><span class="line">                                k=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;T&#x27;</span>&amp;&amp;k==<span class="number">1</span>)</span><br><span class="line">                                k=<span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                flag=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag&amp;&amp;k==<span class="number">2</span>&amp;&amp;a[<span class="number">0</span>]*a[<span class="number">1</span>]==a[<span class="number">2</span>]&amp;&amp;a[<span class="number">1</span>]!=<span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="初识dp：买卖股票最佳时机"><a href="#初识dp：买卖股票最佳时机" class="headerlink" title="初识dp：买卖股票最佳时机"></a><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/x2zsx1/">初识dp：买卖股票最佳时机</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size=prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">30005</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;,i;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;size; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>]&gt;dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i])?dp[i<span class="number">-1</span>][<span class="number">0</span>]:dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i];</span><br><span class="line">            dp[i][<span class="number">1</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i]&gt;dp[i<span class="number">-1</span>][<span class="number">1</span>])?dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i]:dp[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*此题利润累加法也可解&lt;贪心算法&gt;</span></span><br><span class="line"><span class="comment">public int maxProfit(int[] prices) &#123;</span></span><br><span class="line"><span class="comment">    if (prices == null || prices.length &lt; 2)</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    int total = 0, index = 0, length = prices.length;</span></span><br><span class="line"><span class="comment">    while (index &lt; length) &#123;</span></span><br><span class="line"><span class="comment">        //如果股票下跌就一直找，直到找到股票开始上涨为止</span></span><br><span class="line"><span class="comment">        while (index &lt; length - 1 &amp;&amp; prices[index] &gt;= prices[index + 1])</span></span><br><span class="line"><span class="comment">            index++;</span></span><br><span class="line"><span class="comment">        //股票上涨开始的值，也就是这段时间上涨的最小值</span></span><br><span class="line"><span class="comment">        int min = prices[index];</span></span><br><span class="line"><span class="comment">        //一直找到股票上涨的最大值为止</span></span><br><span class="line"><span class="comment">        while (index &lt; length - 1 &amp;&amp; prices[index] &lt;= prices[index + 1])</span></span><br><span class="line"><span class="comment">            index++;</span></span><br><span class="line"><span class="comment">        //计算这段上涨时间的差值，然后累加</span></span><br><span class="line"><span class="comment">        total += prices[index++] - min;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return total;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>
<h3 id="异或运算的应用：查重"><a href="#异或运算的应用：查重" class="headerlink" title="异或运算的应用：查重"></a><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/x21ib6/">异或运算的应用：查重</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res=res^nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="位运算的应用：判断数字是否重复"><a href="#位运算的应用：判断数字是否重复" class="headerlink" title="位运算的应用：判断数字是否重复"></a><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/x2f9gg/">位运算的应用：判断数字是否重复</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> line[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> column[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> block[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> shift = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;<span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                shift = <span class="number">1</span> &lt;&lt; (board[i][j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="type">int</span> k = (i / <span class="number">3</span>) * <span class="number">3</span> + j / <span class="number">3</span>;</span><br><span class="line">                <span class="comment">//如果对应的位置只要有一个大于0，说明有冲突，直接返回false</span></span><br><span class="line">                <span class="keyword">if</span> ((column[i] &amp; shift) &gt; <span class="number">0</span> || (line[j] &amp; shift) &gt; <span class="number">0</span> || (block[k] &amp; shift) &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                column[i] |= shift;</span><br><span class="line">                line[j] |= shift;</span><br><span class="line">                block[k] |= shift;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>大物期末整理</title>
    <url>/2023/02/02/%E5%A4%A7%E7%89%A9%E6%9C%9F%E6%9C%AB%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>大二上大学物理乙期末复习。</p>
<span id="more"></span>
<div class="pdf-container" data-target="/pdf/大物期末整理.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>大物</tag>
      </tags>
  </entry>
  <entry>
    <title>大物期中整理</title>
    <url>/2022/11/02/%E5%A4%A7%E7%89%A9%E6%9C%9F%E4%B8%AD%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>大二上大学物理乙期中复习。</p>
<span id="more"></span>
<div class="pdf-container" data-target="/pdf/大物期中整理.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>大物</tag>
      </tags>
  </entry>
  <entry>
    <title>概统作业题</title>
    <url>/2023/02/07/%E6%A6%82%E7%BB%9F%E4%BD%9C%E4%B8%9A%E9%A2%98/</url>
    <content><![CDATA[<p>大二上概率论与数理统计wgz老师班作业题。</p>
<span id="more"></span>
<div class="pdf-container" data-target="/pdf/概统作业题.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>概统</tag>
      </tags>
  </entry>
  <entry>
    <title>概统期末整理</title>
    <url>/2023/02/07/%E6%A6%82%E7%BB%9F%E6%9C%9F%E6%9C%AB%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>大二上概率论与数理统计期末复习。</p>
<span id="more"></span>
<div class="pdf-container" data-target="/pdf/概统期末整理.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>概统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉导论</title>
    <url>/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<p>接触计算机视觉相关的第一门课程。</p>
<span id="more"></span>
<h2 id="Lec-1-Introduction"><a href="#Lec-1-Introduction" class="headerlink" title="Lec 1 Introduction"></a>Lec 1 Introduction</h2><h3 id="1-CV主要任务："><a href="#1-CV主要任务：" class="headerlink" title="1 CV主要任务："></a>1 CV主要任务：</h3><ul>
<li>三维重建</li>
<li>图像理解</li>
<li>图像合成</li>
</ul>
<h3 id="2-Review-of-Linear-Algebra"><a href="#2-Review-of-Linear-Algebra" class="headerlink" title="2 Review of Linear Algebra"></a>2 Review of Linear Algebra</h3><p>省略。。。</p>
<h2 id="Lec-2-Image-formation"><a href="#Lec-2-Image-formation" class="headerlink" title="Lec 2 Image formation"></a>Lec 2 Image formation</h2><h3 id="1-Camera-and-lens"><a href="#1-Camera-and-lens" class="headerlink" title="1 Camera and lens"></a>1 Camera and lens</h3><h4 id="Pinhole-camera"><a href="#Pinhole-camera" class="headerlink" title="Pinhole camera"></a>Pinhole camera</h4><p>Add a barrier to block off most of the rays, the opening known as the aperture(光圈).</p>
<h4 id="Lens"><a href="#Lens" class="headerlink" title="Lens"></a>Lens</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/63.png" class>
<p>Focal length:</p>
<script type="math/tex; mode=display">\frac{1}{i}+\frac{1}{o}=\frac{1}{f}</script><p>Image Magnification:</p>
<script type="math/tex; mode=display">m=\frac{h_i}{h_o}</script><p>Field of View (FOV):</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/64.png" class>
<ul>
<li>Longer focal length = Narrower angle of view</li>
<li>Shorter focal length = Wider angle of view </li>
<li>FOV also depends on sensor size</li>
</ul>
<p>Aperture: control image brightness</p>
<p>F-number: represent aperture as a fraction of focal length</p>
<p>Depth of Field: range of object distances over which the image is sufficiently well focused</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/65.png" class>
<h3 id="2-Geometric-image-formation"><a href="#2-Geometric-image-formation" class="headerlink" title="2 Geometric image formation"></a>2 Geometric image formation</h3><h4 id="Pinhole-camera-model-Perspective-Projection"><a href="#Pinhole-camera-model-Perspective-Projection" class="headerlink" title="Pinhole camera model: Perspective Projection"></a>Pinhole camera model: Perspective Projection</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/66.png" class>
<h4 id="Homogeneous-coordinates"><a href="#Homogeneous-coordinates" class="headerlink" title="Homogeneous coordinates"></a>Homogeneous coordinates</h4><ul>
<li>Converting from Cartesian to Homogeneous coordinates(add an extra dimension)</li>
<li>Converting from Homogeneous to Cartesian(remove the last dimension by dividing a number)</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/67.png" class>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/68.png" class>
<p>Homogeneous coordinates are invariant to scaling. </p>
<p>Each point has an infinite set of homogeneous coordinates. </p>
<p>The point in the 2D plane is projection of a ray in 3D space:</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/69.png" class>
<h4 id="Perspective-Projection"><a href="#Perspective-Projection" class="headerlink" title="Perspective Projection"></a>Perspective Projection</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/70.png" class>
<h4 id="Orthographic-projection"><a href="#Orthographic-projection" class="headerlink" title="Orthographic projection"></a>Orthographic projection</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/71.png" class>
<h3 id="3-Photometric-image-formation"><a href="#3-Photometric-image-formation" class="headerlink" title="3 Photometric image formation"></a>3 Photometric image formation</h3><h4 id="Shutter-speed"><a href="#Shutter-speed" class="headerlink" title="Shutter speed"></a>Shutter speed</h4><p>Shutter speed controls exposure time. The pixel value is equal to the integral of the light intensity within the exposure time.</p>
<h4 id="Rolling-shutter-effect"><a href="#Rolling-shutter-effect" class="headerlink" title="Rolling shutter effect"></a>Rolling shutter effect</h4><p>Exposing the image line by line.</p>
<h4 id="Color-spaces"><a href="#Color-spaces" class="headerlink" title="Color spaces"></a>Color spaces</h4><ul>
<li>RGB </li>
<li>HSV (Hue / Value / Saturation)</li>
</ul>
<h4 id="Color-Sensing-Bayer-filter"><a href="#Color-Sensing-Bayer-filter" class="headerlink" title="Color Sensing: Bayer filter"></a>Color Sensing: Bayer filter</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/72.png" class>
<h2 id="Lec-3-Image-processing"><a href="#Lec-3-Image-processing" class="headerlink" title="Lec 3 Image processing"></a>Lec 3 Image processing</h2><h3 id="1-Image-processing-basics"><a href="#1-Image-processing-basics" class="headerlink" title="1 Image processing basics"></a>1 Image processing basics</h3><h4 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/73.png" class>
<h4 id="2D-convolution"><a href="#2D-convolution" class="headerlink" title="2D convolution"></a>2D convolution</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/74.png" class>
<h4 id="Discrete-2D-convolution"><a href="#Discrete-2D-convolution" class="headerlink" title="Discrete 2D convolution"></a>Discrete 2D convolution</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/75.png" class>
<p>This can also be the same with the vector/matrix dot product.</p>
<h4 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h4><p>Adding pixels around the image border.</p>
<h4 id="Blur"><a href="#Blur" class="headerlink" title="Blur"></a>Blur</h4><p>box滤波：卷积核全为1</p>
<p>高斯滤波：特定函数</p>
<h4 id="Sharpen"><a href="#Sharpen" class="headerlink" title="Sharpen"></a>Sharpen</h4><p>Sharpening is adding high frequencies. </p>
<ul>
<li>Let be the original image. </li>
<li>High frequencies in image is J-blur(I), blur(I) is the low frequencied in image. </li>
<li>Sharpened image is I+(I-blur(I)).</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/76.png" class>
<h4 id="Gradient-detection-filter"><a href="#Gradient-detection-filter" class="headerlink" title="Gradient detection filter"></a>Gradient detection filter</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/77.png" class>
<h4 id="Bilateral-filter"><a href="#Bilateral-filter" class="headerlink" title="Bilateral filter"></a>Bilateral filter</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/78.png" class>
<h3 id="2-Image-sampling"><a href="#2-Image-sampling" class="headerlink" title="2 Image sampling"></a>2 Image sampling</h3><blockquote>
<p>Change image size / resolution. resolution: pixel / inch</p>
</blockquote>
<h4 id="Reducing-image-size"><a href="#Reducing-image-size" class="headerlink" title="Reducing image size"></a>Reducing image size</h4><p>降采样，去掉旁边的像素或者取均值</p>
<h4 id="Aliasing"><a href="#Aliasing" class="headerlink" title="Aliasing"></a>Aliasing</h4><p>Aliasing - artifacts due to sampling </p>
<p>Signals are changing too fast but sampled too slow.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/79.png" class>
<h4 id="Anti-aliasing"><a href="#Anti-aliasing" class="headerlink" title="Anti-aliasing"></a>Anti-aliasing</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/80.png" class>
<p>How to do anti-aliasing </p>
<ul>
<li>Convolve the image with low-pass filters (e.g. Gaussian). </li>
<li>Sample it with a Nyquist rate.</li>
</ul>
<h4 id="Fourier-Transform"><a href="#Fourier-Transform" class="headerlink" title="Fourier Transform"></a>Fourier Transform</h4><p>Represent a function as a weighted sum of sines and cosines.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/81.png" class>
<h3 id="3-Image-magnification"><a href="#3-Image-magnification" class="headerlink" title="3 Image magnification"></a>3 Image magnification</h3><h4 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h4><ul>
<li><p>Nearest-neighbor interpolation </p>
</li>
<li><p>Linear interpolation </p>
</li>
<li><p>Cubic spline interpolation (Polynomial interpolation) </p>
<p>Each interval of function has different parameters</p>
</li>
<li><p>Bilinear Interpolation (2D) Bilinear Interpolation is good enough.</p>
</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/82.png" class>
<h4 id="Seam-Carving"><a href="#Seam-Carving" class="headerlink" title="Seam Carving"></a>Seam Carving</h4><p>A method to change aspect ratio. </p>
<p>Find connected path of pixels from top to bottom of which the edge energy is minimal, removing unnoticeable pixels.</p>
<p>Algorithm: DP</p>
<h2 id="Lec-4-Model-Fitting-and-Optimization"><a href="#Lec-4-Model-Fitting-and-Optimization" class="headerlink" title="Lec 4 Model Fitting and Optimization"></a>Lec 4 Model Fitting and Optimization</h2><blockquote>
<p>本讲与数值分析课程高度重合</p>
</blockquote>
<h3 id="1-Optimization"><a href="#1-Optimization" class="headerlink" title="1 Optimization"></a>1 Optimization</h3><blockquote>
<p>minimize f~0~(x)</p>
</blockquote>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/83.png" class>
<h4 id="Model-fitting"><a href="#Model-fitting" class="headerlink" title="Model fitting"></a>Model fitting</h4><p>Mean Square Error (MSE)</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/84.png" class>
<h3 id="2-Numerical-methods"><a href="#2-Numerical-methods" class="headerlink" title="2 Numerical methods"></a>2 Numerical methods</h3><p>Find a solution path: F (x~0~) &gt; F (x~1~) &gt; … &gt; F (x~k~) &gt; …</p>
<p>与数值分析课上内容类似，泰勒展开，进行迭代，做一阶、二阶近似</p>
<h4 id="梯度下降法：迭代法的一种"><a href="#梯度下降法：迭代法的一种" class="headerlink" title="梯度下降法：迭代法的一种"></a>梯度下降法：迭代法的一种</h4><h4 id="Newton-method：见数值分析课程"><a href="#Newton-method：见数值分析课程" class="headerlink" title="Newton method：见数值分析课程"></a>Newton method：见数值分析课程</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/85.png" class>
<h4 id="高斯-牛顿迭代"><a href="#高斯-牛顿迭代" class="headerlink" title="高斯-牛顿迭代"></a>高斯-牛顿迭代</h4><h3 id="3-Robust-estimation"><a href="#3-Robust-estimation" class="headerlink" title="3 Robust estimation"></a>3 Robust estimation</h3><p>Use other loss functions to replace MSE，去掉影响很大的噪点</p>
<h4 id="Random-Sample-Concensus-RANSAC"><a href="#Random-Sample-Concensus-RANSAC" class="headerlink" title="Random Sample Concensus (RANSAC)"></a>Random Sample Concensus (RANSAC)</h4><p>Key ideas </p>
<ul>
<li>The distribution of inliers is similar  while outliers differ a lot </li>
<li>Use data point pairs to vote</li>
</ul>
<h3 id="4-Interpolation"><a href="#4-Interpolation" class="headerlink" title="4 Interpolation"></a>4 Interpolation</h3><blockquote>
<p>具体请参考数值分析</p>
</blockquote>
<p>线性插值</p>
<p>三次样条插值</p>
<h3 id="5-Graphcut"><a href="#5-Graphcut" class="headerlink" title="5 Graphcut"></a>5 Graphcut</h3><h4 id="Images-as-Graphs"><a href="#Images-as-Graphs" class="headerlink" title="Images as Graphs"></a>Images as Graphs</h4><p>A vertex for each pixel, an edge between each pair, each edge is weighted by the affinity or similarity between its two vertices.</p>
<h4 id="Normalized-cut"><a href="#Normalized-cut" class="headerlink" title="Normalized cut"></a>Normalized cut</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/86.png" class>
<h4 id="Markov-Random-Field-MRF"><a href="#Markov-Random-Field-MRF" class="headerlink" title="Markov Random Field (MRF)"></a>Markov Random Field (MRF)</h4><p>马尔科夫随机场，没看懂</p>
<h2 id="Lec-5-Image-Matching-and-Motion-Estimation"><a href="#Lec-5-Image-Matching-and-Motion-Estimation" class="headerlink" title="Lec 5 Image Matching and Motion Estimation"></a>Lec 5 Image Matching and Motion Estimation</h2><h3 id="1-Image-matching"><a href="#1-Image-matching" class="headerlink" title="1 Image matching"></a>1 Image matching</h3><blockquote>
<p>Finding point-to-point correspondences between two images.</p>
</blockquote>
<h4 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h4><ul>
<li>Detection: Identify the interest points (key points). </li>
<li>Description: Extract vector feature descriptor surrounding each interest point. </li>
<li>Matching: Determine correspondence between descriptors in two views.</li>
</ul>
<h4 id="detection"><a href="#detection" class="headerlink" title="detection"></a>detection</h4><p>Principal Component Analysis (PCA)</p>
<p>角点检测</p>
<ul>
<li><p>Compute the covariance matrix at each point</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/87.png" class>
</li>
<li><p>Compute eigenvalues</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/88.png" class>
</li>
<li><p>Classify points using eigenvalues of H:</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/89.png" class>
</li>
</ul>
<h4 id="Blob-detector"><a href="#Blob-detector" class="headerlink" title="Blob detector"></a>Blob detector</h4><p>Blobs are have large second derivatives in image intensity.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/90.png" class>
<h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>SIFT descriptor：Scale Invariant Feature Transform descriptor, use histogram of oriented gradients.</p>
<p>SIFT Algorithm</p>
<ul>
<li>Run DoG detector to find maximum in location/scale space.</li>
<li>Find dominate orientation and normalize the orientation.</li>
<li>For each (x, y, scale, orientation), create the only descriptor.</li>
</ul>
<h4 id="Matching"><a href="#Matching" class="headerlink" title="Matching"></a>Matching</h4><p>Define the difference between two features f1 , f2, distance L2 = ||f1 − f2 ||</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/91.png" class>
<h3 id="2-Motion-estimation"><a href="#2-Motion-estimation" class="headerlink" title="2 Motion estimation"></a>2 Motion estimation</h3><h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h4><p>Both feature matching and motion estimation are called correspondence problems.</p>
<p>特征追踪：</p>
<p>Extract feature (interest) points and “track” them over multiple frames. </p>
<p>Output: displacement of sparse points</p>
<p>光流法：</p>
<p>Recover image motion at each pixel </p>
<p>Output: dense displacement field (optical flow filed)</p>
<h4 id="Lucas-Kanade-Method"><a href="#Lucas-Kanade-Method" class="headerlink" title="Lucas-Kanade Method"></a>Lucas-Kanade Method</h4><p>Key assumptions：</p>
<ul>
<li>Small motion: points do not move very far </li>
<li>Brightness constancy: same point looks the same(in brightness) in every frame </li>
<li>Spatial coherence: points move like their neighbors</li>
</ul>
<p>本讲小总结：</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/92.png" class>
<h2 id="Lec-6-Image-stitching"><a href="#Lec-6-Image-stitching" class="headerlink" title="Lec 6 Image stitching"></a>Lec 6 Image stitching</h2><h3 id="1-Image-Warping"><a href="#1-Image-Warping" class="headerlink" title="1 Image Warping"></a>1 Image Warping</h3><p>Change shape of image</p>
<h4 id="Linear-Transformmation"><a href="#Linear-Transformmation" class="headerlink" title="Linear Transformmation"></a>Linear Transformmation</h4><p>Linear map = Matrices</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/93.png" class>
<h4 id="Affine-Transformation"><a href="#Affine-Transformation" class="headerlink" title="Affine Transformation"></a>Affine Transformation</h4><p>Affine map = linear map + translation</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/94.png" class>
<p>Using homogenous coordinates</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/95.png" class>
<ul>
<li><p>6 unknowns in equations </p>
</li>
<li><p>2 equations for each match </p>
</li>
<li><p>we need at least 3 matches to solve a affine transformation </p>
</li>
<li><p>for n matches, solve with least squares</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/96.png" class>
</li>
</ul>
<p>The result of solution must be remembered. </p>
<p>the last row with matrix must be [0 0 1]</p>
<h4 id="Projective-Transformation-Homography"><a href="#Projective-Transformation-Homography" class="headerlink" title="Projective Transformation (Homography)"></a>Projective Transformation (Homography)</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/97.png" class>
<ul>
<li><p>8 unknowns in equations </p>
</li>
<li><p>Homography matrix is up to scale (can be multiplied by a scalar), which means the degree of freedom is 8 . </p>
</li>
<li><p>2 equations for each match </p>
</li>
<li><p>we need at least 4 matches to solve the homography </p>
</li>
<li><p>for n matches, solve with ||h|| = 1</p>
<p>h = eigenvector of A^T^A with smallest eigenvalue</p>
</li>
</ul>
<h4 id="DoF"><a href="#DoF" class="headerlink" title="DoF"></a>DoF</h4><ul>
<li>Translation: The degree of freedom is 2 </li>
<li>Affine: The degree of freedom is 6 </li>
<li>Projective: The degree of freedom is 8</li>
</ul>
<h4 id="Forward-Warping"><a href="#Forward-Warping" class="headerlink" title="Forward Warping"></a>Forward Warping</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/98.png" class>
<h4 id="Inverse-Warping"><a href="#Inverse-Warping" class="headerlink" title="Inverse Warping"></a>Inverse Warping</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/99.png" class>
<p>if pixel lands between pixels, we interpolate color values from neighboring pixels.</p>
<ul>
<li>nearest neighbor </li>
<li>bilinear (usually this method is enough) </li>
<li>bicubic</li>
</ul>
<h3 id="2-Image-Stitching"><a href="#2-Image-Stitching" class="headerlink" title="2 Image Stitching"></a>2 Image Stitching</h3><p>Algorithm:</p>
<ul>
<li>Input images </li>
<li>Feature matching </li>
<li>Compute transformation matrix with RANSAC </li>
<li>Fix image 1 and warp image 2</li>
</ul>
<p>Cylindrical projection:</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/100.png" class>
<h2 id="Lec-7-Structure-from-Motion"><a href="#Lec-7-Structure-from-Motion" class="headerlink" title="Lec 7 Structure from Motion"></a>Lec 7 Structure from Motion</h2><blockquote>
<p>Target: recover camera poses and 3D structure of a scene from its images</p>
</blockquote>
<h3 id="1-Camera-calibration"><a href="#1-Camera-calibration" class="headerlink" title="1 Camera calibration"></a>1 Camera calibration</h3><h4 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h4><p>参考文献：<a href="https://blog.csdn.net/fengye2two/article/details/80686409/">图像处理——相机标定</a></p>
<blockquote>
<p>世界坐标系（world coordinate）(<em>xw,yw,zw</em>)，也称为测量坐标系，是一个三维直角坐标系，以其为基准可以描述相机和待测物体的空间位置。世界坐标系的位置可以根据实际情况自由确定。世界坐标系的最小单位为mm。</p>
<p>相机坐标系（camera coordinate）(<em>xc,yc,zc</em>)，也是一个三维直角坐标系，原点位于镜头光心处，xc、yc轴分别与像面的两边平行，zc轴为镜头光轴，与像平面垂直。相机坐标系的最小单位为mm。</p>
<p>图像坐标系（image coordinate）(<em>x</em>,<em>y</em>)，是像平面上的二维直角坐标系。图像坐标系的原点为镜头光轴与像平面的交点（也称主点，principal point），它的x轴与相机坐标系的xc轴平行，它的y轴与相机坐标系的yc轴平行。图像坐标系的最小单位为mm。</p>
<p>像素坐标系（pixel coordinate）(u,v)，是图像处理工作中常用的二维直角坐标系，反映了相机CCD/CMOS芯片中像素的排列情况。它的原点位于图像左上角，横坐标u表示像素所在的列，纵坐标v表示像素所在的行。像素坐标系与图像坐标系可以简单理解为平移关系，它们同处于像平面。像素坐标系的x轴与图像坐标系的u轴平行，像素坐标系的y轴与图像坐标系的v轴平行。像素坐标系的最小单位为像素。</p>
</blockquote>
<p>变换过程：</p>
<p>世界=》相机=》图像=》像素</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/1.png" class>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/2.png" class>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/3.png" class>
<p>so, it is similar to lab2.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/4.png" class>
<p>世界直接转换为像素：</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/5.png" class>
<p>解方程时：</p>
<ul>
<li>找特征点，建立方程求解未知数$p$</li>
</ul>
<blockquote>
<p>具体查看参考文献和课程PPT</p>
</blockquote>
<h4 id="PnP问题"><a href="#PnP问题" class="headerlink" title="PnP问题"></a>PnP问题</h4><p>参考文献：<a href="https://zhuanlan.zhihu.com/p/399140251">PnP问题各种算法总结分析</a></p>
<blockquote>
<p>问题描述：已知n个3D点的坐标(相对世界坐标系)以及这些点的像素坐标时，如何估计相机的位姿</p>
</blockquote>
<h5 id="Direct-Linear-Transform-DLT"><a href="#Direct-Linear-Transform-DLT" class="headerlink" title="Direct Linear Transform (DLT)"></a>Direct Linear Transform (DLT)</h5><p>前面我们通过解方程的形式解出了这个方程，这种方法就叫做DLT。</p>
<h5 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h5><p>至少三个对应关系可以解出相机坐标，还需要一个对应关系使这个解是特解。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/6.png" class>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/7.png" class>
<h5 id="EPnP"><a href="#EPnP" class="headerlink" title="EPnP"></a>EPnP</h5><p>Main steps: </p>
<ol>
<li>Represent each point as the linear combination of 4 control points c~i~. </li>
<li><p>Construct a linear system in the control-point coordinate.</p>
</li>
<li><p>Solve the equation.</p>
</li>
</ol>
<h3 id="2-Two-frame-structure-from-motion"><a href="#2-Two-frame-structure-from-motion" class="headerlink" title="2 Two-frame structure from motion"></a>2 Two-frame structure from motion</h3><ol>
<li>Assume Camera Matrix 𝐾 is known for each camera </li>
<li>Find a few Reliable Corresponding Points</li>
<li>Find Relative Camera Position 𝐭 and Orientation 𝑅</li>
<li>Find 3D position of scene points</li>
</ol>
<p>详细讲解：<a href="https://zhuanlan.zhihu.com/p/472205819">对极几何—知乎</a></p>
<p>​                    <a href="https://xhy3054.github.io/epipolar-geometry/">对极几何—github</a></p>
<h3 id="3-Multi-frame-structure-from-motion"><a href="#3-Multi-frame-structure-from-motion" class="headerlink" title="3 Multi-frame structure from motion"></a>3 Multi-frame structure from motion</h3><ol>
<li>Initialize camera motion and scene structure </li>
<li>For each additional view - Determine projection matrix of new camera using all the<br> known 3D points that are visible in its image - Refine and extend structure: compute new 3D points, reoptimize existing points that are also seen by this camera</li>
<li>Refine structure and motion: Bundle Adjustment</li>
</ol>
<h3 id="4-A-modern-SfM-system-COLMAP"><a href="#4-A-modern-SfM-system-COLMAP" class="headerlink" title="4 A modern SfM system: COLMAP"></a>4 A modern SfM system: COLMAP</h3><blockquote>
<p>sfM: Structure-from-Motion</p>
<p>MVS: Multi-View Stereo</p>
</blockquote>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/8.png" class>
<h2 id="Lec-8-Depth-estimation-and-3D-reconstruction"><a href="#Lec-8-Depth-estimation-and-3D-reconstruction" class="headerlink" title="Lec 8 Depth estimation and 3D reconstruction"></a>Lec 8 Depth estimation and 3D reconstruction</h2><h3 id="1-Depth-estimation"><a href="#1-Depth-estimation" class="headerlink" title="1 Depth estimation"></a>1 Depth estimation</h3><h4 id="1-1-Introduction"><a href="#1-1-Introduction" class="headerlink" title="1.1 Introduction"></a>1.1 Introduction</h4><p>​    深度传感器顾名思义是用来探测环境物体与传感器之间的距离的。它的输出主要可以表示为深度图(depth map)和点云(point cloud)这两种形式。</p>
<p>​    深度图像（depth image)也被称为距离影像（range image），是指将从图像采集器到场景中各点的距离（深度）作为像素值的图像，它直接反映了景物可见表面的几何形状。深度图像经过坐标转换可以计算为点云数据，有规则及必要信息的点云数据也可以反算为深度图像数据。<br>深度数据流所提供的图像帧中，每一个像素点代表的是在深度感应器的视野中，该特定的（x, y）坐标处物体到离摄像头平面最近的物体到该平面的距离（以毫米为单位）。</p>
<ul>
<li>被动测距传感(Passive depth sensing)</li>
</ul>
<blockquote>
<p>被动测距传感=两个相隔一定距离的相机获得两幅图像+立体匹配+三角原理计算视差（disparity）</p>
</blockquote>
<p>​        两个相隔一定距离的摄像机同时获取同一场景的两幅图像，通过立体匹配算法找到两幅图像中对应的像素点，随后根据三角原理计算出视差信息，而视差信息通过转换可用于表征场景中物体的深度信息。基于立体匹配算法，还可通过拍摄同一场景下不同角度的一组图像来获得该场景的深度图像。除此之外，场景深度信息还可以通过对图像的光度特征、明暗特征等特征进行分析间接估算得到。</p>
<ul>
<li>主动测距传感(Active depth sensing)</li>
</ul>
<p>​        主动测距传感相比较于被动测距传感最明显的特征是：设备本身需要发射能量来完成深度信息的采集。这也就保证了深度图像的获取独立于彩色图像的获取。近年来，主动深度传感在市面上的应用愈加丰富。主动深度传感的方法主要包括了TOF（Time of Flight）、结构光、激光扫描等。</p>
<h4 id="1-2-Stereo-matching"><a href="#1-2-Stereo-matching" class="headerlink" title="1.2 Stereo matching"></a>1.2 Stereo matching</h4><blockquote>
<p>参考资料<a href="https://zhuanlan.zhihu.com/p/161276985">3D视觉之立体匹配</a></p>
<p><a href="https://blog.csdn.net/Android_WPF/article/details/126434543">立体匹配算法</a></p>
</blockquote>
<p>最简单的算法：</p>
<ul>
<li>For each pixel in the first image <ul>
<li>Find corresponding epipolar line in the right image</li>
<li>Search along epipolar line and pick the best match</li>
</ul>
</li>
<li>Simplest case: epipolar lines are horizontal scanlines</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/9.png" class>
<p>这样就找到了两个相同的点，然后计算深度。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/10.png" class>
<p>如果视角不在同一水平线上，就先把他们转到同一水平线。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/11.png" class>
<p>Stereo as energy minimization：让当前像素的代价聚合过程受多个方向(或路径)上所有像素的影响，方向越多参与影响当前像素的邻域像素就越多</p>
<p>动态规划：</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/12.png" class>
<p>Choosing the stereo baseline：</p>
<ul>
<li>Too small: large depth error </li>
<li>Too large: difficult search problem</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/13.png" class>
<h4 id="1-3-Multi-view-stereo"><a href="#1-3-Multi-view-stereo" class="headerlink" title="1.3 Multi-view stereo"></a>1.3 Multi-view stereo</h4><p>Plane-Sweep: <a href="https://blog.csdn.net/xuangenihao/article/details/81392684">平面扫描算法</a></p>
<p>PatchMatch: <a href="PatchMatch">PatchMatch</a></p>
<ol>
<li>Initialize pixels with random patch offsets</li>
<li>Check if neighbors have better patch offsets</li>
<li>Search in concentric radius around the current offset for better better patch offsets</li>
<li>Go to Step 2 until converge.</li>
</ol>
<h3 id="2-3D-reconstruction"><a href="#2-3D-reconstruction" class="headerlink" title="2 3D reconstruction"></a>2 3D reconstruction</h3><h4 id="2-1-3D-representations"><a href="#2-1-3D-representations" class="headerlink" title="2.1 3D representations"></a>2.1 3D representations</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/14.png" class>
<ul>
<li><p>点云</p>
</li>
<li><p>mesh 用G(E, V)表示</p>
</li>
<li><p>voxel</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/15.png" class>
</li>
<li><p>SDF(Signed Distance Function)</p>
<ul>
<li>The distance of a point to the shape boundary</li>
<li>The distance is defined by a metric, usually the Euclidean distance</li>
</ul>
<p>Truncated Signed Distance Function (TSDF): Truncation SDF’s distance value to [−1, 1]</p>
</li>
</ul>
<h4 id="2-2-3D-surface-reconstruction"><a href="#2-2-3D-surface-reconstruction" class="headerlink" title="2.2 3D surface reconstruction"></a>2.2 3D surface reconstruction</h4><p><a href="https://blog.csdn.net/qinqinxiansheng/article/details/119449196">KinectFusion</a></p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/16.png" class>
<p><strong><a href="https://www.jianshu.com/p/8641e0db0367">泊松重建</a></strong></p>
<p><a href="https://blog.csdn.net/weixin_38060850/article/details/109143025"><strong>Marching Cubes算法</strong></a></p>
<p>视频介绍Marching Cubes算法: </p>
<iframe src="//player.bilibili.com/player.html?aid=79262663&bvid=BV1yJ411r73v&cid=135644481&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p><a href="https://blog.csdn.net/whuawell/article/details/74998280">Marching Squares</a> 基本和Marching cubes 类似。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/17.png" class>
<p><strong><a href="https://blog.csdn.net/jiankangyq/article/details/121808174">COLMAP</a></strong>: 一种通用的运动结构 (SfM) 和多视图立体 (MVS) 管道。</p>
<h4 id="2-3-Texture-mapping"><a href="#2-3-Texture-mapping" class="headerlink" title="2.3 Texture mapping"></a>2.3 Texture mapping</h4><blockquote>
<p>Surface lives in 3D world space</p>
<p>Every 3D surface point also has a place where it goes in the 2D image (texture).</p>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/364045620">纹理映射(Texture mapping)</a></p>
<h2 id="Lec-9-Deep-Learning"><a href="#Lec-9-Deep-Learning" class="headerlink" title="Lec 9 Deep Learning"></a>Lec 9 Deep Learning</h2><h3 id="1-Machine-learning"><a href="#1-Machine-learning" class="headerlink" title="1 Machine learning"></a>1 Machine learning</h3><blockquote>
<p>传统程序是给电脑输入和程序，电脑给出输出。</p>
<p>机器学习是给电脑输入和输出，电脑给出程序。</p>
</blockquote>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li><p>Model: $x$和$y$之间关系的数学表示</p>
</li>
<li><p>Supervised learning(监督学习): 可以由训练资料中学到或建立一个模式（函数/learning model），并且依次模式推测出新的实例。</p>
<p>labeled data: exisitng (x,y) pairs, called training data.</p>
</li>
<li><p>机器学习的两个阶段：</p>
<ul>
<li>训练(Training)</li>
<li>测试(Testing)</li>
</ul>
</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/18.png" class>
<h3 id="2-Linear-classifier"><a href="#2-Linear-classifier" class="headerlink" title="2 Linear classifier"></a>2 Linear classifier</h3><h4 id="CLassification-model"><a href="#CLassification-model" class="headerlink" title="CLassification model"></a>CLassification model</h4><blockquote>
<p>输入是一张图片</p>
<p>输出是每个分类的对应分数</p>
</blockquote>
<p>有两部分组成：</p>
<ul>
<li>评分函数</li>
<li>损失函数</li>
</ul>
<h4 id="Linear-classifier"><a href="#Linear-classifier" class="headerlink" title="Linear classifier"></a>Linear classifier</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/19.png" class>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/20.png" class>
<p>将一张照片里面的所有像素变成一个向量。</p>
<p>$f(x_i,W,b) = Wx_i + b$</p>
<p>参数<strong>W</strong>被称为<strong>权重（weights）</strong>，<strong>b</strong>被称为<strong>偏差向量（bias vector）</strong>。</p>
<ul>
<li>首先，一个单独的矩阵乘法$Wx_i$就高效地并行评估10个不同的分类器（每个分类器针对一个分类），其中每个类的分类器就是W的一个行向量。</li>
<li>训练数据用来学习$W$和$b$</li>
<li>一张图像可看做高维空间的一个点，每个分类就是把这些点划分成若干个区域。</li>
</ul>
<h4 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h4><blockquote>
<p>判断一个权重矩阵是否足够好</p>
<p>回归问题使用均方误差(MSE)</p>
<p>分类问题使用交叉熵(Cross Entropy Loss)</p>
<p>参考资料：<a href="https://blog.csdn.net/xg123321123/article/details/80781611">简单谈谈Cross Entropy Loss</a></p>
</blockquote>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/21.png" class>
<p>Softmax: 把K个实值转换为另外K个实值并使K个实值之和为1的函数。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/22.png" class>
<h3 id="3-Neural-networks"><a href="#3-Neural-networks" class="headerlink" title="3 Neural networks"></a>3 Neural networks</h3><blockquote>
<p>参考资料：<a href="https://blog.csdn.net/weixin_39910711/article/details/114849349">激活函数（Activation Function）</a></p>
</blockquote>
<p>​    <strong>激活函数</strong>：不使用激活函数的话，神经网络的每层都只是做<strong>线性变换</strong>，多层输入叠加后也还是线性变换。因为线性模型的表达能力通常不够，所以这时候就体现了激活函数的作用了，激活函数可以引入<strong>非线性因素</strong>。</p>
<p>​    在神经网络每一层神经元做完线性变换后，加上一个非线性激励函数对线性变换的结果进行转换，输出就可以变成一个非线性的函数。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/23.png" class>
<p><strong>多层感知器</strong></p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/24.png" class>
<p><strong>全连接神经网络</strong></p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/25.png" class>
<h3 id="4-Convolutional-neural-networks—卷积神经网络"><a href="#4-Convolutional-neural-networks—卷积神经网络" class="headerlink" title="4 Convolutional neural networks—卷积神经网络"></a>4 Convolutional neural networks—卷积神经网络</h3><blockquote>
<p>参考资料：<a href="https://blog.csdn.net/jiaoyangwm/article/details/80011656/">卷积神经网络超详细介绍</a></p>
</blockquote>
<h4 id="Convolution-local-connectivity-weight-sharing"><a href="#Convolution-local-connectivity-weight-sharing" class="headerlink" title="Convolution = local connectivity + weight sharing"></a>Convolution = local connectivity + weight sharing</h4><blockquote>
<p>两者的关键作用就是减少参数数量，使运算变得简洁、高效，能够在超大规模数据集上运算</p>
</blockquote>
<p>local connectivity(局部连接): 对于局部连接而言：层间神经只有局部范围内的连接，在这个范围内采用全连接的方式，超过这个范围的神经元则没有连接；连接与连接之间独立参数，相比于去全连接减少了感受域外的连接，有效减少参数规模。</p>
<p>weight sharing(权值共享): 从图像局部学习到的信息应用到图像的其他部位去。权值共享意味着每一个过滤器在遍历整个图像的时候，过滤器的参数(即过滤器的参数的值)是固定不变的</p>
<p>参考：<a href="https://blog.csdn.net/malvas/article/details/86647781">weight sharing</a></p>
<h4 id="感受野-Receptive-fields"><a href="#感受野-Receptive-fields" class="headerlink" title="感受野(Receptive fields)"></a>感受野(Receptive fields)</h4><ul>
<li>若目标相对感受野过小，那训练参数只有少部分是对应于训练目标的，则在测试环节，也很难检测出类似的目标；</li>
<li>若目标相对感受野过大，那训练的参数都是对应于整个对象的局部信息，是不够利于检测小目标的。</li>
</ul>
<h4 id="池化层-Pooling-layer"><a href="#池化层-Pooling-layer" class="headerlink" title="池化层(Pooling layer)"></a>池化层(Pooling layer)</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/26.png" class>
<h4 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/27.png" class>
<h3 id="5-Training-neural-networks"><a href="#5-Training-neural-networks" class="headerlink" title="5 Training neural networks"></a>5 Training neural networks</h3><h4 id="梯度下降训练CNN"><a href="#梯度下降训练CNN" class="headerlink" title="梯度下降训练CNN"></a>梯度下降训练CNN</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/28.png" class>
<h4 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h4><blockquote>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/21407711?refer=intelligentunit">反向传播-cs231n</a></p>
</blockquote>
<ol>
<li>Forward data through the network, get loss</li>
<li>Backprop to calculate the gradients</li>
<li>Update the parameters using the gradient</li>
<li>Go to step 1 if not converged</li>
</ol>
<h4 id="随机梯度下降法-SGD"><a href="#随机梯度下降法-SGD" class="headerlink" title="随机梯度下降法(SGD)"></a>随机梯度下降法(SGD)</h4><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_41803874/article/details/114016587">随机梯度下降详解</a></p>
</blockquote>
<p>仅计算一批随机采样图像上的损失和梯度。</p>
<h4 id="超参数-hyper-parameters"><a href="#超参数-hyper-parameters" class="headerlink" title="超参数(hyper-parameters)"></a>超参数(hyper-parameters)</h4><p>算法运行前需要决定的参数。</p>
<p>选择依据：</p>
<ol>
<li>Train for original model</li>
<li>Validate to find hyperparameters</li>
<li>Test to understand generalizability</li>
</ol>
<h4 id="过拟合-overfitting"><a href="#过拟合-overfitting" class="headerlink" title="过拟合(overfitting)"></a>过拟合(overfitting)</h4><p>把噪音点也拟合上了，过分依赖数据集。</p>
<p>防止：</p>
<ol>
<li><p>Cross validation(验证) and early stop</p>
</li>
<li><p>Regularization(正则化) or dropout</p>
<p><strong>正则化</strong>：在损失函数中给每个参数 w 加上权重，引入模型复杂度指标，从而抑制模型噪声，减小过拟合。 </p>
<p><strong>dropout</strong>：在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征</p>
</li>
<li><p>Data augmentation(数据增强)</p>
<blockquote>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/41679153">数据增强(Data Augmentation)</a></p>
</blockquote>
<p>​    为了获得更多的数据，我们只要对现有的数据集进行微小的改变。比如旋转（flips）、移位（translations）、旋转（rotations）等微小的改变。我们的网络会认为这是不同的图片。</p>
</li>
</ol>
<h4 id="批标准化-Batch-Normalization"><a href="#批标准化-Batch-Normalization" class="headerlink" title="批标准化(Batch Normalization)"></a>批标准化(Batch Normalization)</h4><blockquote>
<p>参考<a href="https://www.cnblogs.com/guoyaohua/p/8724433.html">深入理解BN</a></p>
</blockquote>
<p>​    目的：Reduce internal covariate shift(<a href="https://zhuanlan.zhihu.com/p/480425962">内部协变量偏移</a>)</p>
<p>​    神经网络的深度增加，每层特征值分布会逐渐的向激活函数的输出区间的上下两端（激活函数饱和区间）靠近，这样继续下去就会导致梯度消失。BN就是通过方法将<strong>该层特征值分布重新拉回标准正态分布</strong>，特征值将落在激活函数对于输入较为敏感的区间，输入的小变化可导致损失函数较大的变化，使得梯度变大，避免梯度消失，同时也可加快收敛。</p>
<p>​    训练时的使用方法：对每个隐层加上一层BN。</p>
<h3 id="6-Network-architectures"><a href="#6-Network-architectures" class="headerlink" title="6 Network architectures"></a>6 Network architectures</h3><blockquote>
<p>以前发展不好：</p>
<ul>
<li>数据集过小导致过拟合</li>
<li>计算能力不够</li>
</ul>
</blockquote>
<p><a href="https://blog.csdn.net/qq_42076902/article/details/123864381">AlexNet</a></p>
<p><a href="https://blog.csdn.net/qq_45649076/article/details/120494328">ResNet</a></p>
<p><a href="https://blog.csdn.net/qq_44766883/article/details/112011420">DenseNet</a>：互相连接所有的层</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/29.png" class>
<p><a href="https://blog.csdn.net/qq_47233366/article/details/123029998">MobileNets</a></p>
<p><a href="https://blog.csdn.net/fengmaomao1991/article/details/121247163">Neural Architecture Search</a>(神经架构搜索)</p>
<h2 id="Lec-10-Recognition"><a href="#Lec-10-Recognition" class="headerlink" title="Lec 10 Recognition"></a>Lec 10 Recognition</h2><h3 id="1-Semantic-segmentation-语义分割"><a href="#1-Semantic-segmentation-语义分割" class="headerlink" title="1 Semantic segmentation(语义分割)"></a>1 Semantic segmentation(语义分割)</h3><blockquote>
<p>在图像领域，语义指的是图像的内容，对图片意思的理解，比如左图的语义就是三个人骑着三辆自行车；分割的意思是从像素的角度分割出图片中的不同对象，对原图中的每个像素都进行标注。</p>
</blockquote>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/30.png" class>
<h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>滑动窗口：时间复杂度高，有限的感受野。</p>
<p>全连接卷积网络：一次做出预测，损失函数是每个像素的交叉熵。</p>
<p>Unpolling：一种上采样方法，有很多种具体案例。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/31.png" class>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/32.png" class>
<h4 id="U-Net"><a href="#U-Net" class="headerlink" title="U-Net"></a>U-Net</h4><p>Skip Connection: 跳过中间连接，使深层和浅层连接起来。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/33.png" class>
<h4 id="DeepLab"><a href="#DeepLab" class="headerlink" title="DeepLab"></a>DeepLab</h4><blockquote>
<p>参考: <a href="https://blog.csdn.net/weixin_42137700/article/details/81835354">图像语义分割之FCN和CRF</a></p>
</blockquote>
<p>图像语义分割步骤：</p>
<ul>
<li>FCN - 全卷积网络</li>
<li>CRF - 条件随机场(Conditional random field)</li>
<li>MRF - 马尔科夫随机场</li>
</ul>
<h4 id="评估指标"><a href="#评估指标" class="headerlink" title="评估指标"></a>评估指标</h4><p>Per-pixel Intersection-over-union</p>
<h3 id="2-Object-detection-目标检测"><a href="#2-Object-detection-目标检测" class="headerlink" title="2 Object detection(目标检测)"></a>2 Object detection(目标检测)</h3><blockquote>
<p>输入：一张RGB图片</p>
<p>输出：表示对象的一组边界框(类别标签、框的位置，框的大小)</p>
</blockquote>
<h4 id="单个物体检测"><a href="#单个物体检测" class="headerlink" title="单个物体检测"></a>单个物体检测</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/34.png" class>
<h4 id="多个物体检测"><a href="#多个物体检测" class="headerlink" title="多个物体检测"></a>多个物体检测</h4><p>一张照片经过各种不同的神经网络，得出结果。</p>
<h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>Apply a CNN to many different crops of the image, CNN classifies each crop as object or background.</p>
<p>一张图片可以被拆分成很多boxes，我们不能检测所有这些图片。</p>
<h4 id="Region-proposals-候选区域"><a href="#Region-proposals-候选区域" class="headerlink" title="Region proposals(候选区域)"></a>Region proposals(候选区域)</h4><p>用图像分割算法先分割图像，然后再进行目标检测。</p>
<h4 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h4><ol>
<li>选建议框并调整尺寸</li>
<li>对每个类别使用SVM分类器进行打分</li>
<li>进行筛选</li>
<li>损失函数：$loU=\frac {Area Of Overlap}{Area Of Union}$</li>
</ol>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/35.png" class>
<p>Mean Average Precision (mAP)：</p>
<ol>
<li>Run object detector on all test images </li>
<li><p>For each category, compute Average Precision (AP) = area under Precision vs Recall Curve </p>
<ol>
<li><p>For each detection (highest score to lowest score) </p>
<ol>
<li><p>If it matches some GT box with IoU &gt; 0.5, mark it as positive and eliminate the GT</p>
</li>
<li><p>Otherwise mark it as negative </p>
</li>
<li><p>Plot a point on PR Curve</p>
</li>
</ol>
</li>
<li>Average Precision (AP) = area under PR curve</li>
</ol>
</li>
<li>Mean Average Precision (mAP) = average of AP for each category</li>
<li>For “COCO mAP”: Compute mAP@thresh for each IoU threshold (0.5, 0.55, 0.6, …, 0.95) and take average</li>
</ol>
<p>非最大抑制(Non-Max Suppression):</p>
<ol>
<li>Select the highest-scoring box </li>
<li>Eliminate lower-scoring boxes with IoU &gt; threshold </li>
<li>If any boxes remain, goto 1</li>
</ol>
<h4 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN:"></a>Fast R-CNN:</h4><p>A two-stage object detector</p>
<ul>
<li>First stage: run once per image<ul>
<li>Backbone network</li>
<li>RPN</li>
</ul>
</li>
<li>Second stage: run once per region<ul>
<li>Crop features: RoI pool / align</li>
<li>Predict object class</li>
<li>Predict bbox offset</li>
</ul>
</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/36.png" class>
<h4 id="Rol-Pool"><a href="#Rol-Pool" class="headerlink" title="Rol Pool"></a>Rol Pool</h4><p><a href="https://blog.csdn.net/qq_41021141/article/details/120617660">R-CNN中的ROIPool、ROIAlign</a></p>
<h4 id="RPN"><a href="#RPN" class="headerlink" title="RPN"></a>RPN</h4><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_42912710/article/details/119872716">详解RPN网络</a></p>
<p>RPN（Region Proposal Network）是Faster-RCNN网络用于提取预选框（也就是RCNN中使用selective search算法进行Region Proposal的部分），R-CNN及Fast-RCNN中一个性能瓶颈就是提取预选框的部分，而RPN很好地对这个部分进行了优化，原因在于它将卷积神经网络引入了进来，使用特征提取的形式生成出预选框的位置从而降低了selective search算法带来的计算时间上的开销。</p>
</blockquote>
<p>​    假设我们有一张大小为600×800的图像，在通过卷积神经网络（CNN）块后，这幅输入图像缩小为38×56的特征图，特征图的每个位置都有9个锚点盒。那么我们就有38 <em> 56 </em> 9=1192个建议或锚箱需要考虑。而每个锚箱都有两个可能的标签（前景或背景）。如果我们把特征图的深度定为18（9个锚点x 2个标签），我们将使每个锚点都有一个有两个值的向量（通常称为预测值），代表前景和背景。如果我们将预测值送入softmax/logistic回归激活函数，它将预测标签。</p>
<h3 id="3-Instance-segmentation-实例分割"><a href="#3-Instance-segmentation-实例分割" class="headerlink" title="3 Instance segmentation(实例分割)"></a>3 Instance segmentation(实例分割)</h3><ol>
<li>语义分割的话只需要分出不同类就行，同类的不同个体不需要分，但是Instance Segmentation这里在语义分割的基础上又把不同的类进行了分割</li>
<li>目标检测后，需要对检测的部分做进一步的语义分割</li>
</ol>
<p><a href="https://blog.csdn.net/qq_37392244/article/details/88844681">Mask R-CNN</a>:</p>
<p>在Faster R-CNN的基础上添加了一个预测分割mask的分支，如下图所示。其中黑色部分为原来的Faster-RCNN，红色部分为在Faster-RCNN网络上的修改。将RoI Pooling 层替换成了RoIAlign层；添加了并列的FCN层（mask层）。</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/37.png" class>
<blockquote>
<p>DeepSnake: 通过深度学习给出输入初始轮廓顶点需要调整的偏移量，以得到更为准确的实例分割结果。</p>
</blockquote>
<p>Panoptic segmentation: 对每一个像素都分出类别</p>
<h3 id="4-Human-pose-estimation-人体姿态估计"><a href="#4-Human-pose-estimation-人体姿态估计" class="headerlink" title="4 Human pose estimation(人体姿态估计)"></a>4 Human pose estimation(人体姿态估计)</h3><blockquote>
<p>通过定位一组关键点来表示人的姿势</p>
</blockquote>
<p>单人：Represent joint location as the heatmap(现在把关键点用热力图(heat map)表示，不需要全连接层，加速算法减少参数量。对于每一个关键点输出一张heat map)</p>
<p>多人：</p>
<ul>
<li>Top-down(准确)：把多人转成单人，图像分割</li>
<li>Bottom-up(快)：先检测出图中所有人的所有关键点，再对关键点进行分组，进而组装成多个人</li>
</ul>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/104917833">人体姿态估计(Human Pose Estimation)经典方法整理</a></p>
</blockquote>
<h3 id="5-Optical-flow-光流"><a href="#5-Optical-flow-光流" class="headerlink" title="5 Optical flow(光流)"></a>5 Optical flow(光流)</h3><blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_41368247/article/details/82562165">计算机视觉—光流法(optical flow)简介</a></p>
<p>光流(optical flow)是空间运动物体在观察成像平面上的像素运动的瞬时速度。在时间间隔很小（比如视频的连续前后两帧之间）时，也等同于目标点的位移。</p>
</blockquote>
<h4 id="光流场："><a href="#光流场：" class="headerlink" title="光流场："></a>光流场：</h4><p>​    光流场是一个二维矢量场，它反映了图像上每一点灰度的变化趋势，可看成是带有灰度的像素点在图像平面上运动而产生的瞬时速度场。它包含的信息即是各像点的瞬时运动速度矢量信息。</p>
<p>​    研究光流场的目的就是为了从序列图像中近似计算不能直接得到的运动场。光流场在理想情况下，光流场对应于运动场。</p>
<h4 id="FlowNet"><a href="#FlowNet" class="headerlink" title="FlowNet"></a>FlowNet</h4><p>两部分：缩小和放大</p>
<ul>
<li>缩小(卷积)部分<ol>
<li>第一种缩小(卷积)方案是最朴素的方法的，就是将这一对图片的通道concat起来</li>
<li>第二中方案是这一对图片分开处理，分别进入卷积网路，得到各自的特征图，然后再找到它们特征图之间的联系。</li>
</ol>
</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/39.png" class>
<ul>
<li><p>放大部分</p>
<p>一边向后unconv，一边直接在小的特征图上预测，然后把结果双线性插值然后concat在unconv后的特征图上，然后接着往后传，重复四次后，得到的预测光流分辨率依然是输入的1/4，再重复之前的操作已没有太多提升，所以可以直接双线性插值得到和输入相同分辨率的光流预测图。</p>
</li>
</ul>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/38.png" class>
<h3 id="6-Other-tasks"><a href="#6-Other-tasks" class="headerlink" title="6 Other tasks"></a>6 Other tasks</h3><p>Video classification: Use 3D CNN</p>
<p>Temporal action localization: Generate proposals then classify</p>
<p>Multi-object tracking</p>
<h2 id="Lec-11-3D-Deep-Learning"><a href="#Lec-11-3D-Deep-Learning" class="headerlink" title="Lec 11  3D Deep Learning"></a>Lec 11  3D Deep Learning</h2><h3 id="1-Feature-matching"><a href="#1-Feature-matching" class="headerlink" title="1 Feature matching"></a>1 Feature matching</h3><h4 id="Super-Polint-用于提取特征点"><a href="#Super-Polint-用于提取特征点" class="headerlink" title="Super Polint: 用于提取特征点"></a>Super Polint: 用于提取特征点</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/40.png" class>
<ul>
<li><p>CNN-based detectors: Representing feature point locations by heatmaps</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/41.png" class>
</li>
<li><p>CNN-based descriptors: Extract descriptors from CNN feature maps(每一张图都是一层神经网络下的特征图，取所有图中对应的点做一个向量)</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/42.png" class>
</li>
</ul>
<h4 id="SuperGlue-现在最好的检测方法"><a href="#SuperGlue-现在最好的检测方法" class="headerlink" title="SuperGlue: 现在最好的检测方法"></a>SuperGlue: 现在最好的检测方法</h4><h3 id="2-Object-Pose-Estimation"><a href="#2-Object-Pose-Estimation" class="headerlink" title="2 Object Pose Estimation"></a>2 Object Pose Estimation</h3><p>Estimate the 3D location and orientation (位置和方向) of an object  realtive to the camera frame.</p>
<p>Before that, we need to define the geometry center of the object.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/43.png" class>
<ol>
<li>Find 3D-2D correspondences</li>
<li>Solve R and t by perspective-n-point (PnP) algorithm</li>
<li>Find 2D-3D correspondences: detecting keyponts using CNNs</li>
</ol>
<h3 id="3-Human-Pose-Estimation"><a href="#3-Human-Pose-Estimation" class="headerlink" title="3 Human Pose Estimation"></a>3 Human Pose Estimation</h3><h4 id="Markerless-MoCap-相机照射关键点，标记物在人身体上，Markless就是不用贴标记物"><a href="#Markerless-MoCap-相机照射关键点，标记物在人身体上，Markless就是不用贴标记物" class="headerlink" title="Markerless MoCap: 相机照射关键点，标记物在人身体上，Markless就是不用贴标记物"></a>Markerless MoCap: 相机照射关键点，标记物在人身体上，Markless就是不用贴标记物</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/44.png" class>
<h4 id="Monocular-3D-Human-Pose-Estimation-参数化人体模型"><a href="#Monocular-3D-Human-Pose-Estimation-参数化人体模型" class="headerlink" title="Monocular 3D Human Pose Estimation: 参数化人体模型"></a>Monocular 3D Human Pose Estimation: 参数化人体模型</h4><p>Estimating 3D human pose using a single camera</p>
<p>Using networks to regress joint locations</p>
<h3 id="4-Depth-Estimation"><a href="#4-Depth-Estimation" class="headerlink" title="4 Depth Estimation"></a>4 Depth Estimation</h3><blockquote>
<p>Multiview Depth Estimation: Reconstruct the dense 3D shape from a set of images and camera parameters</p>
</blockquote>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/45.png" class>
<p>Learned multi-view stereo</p>
<p>Cost volume is a 3D array that stores the errors of all pixels at all depths</p>
<h3 id="5-Single-Image-to-3D"><a href="#5-Single-Image-to-3D" class="headerlink" title="5 Single Image to 3D"></a>5 Single Image to 3D</h3><p>• Depth • Point Cloud • Mesh • Volume</p>
<h4 id="Monoculer-depth-estimation"><a href="#Monoculer-depth-estimation" class="headerlink" title="Monoculer depth estimation"></a>Monoculer depth estimation</h4><blockquote>
<p>Learning to guess depth from large-scale training data</p>
</blockquote>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/46.png" class>
<h4 id="Single-view-shape-estimation"><a href="#Single-view-shape-estimation" class="headerlink" title="Single-view shape estimation"></a>Single-view shape estimation</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/47.png" class>
<p>除了点云，mesh等方法也可应用。</p>
<h3 id="6-PointNet"><a href="#6-PointNet" class="headerlink" title="6 PointNet"></a>6 PointNet</h3><p>把点云放进神经网络，以前的神经网络都是光栅化的</p>
<p>挑战1：点顺序不确定——最后再做pooling</p>
<p>挑战2：位置变化不确定——估计姿态</p>
<h2 id="Lec-12-Computational-Photography-I"><a href="#Lec-12-Computational-Photography-I" class="headerlink" title="Lec 12 Computational Photography I"></a>Lec 12 Computational Photography I</h2><h3 id="1-High-Dynamic-Range-Imaging-HDR"><a href="#1-High-Dynamic-Range-Imaging-HDR" class="headerlink" title="1 High Dynamic Range Imaging (HDR)"></a>1 High Dynamic Range Imaging (HDR)</h3><h4 id="Exposure-曝光"><a href="#Exposure-曝光" class="headerlink" title="Exposure:曝光"></a>Exposure:曝光</h4><p><strong>Exposure = Gain(增益) x Irradiance(光线) x Time(时间)</strong></p>
<ul>
<li>Gain is controlled by the ISO </li>
<li>Irradiance is controlled by the aperture </li>
<li>Time is controlled by the shutter speed</li>
</ul>
<h4 id="Dynamic-Range"><a href="#Dynamic-Range" class="headerlink" title="Dynamic Range"></a>Dynamic Range</h4><p>The ratio between the largest and smallest values of a certain quantity.</p>
<h4 id="HDR"><a href="#HDR" class="headerlink" title="HDR"></a>HDR</h4><p>亮的地方和暗的地方能同时拍清楚</p>
<p>实现方法：</p>
<ul>
<li>Exposure bracketing: Capture multiple LDR images at different exposures(一次拍很多张)</li>
<li>Merging: Combine them into a single HDR image(然后合在一起)</li>
</ul>
<h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/48.png" class>
<h4 id="Tone-mapping"><a href="#Tone-mapping" class="headerlink" title="Tone mapping"></a>Tone mapping</h4><p>Display the HDR image (12-bit) on a SDR (standard dynamic range, 8-bit) device.</p>
<blockquote>
<p>Gamma compression</p>
</blockquote>
<p>X → aX^γ^, applied independently on R, G, B intend to keep more details on each parts.</p>
<ul>
<li><p>γ &lt; 1:  keep more datails on dart parts</p>
</li>
<li><p>γ &gt; 1: keep more datails on light parts</p>
</li>
</ul>
<h3 id="2-Deblurring"><a href="#2-Deblurring" class="headerlink" title="2 Deblurring"></a>2 Deblurring</h3><h4 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h4><ul>
<li>Defocus: the subject is not in the depth of view</li>
<li>Motion blur: moving subjects or unstable camera</li>
<li>……</li>
</ul>
<h4 id="Modeling-Image-Blur"><a href="#Modeling-Image-Blur" class="headerlink" title="Modeling Image Blur"></a>Modeling Image Blur</h4><p>The blurring process can be described by convolution. H is called blur kernel.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/49.png" class>
<p>Deblurring = Deconvolution</p>
<ul>
<li>NBID: Non-blind image deconvolution, the blur kernel is known.</li>
<li>BID: Blind image deconvolution, the blur kernel is also unknown.</li>
</ul>
<h4 id="NBID"><a href="#NBID" class="headerlink" title="NBID"></a>NBID</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/50.png" class>
<ul>
<li>G: The captured image (known) </li>
<li>F: Image to be solved (unknown) </li>
<li>H: Blur kernel (known)</li>
</ul>
<p>Inverse Filter: will also amplify noise</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/51.png" class>
<p>Wiener Filter: Suppress high frequency when reverse filtering</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/52.png" class>
<p>Deconvolution by optimization</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/53.png" class>
<p>Deconvolution is ill-posed, these are several sets of solutions have the same MSE.</p>
<p>Objective function = likelihood function + regular term</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/54.png" class>
<h4 id="BID"><a href="#BID" class="headerlink" title="BID"></a>BID</h4><p>Blur kernel is non-negative and sparse.</p>
<p>Optimized objective function:</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/55.png" class>
<h3 id="3-Colorization-黑白变彩色"><a href="#3-Colorization-黑白变彩色" class="headerlink" title="3 Colorization(黑白变彩色)"></a>3 Colorization(黑白变彩色)</h3><h4 id="Sample-based-colorization"><a href="#Sample-based-colorization" class="headerlink" title="Sample-based colorization"></a>Sample-based colorization</h4><p>把一张照片上的颜色迁移到另一张照片，主要任务是像素匹配</p>
<h4 id="Interactive-colorization"><a href="#Interactive-colorization" class="headerlink" title="Interactive colorization"></a>Interactive colorization</h4><p>给出线条大致的颜色(user-guided)</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/56.png" class>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/57.png" class>
<p>Constraint: User-specified colors of brushed pixels keep unchanged</p>
<h4 id="Generative-Adversarial-Network-GAN"><a href="#Generative-Adversarial-Network-GAN" class="headerlink" title="Generative Adversarial Network (GAN)"></a>Generative Adversarial Network (GAN)</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/58.png" class>
<p>D can be viewed as a loss function to train G：</p>
<ul>
<li>Called adversarial loss </li>
<li>Learned instead of being hand-designed </li>
<li>Can be applied to any image synthesis tasks</li>
</ul>
<h3 id="4-Super-Resolution"><a href="#4-Super-Resolution" class="headerlink" title="4 Super Resolution"></a>4 Super Resolution</h3><p>Super Resolution using GAN</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/59.png" class>
<h2 id="Lec-13-Computational-Photography-II"><a href="#Lec-13-Computational-Photography-II" class="headerlink" title="Lec 13 Computational Photography II"></a>Lec 13 Computational Photography II</h2><h3 id="1-Image-based-Rendering"><a href="#1-Image-based-Rendering" class="headerlink" title="1 Image-based Rendering"></a>1 Image-based Rendering</h3><p>Rendering: from 3D models to images</p>
<p>Image-based: 基于照片进行渲染</p>
<h4 id="Light-Fields"><a href="#Light-Fields" class="headerlink" title="Light Fields"></a>Light Fields</h4><p>The plenoptic function (7D) depicts light rays passing through.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/60.png" class>
<h4 id="Multi-Plane-Image-MPI"><a href="#Multi-Plane-Image-MPI" class="headerlink" title="Multi-Plane Image (MPI)"></a>Multi-Plane Image (MPI)</h4><p>A set of front-parallel planes at a fixed range of depths.</p>
<p>Each plane encodes an RGB color image and an alpha/transparency map α~d~.</p>
<img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/61.png" class>
<h4 id="NeRF"><a href="#NeRF" class="headerlink" title="NeRF"></a>NeRF</h4><img src="/2022/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AF%BC%E8%AE%BA/62.png" class>
<h3 id="2-Neural-Rendering"><a href="#2-Neural-Rendering" class="headerlink" title="2 Neural Rendering"></a>2 Neural Rendering</h3><h4 id="Pose-Transfer-amp-Garment-Transfer"><a href="#Pose-Transfer-amp-Garment-Transfer" class="headerlink" title="Pose Transfer &amp; Garment Transfer"></a>Pose Transfer &amp; Garment Transfer</h4><blockquote>
<p>Input: Image(s) of a person</p>
<p>Output: Synthesised images of the persion in different poses (Pose Transfer),  or with different clothing (Garment Transfer).</p>
</blockquote>
<p>Method:</p>
<ul>
<li>Use parametric mesh (SMPL) to represent body pose and shape </li>
<li>Use high-dimensional UV texture map to encode appearance </li>
<li>Transfer the pose and appearance</li>
</ul>
]]></content>
      <categories>
        <category>CV</category>
        <category>courses</category>
      </categories>
  </entry>
</search>
